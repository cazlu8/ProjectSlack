{"version":3,"sources":["npm-cli.js"],"names":[],"mappings":"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","file":"npm-cli-compiled.js","sourcesContent":["#!/usr/bin/env node\n;(function () { // wrapper in case we're in module_context mode\n\n// windows: running \"npm blah\" in this folder will invoke WSH, not node.\nif (typeof WScript !== \"undefined\") {\n  WScript.echo(\"npm does not work when run\\n\"\n              +\"with the Windows Scripting Host\\n\\n\"\n              +\"'cd' to a different directory,\\n\"\n              +\"or type 'npm.cmd <args>',\\n\"\n              +\"or type 'node npm <args>'.\")\n  WScript.quit(1)\n  return\n}\n\n\nprocess.title = \"npm\"\n\nvar log = require(\"npmlog\")\nlog.pause() // will be unpaused when config is loaded.\nlog.info(\"it worked if it ends with\", \"ok\")\n\nvar path = require(\"path\")\n  , npm = require(\"../lib/npm.js\")\n  , npmconf = require(\"../lib/config/core.js\")\n  , errorHandler = require(\"../lib/utils/error-handler.js\")\n\n  , configDefs = npmconf.defs\n  , shorthands = configDefs.shorthands\n  , types = configDefs.types\n  , nopt = require(\"nopt\")\n\n// if npm is called as \"npmg\" or \"npm_g\", then\n// run in global mode.\nif (path.basename(process.argv[1]).slice(-1)  === \"g\") {\n  process.argv.splice(1, 1, \"npm\", \"-g\")\n}\n\nlog.verbose(\"cli\", process.argv)\n\nvar conf = nopt(types, shorthands)\nnpm.argv = conf.argv.remain\nif (npm.deref(npm.argv[0])) npm.command = npm.argv.shift()\nelse conf.usage = true\n\n\nif (conf.version) {\n  console.log(npm.version)\n  return\n}\n\nif (conf.versions) {\n  npm.command = \"version\"\n  conf.usage = false\n  npm.argv = []\n}\n\nlog.info(\"using\", \"npm@%s\", npm.version)\nlog.info(\"using\", \"node@%s\", process.version)\n\nprocess.on(\"uncaughtException\", errorHandler)\n\nif (conf.usage && npm.command !== \"help\") {\n  npm.argv.unshift(npm.command)\n  npm.command = \"help\"\n}\n\n// now actually fire up npm and run the command.\n// this is how to use npm programmatically:\nconf._exit = true\nnpm.load(conf, function (er) {\n  if (er) return errorHandler(er)\n  npm.commands[npm.command](npm.argv, errorHandler)\n})\n\n})()\n"]}