{"version":3,"sources":["git.js"],"names":[],"mappings":";;;;;AAGA,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAA;AACxB,OAAO,CAAC,aAAa,GAAG,aAAa,CAAA;AACrC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAA;;AAEnC,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,QAAQ;IACxC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC;IAC1B,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC;IAC1B,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC;IACxB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;;AAE3B,SAAS,aAAa,GAAI;AACxB,SAAO,OAAO,CAAC,QAAQ,KAAK,OAAO,GAAG,CAAC,IAAI,EAAE,qBAAqB,CAAC,GAAG,EAAE,CAAA;CACzE;;AAED,SAAS,OAAO,CAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;AACnC,KAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;AACrB,MAAI,QAAQ,GAAG,aAAa,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAA;AACjD,SAAO,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;CACxC;;AAED,SAAS,QAAQ,CAAE,IAAI,EAAE,OAAO,EAAE;AAChC,KAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;AACrB,SAAO,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;CAC/D;;AAED,SAAS,aAAa,GAAI;AACxB,MAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AAChD,SAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;CAC9B;;AAED,SAAS,QAAQ,CAAE,EAAE,EAAE;AACrB,SAAO,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;CACtB;;AAED,SAAS,YAAY,CAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;AACxC,QAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,sBAAsB,CAAC,CAAA;;AAE3D,UAAQ,CAAC,UAAU,GAAG,EAAE;AACtB,QAAI,GAAG,EAAE;AACP,SAAG,CAAC,IAAI,GAAG,QAAQ,CAAA;AACnB,aAAO,EAAE,CAAC,GAAG,CAAC,CAAA;KACf;;AAED,WAAO,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;GAC3B,CAAC,CAAA;CACH","file":"git-compiled.js","sourcesContent":["\n// handle some git configuration for windows\n\nexports.spawn = spawnGit\nexports.chainableExec = chainableExec\nexports.whichAndExec = whichAndExec\n\nvar exec = require(\"child_process\").execFile\n  , spawn = require(\"./spawn\")\n  , npm = require(\"../npm.js\")\n  , which = require(\"which\")\n  , git = npm.config.get(\"git\")\n  , assert = require(\"assert\")\n  , log = require(\"npmlog\")\n\nfunction prefixGitArgs () {\n  return process.platform === \"win32\" ? [\"-c\", \"core.longpaths=true\"] : []\n}\n\nfunction execGit (args, options, cb) {\n  log.info('git', args)\n  var fullArgs = prefixGitArgs().concat(args || [])\n  return exec(git, fullArgs, options, cb)\n}\n\nfunction spawnGit (args, options) {\n  log.info(\"git\", args)\n  return spawn(git, prefixGitArgs().concat(args || []), options)\n}\n\nfunction chainableExec () {\n  var args = Array.prototype.slice.call(arguments)\n  return [execGit].concat(args)\n}\n\nfunction whichGit (cb) {\n  return which(git, cb)\n}\n\nfunction whichAndExec (args, options, cb) {\n  assert.equal(typeof cb, \"function\", \"no callback provided\")\n  // check for git\n  whichGit(function (err) {\n    if (err) {\n      err.code = \"ENOGIT\"\n      return cb(err)\n    }\n\n    execGit(args, options, cb)\n  })\n}\n"]}