{"version":3,"sources":["update.js"],"names":[],"mappings":";;;;;;;;;AAOA,MAAM,CAAC,OAAO,GAAG,MAAM,CAAA;;AAEvB,MAAM,CAAC,KAAK,GAAG,kBAAkB,CAAA;;AAEjC,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC;IACzB,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ;IACpC,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAC;;;;AAAA;IAIvB,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC;IACjC,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAEjC,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAA;;AAEpD,SAAS,MAAM,CAAE,IAAI,EAAE,EAAE,EAAE;AACzB,KAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE;AACxD,QAAI,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAA;;AAErB,QAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE;AACzC,UAAI,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;AACf,UAAI,OAAO,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;AACnB,UAAI,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;AAClB,UAAI,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;AAClB,UAAI,OAAO,KAAK,MAAM,IAAI,MAAM,KAAK,MAAM,EAAE;AAC3C,WAAG,CAAC,OAAO,CACT,UAAU,EACV,cAAc,EAAE,GAAG,EACnB,uFAAuF,CACxF,CAAA;OACF;AACD,aAAO,OAAO,KAAK,MAAM,CAAA;KAC1B,CAAC,CAAA;AACF,QAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO,EAAE,EAAE,CAAA;;AAEpC,OAAG,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CAAA;AACxC,YAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE;;AAEjC,UAAI,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;UACb,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;UACX,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;UACZ,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI;UACvB,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;UACX,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;;AAGxB,UAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,CAAA;AACvC,SAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAA;KACtC,EAAE,EAAE,CAAC,CAAA;GACP,CAAC,CAAA;CACH","file":"update-compiled.js","sourcesContent":["/*\nfor each pkg in prefix that isn't a git repo\n  look for a new version of pkg that satisfies dep\n  if so, install it.\n  if not, then update it\n*/\n\nmodule.exports = update\n\nupdate.usage = \"npm update [pkg]\"\n\nvar npm = require(\"./npm.js\")\n  , asyncMap = require(\"slide\").asyncMap\n  , log = require(\"npmlog\")\n\n  // load these, just so that we know that they'll be available, in case\n  // npm itself is getting overwritten.\n  , install = require(\"./install.js\")\n  , build = require(\"./build.js\")\n\nupdate.completion = npm.commands.outdated.completion\n\nfunction update (args, cb) {\n  npm.commands.outdated(args, true, function (er, outdated) {\n    if (er) return cb(er)\n\n    var wanted = outdated.filter(function (ww) {\n      var dep = ww[1]\n      var current = ww[2]\n      var wanted = ww[3]\n      var latest = ww[4]\n      if (current === wanted && wanted !== latest) {\n        log.verbose(\n          'outdated',\n          'not updating', dep,\n          \"because it's currently at the maximum version that matches its specified semver range\"\n        )\n      }\n      return current !== wanted\n    })\n    if (wanted.length === 0) return cb()\n\n    log.info('outdated', 'updating', wanted)\n    asyncMap(wanted, function (ww, cb) {\n      // [[ dir, dep, has, want, req ]]\n      var where = ww[0]\n        , dep = ww[1]\n        , want = ww[3]\n        , what = dep + \"@\" + want\n        , req = ww[5]\n        , url = require('url')\n\n      // use the initial installation method (repo, tar, git) for updating\n      if (url.parse(req).protocol) what = req\n      npm.commands.install(where, what, cb)\n    }, cb)\n  })\n}\n"]}