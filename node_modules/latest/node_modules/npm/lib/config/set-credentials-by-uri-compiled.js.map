{"version":3,"sources":["set-credentials-by-uri.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;;AAE9B,IAAI,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;;AAE1C,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAA;;AAEpC,SAAS,mBAAmB,CAAE,GAAG,EAAE,CAAC,EAAE;AACpC,QAAM,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,0BAA0B,CAAC,CAAA;AAClE,QAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,0BAA0B,CAAC,CAAA;;AAE9D,MAAI,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;;AAE5B,MAAI,CAAC,CAAC,KAAK,EAAE;AACX,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,aAAa,EAAE,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;AACjD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,YAAY,EAAY,MAAM,CAAC,CAAA;AACjD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,EAAa,MAAM,CAAC,CAAA;AACjD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,QAAQ,EAAgB,MAAM,CAAC,CAAA;AACjD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,cAAc,EAAU,MAAM,CAAC,CAAA;GAClD,MACI,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,KAAK,EAAE;AAC5C,UAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAA;AAC3C,UAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAA;AAC3C,UAAM,CAAC,CAAC,CAAC,KAAK,EAAE,4BAA4B,CAAC,CAAA;;AAE7C,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,aAAa,EAAE,MAAM,CAAC,CAAA;;AAExC,QAAI,OAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC/D,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,YAAY,EAAE,OAAO,EAAI,MAAM,CAAC,CAAA;AAClD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;AAClD,QAAI,CAAC,GAAG,CAAC,MAAM,GAAG,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAQ,MAAM,CAAC,CAAA;;AAElD,QAAI,CAAC,CAAC,UAAU,KAAK,SAAS,EAAE;AAC9B,UAAI,CAAC,GAAG,CAAC,MAAM,GAAG,cAAc,EAAE,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;KACxD,MACI;AACH,UAAI,CAAC,GAAG,CAAC,MAAM,GAAG,cAAc,EAAE,MAAM,CAAC,CAAA;KAC1C;GACF,MACI;AACH,UAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;GAC1C;CACF","file":"set-credentials-by-uri-compiled.js","sourcesContent":["var assert = require(\"assert\")\n\nvar toNerfDart = require(\"./nerf-dart.js\")\n\nmodule.exports = setCredentialsByURI\n\nfunction setCredentialsByURI (uri, c) {\n  assert(uri && typeof uri === \"string\", \"registry URL is required\")\n  assert(c && typeof c === \"object\", \"credentials are required\")\n\n  var nerfed = toNerfDart(uri)\n\n  if (c.token) {\n    this.set(nerfed + \":_authToken\", c.token, \"user\")\n    this.del(nerfed + \":_password\",           \"user\")\n    this.del(nerfed + \":username\",            \"user\")\n    this.del(nerfed + \":email\",               \"user\")\n    this.del(nerfed + \":always-auth\",         \"user\")\n  }\n  else if (c.username || c.password || c.email) {\n    assert(c.username, \"must include username\")\n    assert(c.password, \"must include password\")\n    assert(c.email, \"must include email address\")\n\n    this.del(nerfed + \":_authToken\", \"user\")\n\n    var encoded = new Buffer(c.password, \"utf8\").toString(\"base64\")\n    this.set(nerfed + \":_password\", encoded,   \"user\")\n    this.set(nerfed + \":username\", c.username, \"user\")\n    this.set(nerfed + \":email\", c.email,       \"user\")\n\n    if (c.alwaysAuth !== undefined) {\n      this.set(nerfed + \":always-auth\", c.alwaysAuth, \"user\")\n    }\n    else {\n      this.del(nerfed + \":always-auth\", \"user\")\n    }\n  }\n  else {\n    throw new Error(\"No credentials to set.\")\n  }\n}\n"]}