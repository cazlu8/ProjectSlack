{"version":3,"sources":["task.js"],"names":[],"mappings":"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","file":"task-compiled.js","sourcesContent":["/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n(function(exports) {\n\n  'use strict';\n\n  // Construct-o-rama.\n  function Task() {\n    // Information about the currently-running task.\n    this.current = {};\n    // Tasks.\n    this._tasks = {};\n    // Task queue.\n    this._queue = [];\n    // Queue placeholder (for dealing with nested tasks).\n    this._placeholder = {placeholder: true};\n    // Queue marker (for clearing the queue programmatically).\n    this._marker = {marker: true};\n    // Options.\n    this._options = {};\n    // Is the queue running?\n    this._running = false;\n    // Success status of completed tasks.\n    this._success = {};\n  }\n\n  // Expose the constructor function.\n  exports.Task = Task;\n\n  // Create a new Task instance.\n  exports.create = function() {\n    return new Task();\n  };\n\n  // If the task runner is running or an error handler is not defined, throw\n  // an exception. Otherwise, call the error handler directly.\n  Task.prototype._throwIfRunning = function(obj) {\n    if (this._running || !this._options.error) {\n      // Throw an exception that the task runner will catch.\n      throw obj;\n    } else {\n      // Not inside the task runner. Call the error handler and abort.\n      this._options.error.call({name: null}, obj);\n    }\n  };\n\n  // Register a new task.\n  Task.prototype.registerTask = function(name, info, fn) {\n    // If optional \"info\" string is omitted, shuffle arguments a bit.\n    if (fn == null) {\n      fn = info;\n      info = null;\n    }\n    // String or array of strings was passed instead of fn.\n    var tasks;\n    if (typeof fn !== 'function') {\n      // Array of task names.\n      tasks = this.parseArgs([fn]);\n      // This task function just runs the specified tasks.\n      fn = this.run.bind(this, fn);\n      fn.alias = true;\n      // Generate an info string if one wasn't explicitly passed.\n      if (!info) {\n        info = 'Alias for \"' + tasks.join('\", \"') + '\" task' +\n          (tasks.length === 1 ? '' : 's') + '.';\n      }\n    } else if (!info) {\n      info = 'Custom task.';\n    }\n    // Add task into cache.\n    this._tasks[name] = {name: name, info: info, fn: fn};\n    // Make chainable!\n    return this;\n  };\n\n  // Is the specified task an alias?\n  Task.prototype.isTaskAlias = function(name) {\n    return !!this._tasks[name].fn.alias;\n  };\n\n  // Has the specified task been registered?\n  Task.prototype.exists = function(name) {\n    return name in this._tasks;\n  };\n\n  // Rename a task. This might be useful if you want to override the default\n  // behavior of a task, while retaining the old name. This is a billion times\n  // easier to implement than some kind of in-task \"super\" functionality.\n  Task.prototype.renameTask = function(oldname, newname) {\n    if (!this._tasks[oldname]) {\n      throw new Error('Cannot rename missing \"' + oldname + '\" task.');\n    }\n    // Rename task.\n    this._tasks[newname] = this._tasks[oldname];\n    // Update name property of task.\n    this._tasks[newname].name = newname;\n    // Remove old name.\n    delete this._tasks[oldname];\n    // Make chainable!\n    return this;\n  };\n\n  // Argument parsing helper. Supports these signatures:\n  //  fn('foo')                 // ['foo']\n  //  fn('foo', 'bar', 'baz')   // ['foo', 'bar', 'baz']\n  //  fn(['foo', 'bar', 'baz']) // ['foo', 'bar', 'baz']\n  Task.prototype.parseArgs = function(args) {\n    // Return the first argument if it's an array, otherwise return an array\n    // of all arguments.\n    return Array.isArray(args[0]) ? args[0] : [].slice.call(args);\n  };\n\n  // Split a colon-delimited string into an array, unescaping (but not\n  // splitting on) any \\: escaped colons.\n  Task.prototype.splitArgs = function(str) {\n    if (!str) { return []; }\n    // Store placeholder for \\\\ followed by \\:\n    str = str.replace(/\\\\\\\\/g, '\\uFFFF').replace(/\\\\:/g, '\\uFFFE');\n    // Split on :\n    return str.split(':').map(function(s) {\n      // Restore place-held : followed by \\\\\n      return s.replace(/\\uFFFE/g, ':').replace(/\\uFFFF/g, '\\\\');\n    });\n  };\n\n  // Given a task name, determine which actual task will be called, and what\n  // arguments will be passed into the task callback. \"foo\" -> task \"foo\", no\n  // args. \"foo:bar:baz\" -> task \"foo:bar:baz\" with no args (if \"foo:bar:baz\"\n  // task exists), otherwise task \"foo:bar\" with arg \"baz\" (if \"foo:bar\" task\n  // exists), otherwise task \"foo\" with args \"bar\" and \"baz\".\n  Task.prototype._taskPlusArgs = function(name) {\n    // Get task name / argument parts.\n    var parts = this.splitArgs(name);\n    // Start from the end, not the beginning!\n    var i = parts.length;\n    var task;\n    do {\n      // Get a task.\n      task = this._tasks[parts.slice(0, i).join(':')];\n      // If the task doesn't exist, decrement `i`, and if `i` is greater than\n      // 0, repeat.\n    } while (!task && --i > 0);\n    // Just the args.\n    var args = parts.slice(i);\n    // Maybe you want to use them as flags instead of as positional args?\n    var flags = {};\n    args.forEach(function(arg) { flags[arg] = true; });\n    // The task to run and the args to run it with.\n    return {task: task, nameArgs: name, args: args, flags: flags};\n  };\n\n  // Append things to queue in the correct spot.\n  Task.prototype._push = function(things) {\n    // Get current placeholder index.\n    var index = this._queue.indexOf(this._placeholder);\n    if (index === -1) {\n      // No placeholder, add task+args objects to end of queue.\n      this._queue = this._queue.concat(things);\n    } else {\n      // Placeholder exists, add task+args objects just before placeholder.\n      [].splice.apply(this._queue, [index, 0].concat(things));\n    }\n  };\n\n  // Enqueue a task.\n  Task.prototype.run = function() {\n    // Parse arguments into an array, returning an array of task+args objects.\n    var things = this.parseArgs(arguments).map(this._taskPlusArgs, this);\n    // Throw an exception if any tasks weren't found.\n    var fails = things.filter(function(thing) { return !thing.task; });\n    if (fails.length > 0) {\n      this._throwIfRunning(new Error('Task \"' + fails[0].nameArgs + '\" not found.'));\n      return this;\n    }\n    // Append things to queue in the correct spot.\n    this._push(things);\n    // Make chainable!\n    return this;\n  };\n\n  // Add a marker to the queue to facilitate clearing it programmatically.\n  Task.prototype.mark = function() {\n    this._push(this._marker);\n    // Make chainable!\n    return this;\n  };\n\n  // Run a task function, handling this.async / return value.\n  Task.prototype.runTaskFn = function(context, fn, done, asyncDone) {\n    // Async flag.\n    var async = false;\n\n    // Update the internal status object and run the next task.\n    var complete = function(success) {\n      var err = null;\n      if (success === false) {\n        // Since false was passed, the task failed generically.\n        err = new Error('Task \"' + context.nameArgs + '\" failed.');\n      } else if (success instanceof Error || {}.toString.call(success) === '[object Error]') {\n        // An error object was passed, so the task failed specifically.\n        err = success;\n        success = false;\n      } else {\n        // The task succeeded.\n        success = true;\n      }\n      // The task has ended, reset the current task object.\n      this.current = {};\n      // A task has \"failed\" only if it returns false (async) or if the\n      // function returned by .async is passed false.\n      this._success[context.nameArgs] = success;\n      // If task failed, call error handler.\n      if (!success && this._options.error) {\n        this._options.error.call({name: context.name, nameArgs: context.nameArgs}, err);\n      }\n      // only call done async if explicitly requested to\n      // see: https://github.com/gruntjs/grunt/pull/1026\n      if (asyncDone) {\n        process.nextTick(function () {\n          done(err, success);\n        });\n      } else {\n        done(err, success);\n      }\n    }.bind(this);\n\n    // When called, sets the async flag and returns a function that can\n    // be used to continue processing the queue.\n    context.async = function() {\n      async = true;\n      // The returned function should execute asynchronously in case\n      // someone tries to do this.async()(); inside a task (WTF).\n      return function(success) {\n        setTimeout(function() { complete(success); }, 1);\n      };\n    };\n\n    // Expose some information about the currently-running task.\n    this.current = context;\n\n    try {\n      // Get the current task and run it, setting `this` inside the task\n      // function to be something useful.\n      var success = fn.call(context);\n      // If the async flag wasn't set, process the next task in the queue.\n      if (!async) {\n        complete(success);\n      }\n    } catch (err) {\n      complete(err);\n    }\n  };\n\n  // Begin task queue processing. Ie. run all tasks.\n  Task.prototype.start = function(opts) {\n    if (!opts) {\n      opts = {};\n    }\n    // Abort if already running.\n    if (this._running) { return false; }\n    // Actually process the next task.\n    var nextTask = function() {\n      // Get next task+args object from queue.\n      var thing;\n      // Skip any placeholders or markers.\n      do {\n        thing = this._queue.shift();\n      } while (thing === this._placeholder || thing === this._marker);\n      // If queue was empty, we're all done.\n      if (!thing) {\n        this._running = false;\n        if (this._options.done) {\n          this._options.done();\n        }\n        return;\n      }\n      // Add a placeholder to the front of the queue.\n      this._queue.unshift(this._placeholder);\n\n      // Expose some information about the currently-running task.\n      var context = {\n        // The current task name plus args, as-passed.\n        nameArgs: thing.nameArgs,\n        // The current task name.\n        name: thing.task.name,\n        // The current task arguments.\n        args: thing.args,\n        // The current arguments, available as named flags.\n        flags: thing.flags\n      };\n\n      // Actually run the task function (handling this.async, etc)\n      this.runTaskFn(context, function() {\n        return thing.task.fn.apply(this, this.args);\n      }, nextTask, !!opts.asyncDone);\n\n    }.bind(this);\n\n    // Update flag.\n    this._running = true;\n    // Process the next task.\n    nextTask();\n  };\n\n  // Clear remaining tasks from the queue.\n  Task.prototype.clearQueue = function(options) {\n    if (!options) { options = {}; }\n    if (options.untilMarker) {\n      this._queue.splice(0, this._queue.indexOf(this._marker) + 1);\n    } else {\n      this._queue = [];\n    }\n    // Make chainable!\n    return this;\n  };\n\n  // Test to see if all of the given tasks have succeeded.\n  Task.prototype.requires = function() {\n    this.parseArgs(arguments).forEach(function(name) {\n      var success = this._success[name];\n      if (!success) {\n        throw new Error('Required task \"' + name +\n          '\" ' + (success === false ? 'failed' : 'must be run first') + '.');\n      }\n    }.bind(this));\n  };\n\n  // Override default options.\n  Task.prototype.options = function(options) {\n    Object.keys(options).forEach(function(name) {\n      this._options[name] = options[name];\n    }.bind(this));\n  };\n\n}(typeof exports === 'object' && exports || this));\n"]}