{"version":3,"sources":["cli.js"],"names":[],"mappings":"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","file":"cli-compiled.js","sourcesContent":["/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n'use strict';\n\nvar grunt = require('../grunt');\n\n// Nodejs libs.\nvar path = require('path');\n\n// External libs.\nvar nopt = require('nopt');\n\n// This is only executed when run via command line.\nvar cli = module.exports = function(options, done) {\n  // CLI-parsed options override any passed-in \"default\" options.\n  if (options) {\n    // For each default option...\n    Object.keys(options).forEach(function(key) {\n      if (!(key in cli.options)) {\n        // If this option doesn't exist in the parsed cli.options, add it in.\n        cli.options[key] = options[key];\n      } else if (cli.optlist[key].type === Array) {\n        // If this option's type is Array, append it to any existing array\n        // (or create a new array).\n        [].push.apply(cli.options[key], options[key]);\n      }\n    });\n  }\n\n  // Run tasks.\n  grunt.tasks(cli.tasks, cli.options, done);\n};\n\n// Default options.\nvar optlist = cli.optlist = {\n  help: {\n    short: 'h',\n    info: 'Display this help text.',\n    type: Boolean\n  },\n  base: {\n    info: 'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. (grunt.file.setBase) *',\n    type: path\n  },\n  color: {\n    info: 'Disable colored output.',\n    type: Boolean,\n    negate: true\n  },\n  gruntfile: {\n    info: 'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories for the nearest Gruntfile.js or Gruntfile.coffee file.',\n    type: path\n  },\n  debug: {\n    short: 'd',\n    info: 'Enable debugging mode for tasks that support it.',\n    type: [Number, Boolean]\n  },\n  stack: {\n    info: 'Print a stack trace when exiting with a warning or fatal error.',\n    type: Boolean\n  },\n  force: {\n    short: 'f',\n    info: 'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.',\n    type: Boolean\n  },\n  tasks: {\n    info: 'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *',\n    type: Array\n  },\n  npm: {\n    info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n    type: Array\n  },\n  write: {\n    info: 'Disable writing files (dry run).',\n    type: Boolean,\n    negate: true\n  },\n  verbose: {\n    short: 'v',\n    info: 'Verbose mode. A lot more information output.',\n    type: Boolean\n  },\n  version: {\n    short: 'V',\n    info: 'Print the grunt version. Combine with --verbose for more info.',\n    type: Boolean\n  },\n  // Even though shell auto-completion is now handled by grunt-cli, leave this\n  // option here for display in the --help screen.\n  completion: {\n    info: 'Output shell auto-completion rules. See the grunt-cli documentation for more information.',\n    type: String\n  },\n};\n\n// Parse `optlist` into a form that nopt can handle.\nvar aliases = {};\nvar known = {};\n\nObject.keys(optlist).forEach(function(key) {\n  var short = optlist[key].short;\n  if (short) {\n    aliases[short] = '--' + key;\n  }\n  known[key] = optlist[key].type;\n});\n\nvar parsed = nopt(known, aliases, process.argv, 2);\ncli.tasks = parsed.argv.remain;\ncli.options = parsed;\ndelete parsed.argv;\n\n// Initialize any Array options that weren't initialized.\nObject.keys(optlist).forEach(function(key) {\n  if (optlist[key].type === Array && !(key in cli.options)) {\n    cli.options[key] = [];\n  }\n});\n"]}