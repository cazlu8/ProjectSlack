{"version":3,"sources":["config.js"],"names":[],"mappings":"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","file":"config-compiled.js","sourcesContent":["/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n'use strict';\n\nvar grunt = require('../grunt');\n\n// Get/set config data. If value was passed, set. Otherwise, get.\nvar config = module.exports = function(prop, value) {\n  if (arguments.length === 2) {\n    // Two arguments were passed, set the property's value.\n    return config.set(prop, value);\n  } else {\n    // Get the property's value (or the entire data object).\n    return config.get(prop);\n  }\n};\n\n// The actual config data.\nconfig.data = {};\n\n// Escape any . in name with \\. so dot-based namespacing works properly.\nconfig.escape = function(str) {\n  return str.replace(/\\./g, '\\\\.');\n};\n\n// Return prop as a string.\nconfig.getPropString = function(prop) {\n  return Array.isArray(prop) ? prop.map(config.escape).join('.') : prop;\n};\n\n// Get raw, unprocessed config data.\nconfig.getRaw = function(prop) {\n  if (prop) {\n    // Prop was passed, get that specific property's value.\n    return grunt.util.namespace.get(config.data, config.getPropString(prop));\n  } else {\n    // No prop was passed, return the entire config.data object.\n    return config.data;\n  }\n};\n\n// Match '<%= FOO %>' where FOO is a propString, eg. foo or foo.bar but not\n// a method call like foo() or foo.bar().\nvar propStringTmplRe = /^<%=\\s*([a-z0-9_$]+(?:\\.[a-z0-9_$]+)*)\\s*%>$/i;\n\n// Get config data, recursively processing templates.\nconfig.get = function(prop) {\n  return config.process(config.getRaw(prop));\n};\n\n// Expand a config value recursively. Used for post-processing raw values\n// already retrieved from the config.\nconfig.process = function(raw) {\n  return grunt.util.recurse(raw, function(value) {\n    // If the value is not a string, return it.\n    if (typeof value !== 'string') { return value; }\n    // If possible, access the specified property via config.get, in case it\n    // doesn't refer to a string, but instead refers to an object or array.\n    var matches = value.match(propStringTmplRe);\n    var result;\n    if (matches) {\n      result = config.get(matches[1]);\n      // If the result retrieved from the config data wasn't null or undefined,\n      // return it.\n      if (result != null) { return result; }\n    }\n    // Process the string as a template.\n    return grunt.template.process(value, {data: config.data});\n  });\n};\n\n// Set config data.\nconfig.set = function(prop, value) {\n  return grunt.util.namespace.set(config.data, config.getPropString(prop), value);\n};\n\n// Deep merge config data.\nconfig.merge = function(obj) {\n  grunt.util._.merge(config.data, obj);\n  return config.data;\n};\n\n// Initialize config data.\nconfig.init = function(obj) {\n  grunt.verbose.write('Initializing config...').ok();\n  // Initialize and return data.\n  return (config.data = obj || {});\n};\n\n// Test to see if required config params have been defined. If not, throw an\n// exception (use this inside of a task).\nconfig.requires = function() {\n  var p = grunt.util.pluralize;\n  var props = grunt.util.toArray(arguments).map(config.getPropString);\n  var msg = 'Verifying propert' + p(props.length, 'y/ies') +\n    ' ' + grunt.log.wordlist(props) + ' exist' + p(props.length, 's') +\n    ' in config...';\n  grunt.verbose.write(msg);\n  var failProps = config.data && props.filter(function(prop) {\n    return config.get(prop) == null;\n  }).map(function(prop) {\n    return '\"' + prop + '\"';\n  });\n  if (config.data && failProps.length === 0) {\n    grunt.verbose.ok();\n    return true;\n  } else {\n    grunt.verbose.or.write(msg);\n    grunt.log.error().error('Unable to process task.');\n    if (!config.data) {\n      throw grunt.util.error('Unable to load config.');\n    } else {\n      throw grunt.util.error('Required config propert' +\n        p(failProps.length, 'y/ies') + ' ' + failProps.join(', ') + ' missing.');\n    }\n  }\n};\n"]}