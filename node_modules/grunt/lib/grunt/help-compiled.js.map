{"version":3,"sources":["help.js"],"names":[],"mappings":"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","file":"help-compiled.js","sourcesContent":["/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n'use strict';\n\nvar grunt = require('../grunt');\n\n// Nodejs libs.\nvar path = require('path');\n\n// Set column widths.\nvar col1len = 0;\nexports.initCol1 = function(str) {\n  col1len = Math.max(col1len, str.length);\n};\nexports.initWidths = function() {\n  // Widths for options/tasks table output.\n  exports.widths = [1, col1len, 2, 76 - col1len];\n};\n\n// Render an array in table form.\nexports.table = function(arr) {\n  arr.forEach(function(item) {\n    grunt.log.writetableln(exports.widths, ['', grunt.util._.pad(item[0], col1len), '', item[1]]);\n  });\n};\n\n// Methods to run, in-order.\nexports.queue = [\n  'initOptions',\n  'initTasks',\n  'initWidths',\n  'header',\n  'usage',\n  'options',\n  'optionsFooter',\n  'tasks',\n  'footer',\n];\n\n// Actually display stuff.\nexports.display = function() {\n  exports.queue.forEach(function(name) { exports[name](); });\n};\n\n\n// Header.\nexports.header = function() {\n  grunt.log.writeln('Grunt: The JavaScript Task Runner (v' + grunt.version + ')');\n};\n\n// Usage info.\nexports.usage = function() {\n  grunt.log.header('Usage');\n  grunt.log.writeln(' ' + path.basename(process.argv[1]) + ' [options] [task [task ...]]');\n};\n\n// Options.\nexports.initOptions = function() {\n  // Build 2-column array for table view.\n  exports._options = Object.keys(grunt.cli.optlist).map(function(long) {\n    var o = grunt.cli.optlist[long];\n    var col1 = '--' + (o.negate ? 'no-' : '') + long + (o.short ? ', -' + o.short : '');\n    exports.initCol1(col1);\n    return [col1, o.info];\n  });\n};\n\nexports.options = function() {\n  grunt.log.header('Options');\n  exports.table(exports._options);\n};\n\nexports.optionsFooter = function() {\n  grunt.log.writeln().writelns(\n    'Options marked with * have methods exposed via the grunt API and should ' +\n    'instead be specified inside the Gruntfile wherever possible.'\n  );\n};\n\n// Tasks.\nexports.initTasks = function() {\n  // Initialize task system so that the tasks can be listed.\n  grunt.task.init([], {help: true});\n\n  // Build object of tasks by info (where they were loaded from).\n  exports._tasks = [];\n  Object.keys(grunt.task._tasks).forEach(function(name) {\n    exports.initCol1(name);\n    var task = grunt.task._tasks[name];\n    exports._tasks.push(task);\n  });\n};\n\nexports.tasks = function() {\n  grunt.log.header('Available tasks');\n  if (exports._tasks.length === 0) {\n    grunt.log.writeln('(no tasks found)');\n  } else {\n    exports.table(exports._tasks.map(function(task) {\n      var info = task.info;\n      if (task.multi) { info += ' *'; }\n      return [task.name, info];\n    }));\n\n    grunt.log.writeln().writelns(\n      'Tasks run in the order specified. Arguments may be passed to tasks that ' +\n      'accept them by using colons, like \"lint:files\". Tasks marked with * are ' +\n      '\"multi tasks\" and will iterate over all sub-targets if no argument is ' +\n      'specified.'\n    );\n  }\n\n  grunt.log.writeln().writelns(\n    'The list of available tasks may change based on tasks directories or ' +\n    'grunt plugins specified in the Gruntfile or via command-line options.'\n  );\n};\n\n// Footer.\nexports.footer = function() {\n  grunt.log.writeln().writeln('For more information, see http://gruntjs.com/');\n};\n"]}