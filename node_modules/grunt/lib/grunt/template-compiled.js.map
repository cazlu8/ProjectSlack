{"version":3,"sources":["template.js"],"names":[],"mappings":"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","file":"template-compiled.js","sourcesContent":["/*\n * grunt\n * http://gruntjs.com/\n *\n * Copyright (c) 2014 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * https://github.com/gruntjs/grunt/blob/master/LICENSE-MIT\n */\n\n'use strict';\n\nvar grunt = require('../grunt');\n\n// The module to be exported.\nvar template = module.exports = {};\n\n// External libs.\ntemplate.date = require('dateformat');\n\n// Format today's date.\ntemplate.today = function(format) {\n  return template.date(new Date(), format);\n};\n\n// Template delimiters.\nvar allDelimiters = {};\n\n// Initialize template delimiters.\ntemplate.addDelimiters = function(name, opener, closer) {\n  var delimiters = allDelimiters[name] = {};\n  // Used by grunt.\n  delimiters.opener = opener;\n  delimiters.closer = closer;\n  // Generate RegExp patterns dynamically.\n  var a = delimiters.opener.replace(/(.)/g, '\\\\$1');\n  var b = '([\\\\s\\\\S]+?)' + delimiters.closer.replace(/(.)/g, '\\\\$1');\n  // Used by Lo-Dash.\n  delimiters.lodash = {\n    evaluate: new RegExp(a + b, 'g'),\n    interpolate: new RegExp(a + '=' + b, 'g'),\n    escape: new RegExp(a + '-' + b, 'g')\n  };\n};\n\n// The underscore default template syntax should be a pretty sane default for\n// the config system.\ntemplate.addDelimiters('config', '<%', '%>');\n\n// Set Lo-Dash template delimiters.\ntemplate.setDelimiters = function(name) {\n  // Get the appropriate delimiters.\n  var delimiters = allDelimiters[name in allDelimiters ? name : 'config'];\n  // Tell Lo-Dash which delimiters to use.\n  grunt.util._.templateSettings = delimiters.lodash;\n  // Return the delimiters.\n  return delimiters;\n};\n\n// Process template + data with Lo-Dash.\ntemplate.process = function(tmpl, options) {\n  if (!options) { options = {}; }\n  // Set delimiters, and get a opening match character.\n  var delimiters = template.setDelimiters(options.delimiters);\n  // Clone data, initializing to config data or empty object if omitted.\n  var data = Object.create(options.data || grunt.config.data || {});\n  // Expose grunt so that grunt utilities can be accessed, but only if it\n  // doesn't conflict with an existing .grunt property.\n  if (!('grunt' in data)) { data.grunt = grunt; }\n  // Keep track of last change.\n  var last = tmpl;\n  try {\n    // As long as tmpl contains template tags, render it and get the result,\n    // otherwise just use the template string.\n    while (tmpl.indexOf(delimiters.opener) >= 0) {\n      tmpl = grunt.util._.template(tmpl, data);\n      // Abort if template didn't change - nothing left to process!\n      if (tmpl === last) { break; }\n      last = tmpl;\n    }\n  } catch (e) {\n    // In upgrading to Lo-Dash (or Underscore.js 1.3.3), \\n and \\r in template\n    // tags now causes an exception to be thrown. Warn the user why this is\n    // happening. https://github.com/documentcloud/underscore/issues/553\n    if (String(e) === 'SyntaxError: Unexpected token ILLEGAL' && /\\n|\\r/.test(tmpl)) {\n      grunt.log.errorlns('A special character was detected in this template. ' +\n        'Inside template tags, the \\\\n and \\\\r special characters must be ' +\n        'escaped as \\\\\\\\n and \\\\\\\\r. (grunt 0.4.0+)');\n    }\n    // Slightly better error message.\n    e.message = 'An error occurred while processing a template (' + e.message + ').';\n    grunt.warn(e, grunt.fail.code.TEMPLATE_ERROR);\n  }\n  // Normalize linefeeds and return.\n  return grunt.util.normalizelf(tmpl);\n};\n"]}