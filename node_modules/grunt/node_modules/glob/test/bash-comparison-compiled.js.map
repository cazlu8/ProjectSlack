{"version":3,"sources":["bash-comparison.js"],"names":[],"mappings":";;;;AAEA,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC;IACtB,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC;IACxC,WAAW,GAAG,OAAO,CAAC,qBAAqB,CAAC;IAC5C,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAChC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;IACrB,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;;;AAIxB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAA;;AAE5C,SAAS,SAAS,CAAE,CAAC,EAAE,CAAC,EAAE;AACxB,GAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;AACnB,GAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;AACnB,SAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;CAClC;;AAED,KAAK,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AAC/B,MAAI,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,CAAA;;AAEjC,MAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,IAC5B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACvB,WAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;GAC7B,CAAC,EACJ,OAAM;;AAER,KAAG,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;AAC7B,QAAI,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE;AACnC,UAAI,EAAE,EACJ,MAAM,EAAE,CAAA;;;AAGV,aAAO,GAAG,YAAY,CAAC,OAAO,CAAC,CAAA;;AAE/B,OAAC,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAA;AACrC,OAAC,CAAC,GAAG,EAAE,CAAA;KACR,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,KAAG,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,UAAU,CAAC,EAAE;AACvC,QAAI,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;;AAE9C,KAAC,CAAC,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAA;AAClD,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH,CAAC,CAAA;;AAEF,SAAS,YAAY,CAAE,CAAC,EAAE;;;AAGxB,SAAO,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AACxB,WAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;GACjD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE;AAC1C,QAAI,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAC1C,WAAO,GAAG,CAAA;GACX,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;;AAEtC,WAAO,AAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,GAAI,CAAC,GAChC,CAAC,CAAC,OAAO,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAA;GACtE,CAAC,CAAA;CACH","file":"bash-comparison-compiled.js","sourcesContent":["// basic test\n// show that it does the same thing by default as the shell.\nvar tap = require(\"tap\")\n, child_process = require(\"child_process\")\n, bashResults = require(\"./bash-results.json\")\n, globs = Object.keys(bashResults)\n, glob = require(\"../\")\n, path = require(\"path\")\n\n// run from the root of the project\n// this is usually where you're at anyway, but be sure.\nprocess.chdir(path.resolve(__dirname, \"..\"))\n\nfunction alphasort (a, b) {\n  a = a.toLowerCase()\n  b = b.toLowerCase()\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nglobs.forEach(function (pattern) {\n  var expect = bashResults[pattern]\n  // anything regarding the symlink thing will fail on windows, so just skip it\n  if (process.platform === \"win32\" &&\n      expect.some(function (m) {\n        return /\\/symlink\\//.test(m)\n      }))\n    return\n\n  tap.test(pattern, function (t) {\n    glob(pattern, function (er, matches) {\n      if (er)\n        throw er\n\n      // sort and unmark, just to match the shell results\n      matches = cleanResults(matches)\n\n      t.deepEqual(matches, expect, pattern)\n      t.end()\n    })\n  })\n\n  tap.test(pattern + \" sync\", function (t) {\n    var matches = cleanResults(glob.sync(pattern))\n\n    t.deepEqual(matches, expect, \"should match shell\")\n    t.end()\n  })\n})\n\nfunction cleanResults (m) {\n  // normalize discrepancies in ordering, duplication,\n  // and ending slashes.\n  return m.map(function (m) {\n    return m.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\")\n  }).sort(alphasort).reduce(function (set, f) {\n    if (f !== set[set.length - 1]) set.push(f)\n    return set\n  }, []).sort(alphasort).map(function (f) {\n    // de-windows\n    return (process.platform !== 'win32') ? f\n           : f.replace(/^[a-zA-Z]:[\\/\\\\]+/, '/').replace(/[\\\\\\/]+/g, '/')\n  })\n}\n"]}