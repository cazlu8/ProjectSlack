{"version":3,"sources":["pause-resume.js"],"names":[],"mappings":"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","file":"pause-resume-compiled.js","sourcesContent":["// show that no match events happen while paused.\nvar tap = require(\"tap\")\n, child_process = require(\"child_process\")\n// just some gnarly pattern with lots of matches\n, pattern = \"test/a/!(symlink)/**\"\n, bashResults = require(\"./bash-results.json\")\n, patterns = Object.keys(bashResults)\n, glob = require(\"../\")\n, Glob = glob.Glob\n, path = require(\"path\")\n\n// run from the root of the project\n// this is usually where you're at anyway, but be sure.\nprocess.chdir(path.resolve(__dirname, \"..\"))\n\nfunction alphasort (a, b) {\n  a = a.toLowerCase()\n  b = b.toLowerCase()\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nfunction cleanResults (m) {\n  // normalize discrepancies in ordering, duplication,\n  // and ending slashes.\n  return m.map(function (m) {\n    return m.replace(/\\/+/g, \"/\").replace(/\\/$/, \"\")\n  }).sort(alphasort).reduce(function (set, f) {\n    if (f !== set[set.length - 1]) set.push(f)\n    return set\n  }, []).sort(alphasort).map(function (f) {\n    // de-windows\n    return (process.platform !== 'win32') ? f\n           : f.replace(/^[a-zA-Z]:\\\\\\\\/, '/').replace(/\\\\/g, '/')\n  })\n}\n\nvar globResults = []\ntap.test(\"use a Glob object, and pause/resume it\", function (t) {\n  var g = new Glob(pattern)\n  , paused = false\n  , res = []\n  , expect = bashResults[pattern]\n\n  g.on(\"pause\", function () {\n    console.error(\"pause\")\n  })\n\n  g.on(\"resume\", function () {\n    console.error(\"resume\")\n  })\n\n  g.on(\"match\", function (m) {\n    t.notOk(g.paused, \"must not be paused\")\n    globResults.push(m)\n    g.pause()\n    t.ok(g.paused, \"must be paused\")\n    setTimeout(g.resume.bind(g), 10)\n  })\n\n  g.on(\"end\", function (matches) {\n    t.pass(\"reached glob end\")\n    globResults = cleanResults(globResults)\n    matches = cleanResults(matches)\n    t.deepEqual(matches, globResults,\n      \"end event matches should be the same as match events\")\n\n    t.deepEqual(matches, expect,\n      \"glob matches should be the same as bash results\")\n\n    t.end()\n  })\n})\n\n"]}