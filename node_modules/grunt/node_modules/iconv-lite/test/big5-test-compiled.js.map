{"version":3,"sources":["big5-test.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAM,OAAO,CAAC,MAAM,CAAC;IACzB,EAAE,GAAQ,OAAO,CAAC,IAAI,CAAC;IACvB,MAAM,GAAI,OAAO,CAAC,QAAQ,CAAC;IAC3B,KAAK,GAAK,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;;AAE1C,IAAI,UAAU,GAAG,OAAO;;AACpB,oBAAoB,GAAG,IAAI,MAAM,CAAC,CAAC,GAAI,EAAC,GAAI,EAAC,GAAI,EAAC,GAAI,EAAC,EAAI,EAAC,EAAI,EAAC,EAAI,CAAC,CAAC;IACvE,WAAW,GAAG,IAAI;IAClB,qBAAqB,GAAG,IAAI,MAAM,CAAC,CAAC,GAAI,EAAE,GAAI,EAAE,GAAI,EAAE,GAAI,CAAC,CAAC,CAAC;;AAEjE,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC;AACjC,oCAAgC,EAAE,uCAAW;AACzC,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACrH,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,oBAAoB,EAAE,MAAM,CAAC,EAAE,UAAU,CAAC,CAAC;AACjF,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvH,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,qBAAqB,EAAE,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;KACtF;AACD,qCAAiC,EAAE,wCAAW;AAC1C,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtH,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,oBAAoB,EAAE,OAAO,CAAC,EAAE,UAAU,CAAC,CAAC;KACrF;AACD,sDAAkD,EAAE,qDAAW;AAC3D,YAAI,aAAa,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAC,eAAe,CAAC,CAAC;AAC/D,YAAI,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;AACpD,YAAI,MAAM,GAAG,KAAK,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAA,CAAE,MAAM,EAAC,MAAM,CAAC,CAAC;AACzD,cAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;KACrE;AACD,2DAAuD,EAAE,uDAAW;;;AAGhE,YAAI,KAAK,GAAG,IAAI,CAAC;AACjB,YAAI,SAAS,GAAG,IAAI,MAAM,CAAC,CAAC,GAAI,EAAE,EAAI,EAAE,GAAI,EAAE,GAAI,CAAC,CAAC,CAAC;AACrD,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACrG,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,CAAA;KACnE,EACJ,CAAC,UAAO,CAAC,MAAM,CAAC,CAAA","file":"big5-test-compiled.js","sourcesContent":["var vows    = require('vows'),\n    fs      = require('fs'),\n    assert  = require('assert'),\n    iconv   = require(__dirname + '/../');\n\nvar testString = \"中文abc\", //unicode contains Big5-code and ascii\n    testStringBig5Buffer = new Buffer([0xa4,0xa4,0xa4,0xe5,0x61,0x62,0x63]),\n    testString2 = '測試',\n    testStringBig5Buffer2 = new Buffer([0xb4, 0xfa, 0xb8, 0xd5]);\n\nvows.describe(\"Big5 tests\").addBatch({\n    \"Big5 correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testString, \"big5\").toString('binary'), testStringBig5Buffer.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer, \"big5\"), testString);\n        assert.strictEqual(iconv.toEncoding(testString2, 'big5').toString('binary'), testStringBig5Buffer2.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer2, 'big5'), testString2);\n    },\n    \"cp950 correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testString, \"cp950\").toString('binary'), testStringBig5Buffer.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer, \"cp950\"), testString);\n    },\n    \"Big5 file read decoded,compare with iconv result\": function() {\n        var contentBuffer = fs.readFileSync(__dirname+\"/big5File.txt\");\n        var str = iconv.fromEncoding(contentBuffer, \"big5\");\n        var iconvc = new (require('iconv').Iconv)('big5','utf8');\n        assert.strictEqual(iconvc.convert(contentBuffer).toString(), str);\n    },\n    \"Big5 correctly decodes and encodes characters · and ×\": function() {\n        // https://github.com/ashtuchkin/iconv-lite/issues/13\n        // Reference: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n        var chars = \"·×\";\n        var big5Chars = new Buffer([0xA1, 0x50, 0xA1, 0xD1]);\n        assert.strictEqual(iconv.toEncoding(chars, \"big5\").toString('binary'), big5Chars.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(big5Chars, \"big5\"), chars)\n    },\n}).export(module)\n"]}