{"version":3,"sources":["turkish-test.js"],"names":[],"mappings":"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","file":"turkish-test-compiled.js","sourcesContent":["var vows = require('vows'),\n    assert = require('assert'),\n    iconv = require(__dirname+'/../');\n\nvar ascii = '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f'+\n           ' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f';\n\nvar encodings = [{\n    name: \"windows1254\",\n    variations: ['windows-1254', 'win-1254', 'win1254', 'cp1254', 'cp-1254', 1254],\n    strings: {\n        empty: \"\",\n        ascii: ascii,\n        turkish: \"€‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ¡¢£¤¥¦§¨©ª«¬®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\",\n        untranslatable: \"\\x81\\x8d\\x8e\\x8f\\x90\\x9d\\x9e\"\n    },\n    encodedStrings: {\n        empty: new Buffer(''),\n        ascii: new Buffer(ascii, 'binary'),\n        turkish: new Buffer(\n            '\\x80\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c' +\n            '\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9f' +\n            '\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xae\\xaf' +\n            '\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf' +\n            '\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf' +\n            '\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf' +\n            '\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef' +\n            '\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff',\n            'binary'),\n    }\n}, {\n    name: \"iso88599\",\n    variations: ['iso-8859-9', 'turkish', 'turkish8', 'cp28599', 'cp-28599', 28599],\n    strings: {\n        empty: \"\",\n        ascii: ascii,\n        turkish: \"\\xa0¡¢£¤¥¦§¨©ª«¬\\xad®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\",\n        untranslatable: ''\n    },\n    encodedStrings: {\n        empty: new Buffer(''),\n        ascii: new Buffer(ascii, 'binary'),\n        turkish: new Buffer(\n            '\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf' +\n            '\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf' +\n            '\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf' +\n            '\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf' +\n            '\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef' +\n            '\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff',\n             'binary')\n    }\n}];\n\nvar testsBatch = {};\nencodings.forEach(function(encoding) {\n    var enc = encoding.variations[0];\n    var key = \"turkish\";\n    var tests = {\n        \"Convert to empty buffer\": function() {\n            assert.strictEqual(iconv.toEncoding(\"\", enc).toString('binary'), new Buffer('').toString('binary'));\n        },\n        \"Convert from empty buffer\": function() {\n            assert.strictEqual(iconv.fromEncoding(new Buffer(''), enc), \"\");\n        },\n        \"Convert from buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc),\n                    encoding.strings[key]);\n        },\n        \"Convert to buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.toEncoding(encoding.strings[key], enc).toString('binary'),\n                    encoding.encodedStrings[key].toString('binary'));\n        },\n        \"Try different variations of encoding\": function() {\n            encoding.variations.forEach(function(enc) {\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), encoding.strings[key]);\n                assert.strictEqual(iconv.toEncoding(encoding.strings[key], enc).toString('binary'), encoding.encodedStrings[key].toString('binary'));\n            });\n        },\n        \"Untranslatable chars are converted to defaultCharSingleByte\": function() {\n            var expected = encoding.strings.untranslatable.split('').map(function(c) {return iconv.defaultCharSingleByte; }).join('');\n            assert.strictEqual(iconv.toEncoding(encoding.strings.untranslatable, enc).toString('binary'), expected); // Only '?' characters.\n        }\n    };\n\n    testsBatch[encoding.name+\":\"] = tests;\n});\n\nvows.describe(\"Test Turkish encodings\").addBatch(testsBatch).export(module);\n"]}