{"version":3,"sources":["main-test.js"],"names":[],"mappings":"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","file":"main-test-compiled.js","sourcesContent":["var vows = require('vows'),\n    assert = require('assert'),\n    iconv = require(__dirname+'/../');\n\nvar testString = \"Hello123!\";\nvar testStringLatin1 = \"Hello123!£Å÷×çþÿ¿®\";\nvar testStringBase64 = \"SGVsbG8xMjMh\";\n\nvows.describe(\"Generic UTF8-UCS2 tests\").addBatch({\n    \"Vows is working\": function() {},\n    \"Return values are of correct types\": function() {\n        assert.ok(iconv.toEncoding(testString, \"utf8\") instanceof Buffer);\n        \n        var s = iconv.fromEncoding(new Buffer(testString), \"utf8\");\n        assert.strictEqual(Object.prototype.toString.call(s), \"[object String]\");\n    },\n    \"Internal encodings all correctly encoded/decoded\": function() {\n        ['utf8', \"UTF-8\", \"UCS2\", \"binary\", \"\"].forEach(function(enc) {\n            assert.strictEqual(iconv.toEncoding(testStringLatin1, enc).toString(enc), testStringLatin1);\n            assert.strictEqual(iconv.fromEncoding(new Buffer(testStringLatin1, enc), enc), testStringLatin1);\n        });\n    },\n    \"Base64 correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testStringBase64, \"base64\").toString(\"binary\"), testString);\n        assert.strictEqual(iconv.fromEncoding(new Buffer(testString, \"binary\"), \"base64\"), testStringBase64);\n    },\n    \"Latin1 correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testStringLatin1, \"latin1\").toString(\"binary\"), testStringLatin1);\n        assert.strictEqual(iconv.fromEncoding(new Buffer(testStringLatin1, \"binary\"), \"latin1\"), testStringLatin1);\n    },\n    \"Convert from string, not buffer (binary encoding used)\": function() {\n        assert.strictEqual(iconv.fromEncoding(testStringLatin1, \"binary\"), testStringLatin1);\n    },\n    \"Convert to string, not buffer (utf8 used)\": function() {\n        var res = iconv.toEncoding(new Buffer(testStringLatin1, \"utf8\"));\n        assert.ok(res instanceof Buffer);\n        assert.strictEqual(res.toString(\"utf8\"), testStringLatin1);\n    },\n    \"Throws on unknown encodings\": function() {\n        assert.throws(function() { iconv.toEncoding(\"a\", \"xxx\"); });\n        assert.throws(function() { iconv.fromEncoding(\"a\", \"xxx\"); });\n    },\n    \"Convert non-strings and non-buffers\": function() {\n        assert.strictEqual(iconv.toEncoding({}, \"utf8\").toString(), \"[object Object]\");\n        assert.strictEqual(iconv.toEncoding(10, \"utf8\").toString(), \"10\");\n        assert.strictEqual(iconv.toEncoding(undefined, \"utf8\").toString(), \"\");\n        assert.strictEqual(iconv.fromEncoding({}, \"utf8\"), \"[object Object]\");\n        assert.strictEqual(iconv.fromEncoding(10, \"utf8\"), \"10\");\n        assert.strictEqual(iconv.fromEncoding(undefined, \"utf8\"), \"\");\n    },\n    \"Aliases encode and decode work the same as toEncoding and fromEncoding\": function() {\n        assert.strictEqual(iconv.toEncoding(testString, \"latin1\").toString(\"binary\"), iconv.encode(testString, \"latin1\").toString(\"binary\"));\n        assert.strictEqual(iconv.fromEncoding(testStringLatin1, \"latin1\"), iconv.decode(testStringLatin1, \"latin1\"));\n    },\n}).export(module)\n"]}