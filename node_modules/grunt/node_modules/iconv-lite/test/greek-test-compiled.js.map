{"version":3,"sources":["greek-test.js"],"names":[],"mappings":"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","file":"greek-test-compiled.js","sourcesContent":["var vows = require('vows'),\n    assert = require('assert'),\n    iconv = require(__dirname+'/../');\n\nvar baseStrings = {\n    empty: \"\",\n    hi: \"Γειά!\",\n    ascii: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f'+\n           ' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f',\n    greek: \"αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩάέήίόύώΆΈΉΊΌΎΏϊϋΪΫ\",\n    untranslatable: \"Åçþÿ¿\"\n};\n\nvar encodings = [{\n    name: \"windows1253\",\n    variations: ['windows-1253', 'win-1253', 'win1253', 'cp1253', 'cp-1253', 1253],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\xc3\\xe5\\xe9\\xdc!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        greek: new Buffer('\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xdc\\xdd\\xde\\xdf\\xfc\\xfd\\xfe\\xa2\\xb8\\xb9\\xba\\xbc\\xbe\\xbf\\xfa\\xfb\\xda\\xdb', 'binary'),\n    }\n}, {\n    name: \"iso88597\",\n    variations: ['iso-8859-7', 'greek', 'greek8', 'cp28597', 'cp-28597', 28597],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\xc3\\xe5\\xe9\\xdc!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        greek: new Buffer('\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xdc\\xdd\\xde\\xdf\\xfc\\xfd\\xfe\\xb6\\xb8\\xb9\\xba\\xbc\\xbe\\xbf\\xfa\\xfb\\xda\\xdb', 'binary'),\n    }\n}, {\n    name: \"cp737\",\n    variations: ['cp-737', 737],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\x82\\x9c\\xa0\\xe1!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        greek: new Buffer('\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xab\\xac\\xad\\xae\\xaf\\xe0\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\xe1\\xe2\\xe3\\xe5\\xe6\\xe7\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xe4\\xe8\\xf4\\xf5', 'binary'),\n    }\n}];\n\nvar testsBatch = {};\nencodings.forEach(function(encoding) {\n    var enc = encoding.variations[0];\n    var key = \"hi\";\n    var tests = {\n        \"Convert to empty buffer\": function() {\n            assert.strictEqual(iconv.toEncoding(\"\", enc).toString('binary'), new Buffer('').toString('binary'));\n        },\n        \"Convert from empty buffer\": function() {\n            assert.strictEqual(iconv.fromEncoding(new Buffer(''), enc), \"\");\n        },\n        \"Convert from buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), \n                    baseStrings[key]);\n        },\n        \"Convert to buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), \n                    encoding.encodedStrings[key].toString('binary'));\n        },\n        \"Try different variations of encoding\": function() {\n            encoding.variations.forEach(function(enc) {\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), baseStrings[key]);\n                assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), encoding.encodedStrings[key].toString('binary'));\n            });\n        },\n        \"Untranslatable chars are converted to defaultCharSingleByte\": function() {\n            var expected = baseStrings.untranslatable.split('').map(function(c) {return iconv.defaultCharSingleByte; }).join('');\n            assert.strictEqual(iconv.toEncoding(baseStrings.untranslatable, enc).toString('binary'), expected); // Only '?' characters.\n        }\n    };\n    \n    testsBatch[encoding.name+\":\"] = tests;\n});\n\nvows.describe(\"Test Greek encodings\").addBatch(testsBatch).export(module);\n"]}