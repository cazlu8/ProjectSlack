{"version":3,"sources":["gbk-test.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAM,OAAO,CAAC,MAAM,CAAC;IACzB,EAAE,GAAQ,OAAO,CAAC,IAAI,CAAC;IACvB,MAAM,GAAI,OAAO,CAAC,QAAQ,CAAC;IAC3B,KAAK,GAAK,OAAO,CAAC,SAAS,GAAC,MAAM,CAAC,CAAC;;AAExC,IAAI,UAAU,GAAG,OAAO;;AACpB,mBAAmB,GAAG,IAAI,MAAM,CAAC,CAAC,GAAI,EAAC,GAAI,EAAC,GAAI,EAAC,GAAI,EAAC,EAAI,EAAC,EAAI,EAAC,EAAI,CAAC,CAAC,CAAC;;AAE3E,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC;AAChC,qBAAiB,EAAE,yBAAW,EAAE;AAChC,wCAAoC,EAAE,yCAAW;AAC7C,cAAM,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,YAAY,MAAM,CAAC,CAAC;AAClE,YAAI,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;AAC3D,cAAM,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;KAC5E;AACD,mCAA+B,EAAE,sCAAW;AACxC,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnH,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC;KAClF;AACD,sCAAkC,EAAE,yCAAW;AAC3C,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtH,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,mBAAmB,EAAE,QAAQ,CAAC,EAAE,UAAU,CAAC,CAAC;KACrF;AACD,qDAAiD,EAAE,oDAAW;AAC1D,YAAI,aAAa,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAC,cAAc,CAAC,CAAC;AAC9D,YAAI,GAAG,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AACnD,YAAI,MAAM,GAAG,KAAK,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,CAAA,CAAE,KAAK,EAAC,MAAM,CAAC,CAAC;AACxD,cAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;KACrE;AACD,0DAAsD,EAAE,sDAAW;;;AAG/D,YAAI,KAAK,GAAG,IAAI,CAAC;AACjB,YAAI,QAAQ,GAAG,IAAI,MAAM,CAAC,CAAC,GAAI,EAAE,GAAI,EAAE,GAAI,EAAE,GAAI,CAAC,CAAC,CAAC;AACpD,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;AACnG,cAAM,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAA;KACjE,EACJ,CAAC,UAAO,CAAC,MAAM,CAAC,CAAA","file":"gbk-test-compiled.js","sourcesContent":["var vows    = require('vows'),\n    fs      = require('fs'),\n    assert  = require('assert'),\n    iconv   = require(__dirname+'/../');\n\nvar testString = \"中国abc\",//unicode contains GBK-code and ascii\n    testStringGBKBuffer = new Buffer([0xd6,0xd0,0xb9,0xfa,0x61,0x62,0x63]);\n\nvows.describe(\"GBK tests\").addBatch({\n    \"Vows is working\": function() {},\n    \"Return values are of correct types\": function() {\n        assert.ok(iconv.toEncoding(testString, \"utf8\") instanceof Buffer);        \n        var s = iconv.fromEncoding(new Buffer(testString), \"utf8\");\n        assert.strictEqual(Object.prototype.toString.call(s), \"[object String]\");\n    },\n    \"GBK correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testString, \"GBK\").toString('binary'), testStringGBKBuffer.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer, \"GBK\"), testString);\n    },\n    \"GB2312 correctly encoded/decoded\": function() {    \n        assert.strictEqual(iconv.toEncoding(testString, \"GB2312\").toString('binary'), testStringGBKBuffer.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(testStringGBKBuffer, \"GB2312\"), testString);\n    },\n    \"GBK file read decoded,compare with iconv result\": function() {\n        var contentBuffer = fs.readFileSync(__dirname+\"/gbkFile.txt\");\n        var str = iconv.fromEncoding(contentBuffer, \"GBK\");\n        var iconvc = new (require('iconv').Iconv)('GBK','utf8');\n        assert.strictEqual(iconvc.convert(contentBuffer).toString(), str);\n    },\n    \"GBK correctly decodes and encodes characters · and ×\": function() {\n        // https://github.com/ashtuchkin/iconv-lite/issues/13\n        // Reference: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP936.TXT\n        var chars = \"·×\";\n        var gbkChars = new Buffer([0xA1, 0xA4, 0xA1, 0xC1]);\n        assert.strictEqual(iconv.toEncoding(chars, \"GBK\").toString('binary'), gbkChars.toString('binary'));\n        assert.strictEqual(iconv.fromEncoding(gbkChars, \"GBK\"), chars)\n    },\n}).export(module)\n"]}