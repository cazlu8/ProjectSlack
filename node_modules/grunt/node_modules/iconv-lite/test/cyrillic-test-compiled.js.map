{"version":3,"sources":["cyrillic-test.js"],"names":[],"mappings":"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","file":"cyrillic-test-compiled.js","sourcesContent":["var vows = require('vows'),\n    assert = require('assert'),\n    iconv = require(__dirname+'/../');\n\nvar baseStrings = {\n    empty: \"\",\n    hi: \"Привет!\",\n    ascii: '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f'+\n           ' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\x7f',\n    rus: \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\",\n    additional1: \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬\\xAD®Ї°±Ііґµ¶·ё№є»јЅѕї\",\n    additional2: \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©\",\n    additional3: \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏ№ёђѓєѕіїјљњћќ§ўџ\",\n    untranslatable: \"£Åçþÿ¿\",\n};\n\nvar encodings = [{\n    name: \"Win-1251\",\n    variations: ['win1251', 'Windows-1251', 'windows1251', 'CP1251', 1251],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\xcf\\xf0\\xe8\\xe2\\xe5\\xf2!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        rus: new Buffer('\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff', 'binary'),\n        additional1: new Buffer('\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf','binary'),\n    }\n}, {\n    name: \"Koi8-R\",\n    variations: ['koi8r', 'KOI8-R', 'cp20866', 20866],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\xf0\\xd2\\xc9\\xd7\\xc5\\xd4!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        rus: new Buffer('\\xe1\\xe2\\xf7\\xe7\\xe4\\xe5\\xf6\\xfa\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf2\\xf3\\xf4\\xf5\\xe6\\xe8\\xe3\\xfe\\xfb\\xfd\\xff\\xf9\\xf8\\xfc\\xe0\\xf1\\xc1\\xc2\\xd7\\xc7\\xc4\\xc5\\xd6\\xda\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd2\\xd3\\xd4\\xd5\\xc6\\xc8\\xc3\\xde\\xdb\\xdd\\xdf\\xd9\\xd8\\xdc\\xc0\\xd1', 'binary'),\n        additional2: new Buffer('\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf', 'binary'),\n    }\n}, {\n    name: \"ISO 8859-5\",\n    variations: ['iso88595', 'ISO-8859-5', 'ISO 8859-5', 'cp28595', 28595],\n    encodedStrings: {\n        empty: new Buffer(''),\n        hi: new Buffer('\\xbf\\xe0\\xd8\\xd2\\xd5\\xe2!', 'binary'),\n        ascii: new Buffer(baseStrings.ascii, 'binary'),\n        rus: new Buffer('\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef', 'binary'),\n        additional3: new Buffer('\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff', 'binary'),\n    }\n}];\n\nvar testsBatch = {};\nencodings.forEach(function(encoding) {\n    var enc = encoding.variations[0];\n    var key = \"hi\";\n    var tests = {\n        \"Convert to empty buffer\": function() {\n            assert.strictEqual(iconv.toEncoding(\"\", enc).toString('binary'), new Buffer('').toString('binary'));\n        },\n        \"Convert from empty buffer\": function() {\n            assert.strictEqual(iconv.fromEncoding(new Buffer(''), enc), \"\");\n        },\n        \"Convert from buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), \n                    baseStrings[key]);\n        },\n        \"Convert to buffer\": function() {\n            for (var key in encoding.encodedStrings)\n                assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), \n                    encoding.encodedStrings[key].toString('binary'));\n        },\n        \"Try different variations of encoding\": function() {\n            encoding.variations.forEach(function(enc) {\n                assert.strictEqual(iconv.fromEncoding(encoding.encodedStrings[key], enc), baseStrings[key]);\n                assert.strictEqual(iconv.toEncoding(baseStrings[key], enc).toString('binary'), encoding.encodedStrings[key].toString('binary'));\n            });\n        },\n        \"Untranslatable chars are converted to defaultCharSingleByte\": function() {\n            var expected = baseStrings.untranslatable.split('').map(function(c) {return iconv.defaultCharSingleByte; }).join('');\n            assert.strictEqual(iconv.toEncoding(baseStrings.untranslatable, enc).toString('binary'), expected); // Only '?' characters.\n        }\n    };\n    \n    testsBatch[encoding.name+\":\"] = tests;\n});\n\nvows.describe(\"Test Cyrillic encodings\").addBatch(testsBatch).export(module);\n\n"]}