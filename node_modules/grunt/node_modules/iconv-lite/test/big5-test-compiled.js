'use strict';

var vows = require('vows'),
    fs = require('fs'),
    assert = require('assert'),
    iconv = require(__dirname + '/../');

var testString = '中文abc',
    //unicode contains Big5-code and ascii
testStringBig5Buffer = new Buffer([164, 164, 164, 229, 97, 98, 99]),
    testString2 = '測試',
    testStringBig5Buffer2 = new Buffer([180, 250, 184, 213]);

vows.describe('Big5 tests').addBatch({
    'Big5 correctly encoded/decoded': function Big5CorrectlyEncodedDecoded() {
        assert.strictEqual(iconv.toEncoding(testString, 'big5').toString('binary'), testStringBig5Buffer.toString('binary'));
        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer, 'big5'), testString);
        assert.strictEqual(iconv.toEncoding(testString2, 'big5').toString('binary'), testStringBig5Buffer2.toString('binary'));
        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer2, 'big5'), testString2);
    },
    'cp950 correctly encoded/decoded': function cp950CorrectlyEncodedDecoded() {
        assert.strictEqual(iconv.toEncoding(testString, 'cp950').toString('binary'), testStringBig5Buffer.toString('binary'));
        assert.strictEqual(iconv.fromEncoding(testStringBig5Buffer, 'cp950'), testString);
    },
    'Big5 file read decoded,compare with iconv result': function Big5FileReadDecodedCompareWithIconvResult() {
        var contentBuffer = fs.readFileSync(__dirname + '/big5File.txt');
        var str = iconv.fromEncoding(contentBuffer, 'big5');
        var iconvc = new (require('iconv').Iconv)('big5', 'utf8');
        assert.strictEqual(iconvc.convert(contentBuffer).toString(), str);
    },
    'Big5 correctly decodes and encodes characters · and ×': function Big5CorrectlyDecodesAndEncodesCharactersAnd() {
        // https://github.com/ashtuchkin/iconv-lite/issues/13
        // Reference: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
        var chars = '·×';
        var big5Chars = new Buffer([161, 80, 161, 209]);
        assert.strictEqual(iconv.toEncoding(chars, 'big5').toString('binary'), big5Chars.toString('binary'));
        assert.strictEqual(iconv.fromEncoding(big5Chars, 'big5'), chars);
    } })['export'](module);

//# sourceMappingURL=big5-test-compiled.js.map