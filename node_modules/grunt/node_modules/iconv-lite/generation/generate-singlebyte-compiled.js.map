{"version":3,"sources":["generate-singlebyte.js"],"names":[],"mappings":"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","file":"generate-singlebyte-compiled.js","sourcesContent":["var fs  = require(\"fs\");\nvar Iconv  = require(\"iconv\").Iconv;\n\n\nvar encodingFamilies = [\n    {\n        // Windows code pages\n        encodings: [1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258],\n        convert: function(cp) {\n            return {\n                name: \"windows-\"+cp,\n                aliases: [\"win\"+cp, \"cp\"+cp, \"\"+cp],\n            }\n        }\n    },\n    {\n        // ISO-8859 code pages\n        encodings: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16],\n        convert: function(i) {\n            return {\n                name: \"iso-8859-\"+i,\n                aliases: [\"cp\"+(28590+i), (28590+i)],\n            }\n        }\n    },\n    {\n        // IBM/DOS code pages\n        encodings: [437, 737, 775, 850, 852, 855, 857, 858, 860, 861, 862, 863, 864, 865, 866, 869],\n        convert: function(cp) {\n            return {\n                name: \"CP\"+cp,\n                aliases: [\"ibm\"+cp, \"\"+cp],\n            }\n        }\n    },\n    {\n        // Macintosh code pages\n        encodings: [\"macCroatian\", \"macCyrillic\", \"macGreek\", \n                    \"macIceland\", \"macRoman\", \"macRomania\", \n                    \"macThai\", \"macTurkish\", \"macUkraine\"],\n    },\n    {\n        // KOI8 code pages\n        encodings: [\"KOI8-R\", \"KOI8-U\"],\n    },\n];\n\n\nvar encodings = {\n    // Aliases.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"cp819\": \"iso88951\",\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n    \"tis620\": \"iso885911\",\n    \"windows874\": \"iso885911\",\n    \"win874\": \"iso885911\",\n    \"cp874\": \"iso885911\",\n    \"874\": \"iso885911\",\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n    \n};\n\n// Add all encodings from encodingFamilies.\nencodingFamilies.forEach(function(family){\n    family.encodings.forEach(function(encoding){\n        if (family.convert)\n            encoding = family.convert(encoding);\n\n        var encodingIconvName = encoding.name ? encoding.name : encoding; \n        var encodingName = encodingIconvName.replace(/[-_]/g, \"\").toLowerCase();\n\n        encodings[encodingName] = {\n            type: \"singlebyte\",\n            chars: generateCharsString(encodingIconvName)\n        };\n\n        if (encoding.aliases)\n            encoding.aliases.forEach(function(alias){\n                encodings[alias] = encodingName;\n            });\n    });\n});\n\n// Write encodings.\nfs.writeFileSync(\"encodings/singlebyte.js\", \n    \"module.exports = \" + JSON.stringify(encodings, undefined, \"  \") + \";\");\n\n\nfunction generateCharsString(encoding) {\n    console.log(\"Generate encoding for \" + encoding);\n    var iconvToUtf8 = new Iconv(encoding, \"UTF-8\");\n    var chars = \"\";\n\n    for (var b = 0x80; b < 0x100; b++) {\n\n        try {\n            var convertedChar = iconvToUtf8.convert(new Buffer([b])).toString();\n            \n            if (convertedChar.length != 1)\n                throw new Error(\"Single-byte encoding error: Must return single char.\");\n        } catch (exception) {\n            if (exception.code === \"EILSEQ\") {\n                convertedChar = \"\\ufffd\";\n            } else {\n                throw exception;\n            }\n        }\n\n        chars += convertedChar;\n    }\n\n    return chars;\n}\n"]}