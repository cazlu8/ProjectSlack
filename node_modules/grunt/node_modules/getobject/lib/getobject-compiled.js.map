{"version":3,"sources":["getobject.js"],"names":[],"mappings":";;;;;;;;AAQA,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAG,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;;;;;AAKpC,SAAS,QAAQ,CAAC,GAAG,EAAE;AACrB,SAAO,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC,EAAE;AAC/D,WAAO,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;GAClC,CAAC,CAAC;CACJ;;;AAGD,SAAS,CAAC,GAAG,GAAG,UAAS,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE;AAC3C,MAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC7B,SAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;GACzB;;AAED,MAAI,IAAI,CAAC;AACT,SAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE;AACrD,QAAI,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;AACrB,QAAI,EAAE,IAAI,IAAI,GAAG,CAAA,AAAC,IAAI,MAAM,EAAE;AAC5B,SAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;KAChB;AACD,OAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;GACjB;;AAED,SAAO,GAAG,CAAC;CACZ,CAAC;;;;AAIF,SAAS,CAAC,GAAG,GAAG,UAAS,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE;AAC1C,OAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAExB,MAAI,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AACvB,KAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AACtC,MAAI,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAClC,WAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAE;GAC5B;CACF,CAAC;;;AAGF,SAAS,CAAC,MAAM,GAAG,UAAS,GAAG,EAAE,KAAK,EAAE;AACtC,OAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAExB,MAAI,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AACvB,KAAG,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;;AAEhC,SAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC;CACtD,CAAC","file":"getobject-compiled.js","sourcesContent":["/*\n * getobject\n * https://github.com/cowboy/node-getobject\n *\n * Copyright (c) 2013 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar getobject = module.exports = {};\n\n// Split strings on dot, but only if dot isn't preceded by a backslash. Since\n// JavaScript doesn't support lookbehinds, use a placeholder for \"\\.\", split\n// on dot, then replace the placeholder character with a dot.\nfunction getParts(str) {\n  return str.replace(/\\\\\\./g, '\\uffff').split('.').map(function(s) {\n    return s.replace(/\\uffff/g, '.');\n  });\n}\n\n// Get the value of a deeply-nested property exist in an object.\ngetobject.get = function(obj, parts, create) {\n  if (typeof parts === 'string') {\n    parts = getParts(parts);\n  }\n\n  var part;\n  while (typeof obj === 'object' && obj && parts.length) {\n    part = parts.shift();\n    if (!(part in obj) && create) {\n      obj[part] = {};\n    }\n    obj = obj[part];\n  }\n\n  return obj;\n};\n\n// Set a deeply-nested property in an object, creating intermediary objects\n// as we go.\ngetobject.set = function(obj, parts, value) {\n  parts = getParts(parts);\n\n  var prop = parts.pop();\n  obj = getobject.get(obj, parts, true);\n  if (obj && typeof obj === 'object') {\n    return (obj[prop] = value);\n  }\n};\n\n// Does a deeply-nested property exist in an object?\ngetobject.exists = function(obj, parts) {\n  parts = getParts(parts);\n\n  var prop = parts.pop();\n  obj = getobject.get(obj, parts);\n\n  return typeof obj === 'object' && obj && prop in obj;\n};\n"]}