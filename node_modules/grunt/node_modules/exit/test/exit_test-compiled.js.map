{"version":3,"sources":["exit_test.js"],"names":[],"mappings":"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","file":"exit_test-compiled.js","sourcesContent":["'use strict';\n\n/*\n  ======== A Handy Little Nodeunit Reference ========\n  https://github.com/caolan/nodeunit\n\n  Test methods:\n    test.expect(numAssertions)\n    test.done()\n  Test assertions:\n    test.ok(value, [message])\n    test.equal(actual, expected, [message])\n    test.notEqual(actual, expected, [message])\n    test.deepEqual(actual, expected, [message])\n    test.notDeepEqual(actual, expected, [message])\n    test.strictEqual(actual, expected, [message])\n    test.notStrictEqual(actual, expected, [message])\n    test.throws(block, [error], [message])\n    test.doesNotThrow(block, [error], [message])\n    test.ifError(value)\n*/\n\nvar fs = require('fs');\nvar exec = require('child_process').exec;\n\nvar _which = require('which').sync;\nfunction which(command) {\n  try {\n    _which(command);\n    return command;\n  } catch (err) {\n    return false;\n  }\n}\n\n// Look for grep first (any OS). If not found (but on Windows) look for find,\n// which is Windows' horribly crippled grep alternative.\nvar grep = which('grep') || process.platform === 'win32' && which('find');\n\nexports['exit'] = {\n  setUp: function(done) {\n    this.origCwd = process.cwd();\n    process.chdir('test/fixtures');\n    done();\n  },\n  tearDown: function(done) {\n    process.chdir(this.origCwd);\n    done();\n  },\n  'grep': function(test) {\n    test.expect(1);\n    // Many unit tests depend on this.\n    test.ok(grep, 'A suitable \"grep\" or \"find\" program was not found in the PATH.');\n    test.done();\n  },\n  // The rest of the tests are built dynamically, to keep things sane.\n};\n\n// A few helper functions.\nfunction normalizeLineEndings(s) {\n  return s.replace(/\\r?\\n/g, '\\n');\n}\n\n// Capture command output, normalizing captured stdout to unix file endings.\nfunction run(command, callback) {\n  exec(command, function(error, stdout) {\n    callback(error ? error.code : 0, normalizeLineEndings(stdout));\n  });\n}\n\n// Read a fixture file, normalizing file contents to unix file endings.\nfunction fixture(filename) {\n  return normalizeLineEndings(String(fs.readFileSync(filename)));\n}\n\nfunction buildTests() {\n  // Build individual unit tests for command output.\n  var counts = [10, 100, 1000];\n  var outputs = [' stdout stderr', ' stdout', ' stderr'];\n  var pipes = ['', ' | ' + grep + ' \"std\"'];\n  counts.forEach(function(count) {\n    outputs.forEach(function(output) {\n      pipes.forEach(function(pipe) {\n        var command = 'node log.js 0 ' + count + output + ' 2>&1' + pipe;\n        exports['exit']['output (' + command + ')'] = function(test) {\n          test.expect(2);\n          run(command, function(code, actual) {\n            var expected = fixture(count + output.replace(/ /g, '-') + '.txt');\n            // Sometimes, the actual file lines are out of order on Windows.\n            // But since the point of this lib is to drain the buffer and not\n            // guarantee output order, we only test the length.\n            test.equal(actual.length, expected.length, 'should be the same length.');\n            // The \"fail\" lines in log.js should NOT be output!\n            test.ok(actual.indexOf('fail') === -1, 'should not output after exit is called.');\n            test.done();\n          });\n        };\n      });\n    });\n  });\n\n  // Build individual unit tests for exit codes.\n  var codes = [0, 1, 123];\n  codes.forEach(function(code) {\n    var command = 'node log.js ' + code + ' 10 stdout stderr';\n    exports['exit']['exit code (' + command + ')'] = function(test) {\n      test.expect(1);\n      run(command, function(actual) {\n        // The specified exit code should be passed through.\n        test.equal(actual, code, 'should exit with ' + code + ' error code.');\n        test.done();\n      });\n    };\n  });\n}\n\n// Don't bother building tests if grep wasn't found, otherwise everything will\n// fail and the error will get lost.\nif (grep) {\n  buildTests();\n}\n"]}