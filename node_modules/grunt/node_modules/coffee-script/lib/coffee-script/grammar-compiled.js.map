{"version":3,"sources":["grammar.js"],"names":[],"mappings":"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","file":"grammar-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.3.3\n(function() {\n  var Parser, alt, alternatives, grammar, name, o, operators, token, tokens, unwrap;\n\n  Parser = require('jison').Parser;\n\n  unwrap = /^function\\s*\\(\\)\\s*\\{\\s*return\\s*([\\s\\S]*);\\s*\\}/;\n\n  o = function(patternString, action, options) {\n    var match;\n    patternString = patternString.replace(/\\s{2,}/g, ' ');\n    if (!action) {\n      return [patternString, '$$ = $1;', options];\n    }\n    action = (match = unwrap.exec(action)) ? match[1] : \"(\" + action + \"())\";\n    action = action.replace(/\\bnew /g, '$&yy.');\n    action = action.replace(/\\b(?:Block\\.wrap|extend)\\b/g, 'yy.$&');\n    return [patternString, \"$$ = \" + action + \";\", options];\n  };\n\n  grammar = {\n    Root: [\n      o('', function() {\n        return new Block;\n      }), o('Body'), o('Block TERMINATOR')\n    ],\n    Body: [\n      o('Line', function() {\n        return Block.wrap([$1]);\n      }), o('Body TERMINATOR Line', function() {\n        return $1.push($3);\n      }), o('Body TERMINATOR')\n    ],\n    Line: [o('Expression'), o('Statement')],\n    Statement: [\n      o('Return'), o('Comment'), o('STATEMENT', function() {\n        return new Literal($1);\n      })\n    ],\n    Expression: [o('Value'), o('Invocation'), o('Code'), o('Operation'), o('Assign'), o('If'), o('Try'), o('While'), o('For'), o('Switch'), o('Class'), o('Throw')],\n    Block: [\n      o('INDENT OUTDENT', function() {\n        return new Block;\n      }), o('INDENT Body OUTDENT', function() {\n        return $2;\n      })\n    ],\n    Identifier: [\n      o('IDENTIFIER', function() {\n        return new Literal($1);\n      })\n    ],\n    AlphaNumeric: [\n      o('NUMBER', function() {\n        return new Literal($1);\n      }), o('STRING', function() {\n        return new Literal($1);\n      })\n    ],\n    Literal: [\n      o('AlphaNumeric'), o('JS', function() {\n        return new Literal($1);\n      }), o('REGEX', function() {\n        return new Literal($1);\n      }), o('DEBUGGER', function() {\n        return new Literal($1);\n      }), o('UNDEFINED', function() {\n        return new Undefined;\n      }), o('NULL', function() {\n        return new Null;\n      }), o('BOOL', function() {\n        return new Bool($1);\n      })\n    ],\n    Assign: [\n      o('Assignable = Expression', function() {\n        return new Assign($1, $3);\n      }), o('Assignable = TERMINATOR Expression', function() {\n        return new Assign($1, $4);\n      }), o('Assignable = INDENT Expression OUTDENT', function() {\n        return new Assign($1, $4);\n      })\n    ],\n    AssignObj: [\n      o('ObjAssignable', function() {\n        return new Value($1);\n      }), o('ObjAssignable : Expression', function() {\n        return new Assign(new Value($1), $3, 'object');\n      }), o('ObjAssignable :\\\n       INDENT Expression OUTDENT', function() {\n        return new Assign(new Value($1), $4, 'object');\n      }), o('Comment')\n    ],\n    ObjAssignable: [o('Identifier'), o('AlphaNumeric'), o('ThisProperty')],\n    Return: [\n      o('RETURN Expression', function() {\n        return new Return($2);\n      }), o('RETURN', function() {\n        return new Return;\n      })\n    ],\n    Comment: [\n      o('HERECOMMENT', function() {\n        return new Comment($1);\n      })\n    ],\n    Code: [\n      o('PARAM_START ParamList PARAM_END FuncGlyph Block', function() {\n        return new Code($2, $5, $4);\n      }), o('FuncGlyph Block', function() {\n        return new Code([], $2, $1);\n      })\n    ],\n    FuncGlyph: [\n      o('->', function() {\n        return 'func';\n      }), o('=>', function() {\n        return 'boundfunc';\n      })\n    ],\n    OptComma: [o(''), o(',')],\n    ParamList: [\n      o('', function() {\n        return [];\n      }), o('Param', function() {\n        return [$1];\n      }), o('ParamList , Param', function() {\n        return $1.concat($3);\n      }), o('ParamList OptComma TERMINATOR Param', function() {\n        return $1.concat($4);\n      }), o('ParamList OptComma INDENT ParamList OptComma OUTDENT', function() {\n        return $1.concat($4);\n      })\n    ],\n    Param: [\n      o('ParamVar', function() {\n        return new Param($1);\n      }), o('ParamVar ...', function() {\n        return new Param($1, null, true);\n      }), o('ParamVar = Expression', function() {\n        return new Param($1, $3);\n      })\n    ],\n    ParamVar: [o('Identifier'), o('ThisProperty'), o('Array'), o('Object')],\n    Splat: [\n      o('Expression ...', function() {\n        return new Splat($1);\n      })\n    ],\n    SimpleAssignable: [\n      o('Identifier', function() {\n        return new Value($1);\n      }), o('Value Accessor', function() {\n        return $1.add($2);\n      }), o('Invocation Accessor', function() {\n        return new Value($1, [].concat($2));\n      }), o('ThisProperty')\n    ],\n    Assignable: [\n      o('SimpleAssignable'), o('Array', function() {\n        return new Value($1);\n      }), o('Object', function() {\n        return new Value($1);\n      })\n    ],\n    Value: [\n      o('Assignable'), o('Literal', function() {\n        return new Value($1);\n      }), o('Parenthetical', function() {\n        return new Value($1);\n      }), o('Range', function() {\n        return new Value($1);\n      }), o('This')\n    ],\n    Accessor: [\n      o('.  Identifier', function() {\n        return new Access($2);\n      }), o('?. Identifier', function() {\n        return new Access($2, 'soak');\n      }), o(':: Identifier', function() {\n        return [new Access(new Literal('prototype')), new Access($2)];\n      }), o('::', function() {\n        return new Access(new Literal('prototype'));\n      }), o('Index')\n    ],\n    Index: [\n      o('INDEX_START IndexValue INDEX_END', function() {\n        return $2;\n      }), o('INDEX_SOAK  Index', function() {\n        return extend($2, {\n          soak: true\n        });\n      })\n    ],\n    IndexValue: [\n      o('Expression', function() {\n        return new Index($1);\n      }), o('Slice', function() {\n        return new Slice($1);\n      })\n    ],\n    Object: [\n      o('{ AssignList OptComma }', function() {\n        return new Obj($2, $1.generated);\n      })\n    ],\n    AssignList: [\n      o('', function() {\n        return [];\n      }), o('AssignObj', function() {\n        return [$1];\n      }), o('AssignList , AssignObj', function() {\n        return $1.concat($3);\n      }), o('AssignList OptComma TERMINATOR AssignObj', function() {\n        return $1.concat($4);\n      }), o('AssignList OptComma INDENT AssignList OptComma OUTDENT', function() {\n        return $1.concat($4);\n      })\n    ],\n    Class: [\n      o('CLASS', function() {\n        return new Class;\n      }), o('CLASS Block', function() {\n        return new Class(null, null, $2);\n      }), o('CLASS EXTENDS Expression', function() {\n        return new Class(null, $3);\n      }), o('CLASS EXTENDS Expression Block', function() {\n        return new Class(null, $3, $4);\n      }), o('CLASS SimpleAssignable', function() {\n        return new Class($2);\n      }), o('CLASS SimpleAssignable Block', function() {\n        return new Class($2, null, $3);\n      }), o('CLASS SimpleAssignable EXTENDS Expression', function() {\n        return new Class($2, $4);\n      }), o('CLASS SimpleAssignable EXTENDS Expression Block', function() {\n        return new Class($2, $4, $5);\n      })\n    ],\n    Invocation: [\n      o('Value OptFuncExist Arguments', function() {\n        return new Call($1, $3, $2);\n      }), o('Invocation OptFuncExist Arguments', function() {\n        return new Call($1, $3, $2);\n      }), o('SUPER', function() {\n        return new Call('super', [new Splat(new Literal('arguments'))]);\n      }), o('SUPER Arguments', function() {\n        return new Call('super', $2);\n      })\n    ],\n    OptFuncExist: [\n      o('', function() {\n        return false;\n      }), o('FUNC_EXIST', function() {\n        return true;\n      })\n    ],\n    Arguments: [\n      o('CALL_START CALL_END', function() {\n        return [];\n      }), o('CALL_START ArgList OptComma CALL_END', function() {\n        return $2;\n      })\n    ],\n    This: [\n      o('THIS', function() {\n        return new Value(new Literal('this'));\n      }), o('@', function() {\n        return new Value(new Literal('this'));\n      })\n    ],\n    ThisProperty: [\n      o('@ Identifier', function() {\n        return new Value(new Literal('this'), [new Access($2)], 'this');\n      })\n    ],\n    Array: [\n      o('[ ]', function() {\n        return new Arr([]);\n      }), o('[ ArgList OptComma ]', function() {\n        return new Arr($2);\n      })\n    ],\n    RangeDots: [\n      o('..', function() {\n        return 'inclusive';\n      }), o('...', function() {\n        return 'exclusive';\n      })\n    ],\n    Range: [\n      o('[ Expression RangeDots Expression ]', function() {\n        return new Range($2, $4, $3);\n      })\n    ],\n    Slice: [\n      o('Expression RangeDots Expression', function() {\n        return new Range($1, $3, $2);\n      }), o('Expression RangeDots', function() {\n        return new Range($1, null, $2);\n      }), o('RangeDots Expression', function() {\n        return new Range(null, $2, $1);\n      }), o('RangeDots', function() {\n        return new Range(null, null, $1);\n      })\n    ],\n    ArgList: [\n      o('Arg', function() {\n        return [$1];\n      }), o('ArgList , Arg', function() {\n        return $1.concat($3);\n      }), o('ArgList OptComma TERMINATOR Arg', function() {\n        return $1.concat($4);\n      }), o('INDENT ArgList OptComma OUTDENT', function() {\n        return $2;\n      }), o('ArgList OptComma INDENT ArgList OptComma OUTDENT', function() {\n        return $1.concat($4);\n      })\n    ],\n    Arg: [o('Expression'), o('Splat')],\n    SimpleArgs: [\n      o('Expression'), o('SimpleArgs , Expression', function() {\n        return [].concat($1, $3);\n      })\n    ],\n    Try: [\n      o('TRY Block', function() {\n        return new Try($2);\n      }), o('TRY Block Catch', function() {\n        return new Try($2, $3[0], $3[1]);\n      }), o('TRY Block FINALLY Block', function() {\n        return new Try($2, null, null, $4);\n      }), o('TRY Block Catch FINALLY Block', function() {\n        return new Try($2, $3[0], $3[1], $5);\n      })\n    ],\n    Catch: [\n      o('CATCH Identifier Block', function() {\n        return [$2, $3];\n      })\n    ],\n    Throw: [\n      o('THROW Expression', function() {\n        return new Throw($2);\n      })\n    ],\n    Parenthetical: [\n      o('( Body )', function() {\n        return new Parens($2);\n      }), o('( INDENT Body OUTDENT )', function() {\n        return new Parens($3);\n      })\n    ],\n    WhileSource: [\n      o('WHILE Expression', function() {\n        return new While($2);\n      }), o('WHILE Expression WHEN Expression', function() {\n        return new While($2, {\n          guard: $4\n        });\n      }), o('UNTIL Expression', function() {\n        return new While($2, {\n          invert: true\n        });\n      }), o('UNTIL Expression WHEN Expression', function() {\n        return new While($2, {\n          invert: true,\n          guard: $4\n        });\n      })\n    ],\n    While: [\n      o('WhileSource Block', function() {\n        return $1.addBody($2);\n      }), o('Statement  WhileSource', function() {\n        return $2.addBody(Block.wrap([$1]));\n      }), o('Expression WhileSource', function() {\n        return $2.addBody(Block.wrap([$1]));\n      }), o('Loop', function() {\n        return $1;\n      })\n    ],\n    Loop: [\n      o('LOOP Block', function() {\n        return new While(new Literal('true')).addBody($2);\n      }), o('LOOP Expression', function() {\n        return new While(new Literal('true')).addBody(Block.wrap([$2]));\n      })\n    ],\n    For: [\n      o('Statement  ForBody', function() {\n        return new For($1, $2);\n      }), o('Expression ForBody', function() {\n        return new For($1, $2);\n      }), o('ForBody    Block', function() {\n        return new For($2, $1);\n      })\n    ],\n    ForBody: [\n      o('FOR Range', function() {\n        return {\n          source: new Value($2)\n        };\n      }), o('ForStart ForSource', function() {\n        $2.own = $1.own;\n        $2.name = $1[0];\n        $2.index = $1[1];\n        return $2;\n      })\n    ],\n    ForStart: [\n      o('FOR ForVariables', function() {\n        return $2;\n      }), o('FOR OWN ForVariables', function() {\n        $3.own = true;\n        return $3;\n      })\n    ],\n    ForValue: [\n      o('Identifier'), o('ThisProperty'), o('Array', function() {\n        return new Value($1);\n      }), o('Object', function() {\n        return new Value($1);\n      })\n    ],\n    ForVariables: [\n      o('ForValue', function() {\n        return [$1];\n      }), o('ForValue , ForValue', function() {\n        return [$1, $3];\n      })\n    ],\n    ForSource: [\n      o('FORIN Expression', function() {\n        return {\n          source: $2\n        };\n      }), o('FOROF Expression', function() {\n        return {\n          source: $2,\n          object: true\n        };\n      }), o('FORIN Expression WHEN Expression', function() {\n        return {\n          source: $2,\n          guard: $4\n        };\n      }), o('FOROF Expression WHEN Expression', function() {\n        return {\n          source: $2,\n          guard: $4,\n          object: true\n        };\n      }), o('FORIN Expression BY Expression', function() {\n        return {\n          source: $2,\n          step: $4\n        };\n      }), o('FORIN Expression WHEN Expression BY Expression', function() {\n        return {\n          source: $2,\n          guard: $4,\n          step: $6\n        };\n      }), o('FORIN Expression BY Expression WHEN Expression', function() {\n        return {\n          source: $2,\n          step: $4,\n          guard: $6\n        };\n      })\n    ],\n    Switch: [\n      o('SWITCH Expression INDENT Whens OUTDENT', function() {\n        return new Switch($2, $4);\n      }), o('SWITCH Expression INDENT Whens ELSE Block OUTDENT', function() {\n        return new Switch($2, $4, $6);\n      }), o('SWITCH INDENT Whens OUTDENT', function() {\n        return new Switch(null, $3);\n      }), o('SWITCH INDENT Whens ELSE Block OUTDENT', function() {\n        return new Switch(null, $3, $5);\n      })\n    ],\n    Whens: [\n      o('When'), o('Whens When', function() {\n        return $1.concat($2);\n      })\n    ],\n    When: [\n      o('LEADING_WHEN SimpleArgs Block', function() {\n        return [[$2, $3]];\n      }), o('LEADING_WHEN SimpleArgs Block TERMINATOR', function() {\n        return [[$2, $3]];\n      })\n    ],\n    IfBlock: [\n      o('IF Expression Block', function() {\n        return new If($2, $3, {\n          type: $1\n        });\n      }), o('IfBlock ELSE IF Expression Block', function() {\n        return $1.addElse(new If($4, $5, {\n          type: $3\n        }));\n      })\n    ],\n    If: [\n      o('IfBlock'), o('IfBlock ELSE Block', function() {\n        return $1.addElse($3);\n      }), o('Statement  POST_IF Expression', function() {\n        return new If($3, Block.wrap([$1]), {\n          type: $2,\n          statement: true\n        });\n      }), o('Expression POST_IF Expression', function() {\n        return new If($3, Block.wrap([$1]), {\n          type: $2,\n          statement: true\n        });\n      })\n    ],\n    Operation: [\n      o('UNARY Expression', function() {\n        return new Op($1, $2);\n      }), o('-     Expression', (function() {\n        return new Op('-', $2);\n      }), {\n        prec: 'UNARY'\n      }), o('+     Expression', (function() {\n        return new Op('+', $2);\n      }), {\n        prec: 'UNARY'\n      }), o('-- SimpleAssignable', function() {\n        return new Op('--', $2);\n      }), o('++ SimpleAssignable', function() {\n        return new Op('++', $2);\n      }), o('SimpleAssignable --', function() {\n        return new Op('--', $1, null, true);\n      }), o('SimpleAssignable ++', function() {\n        return new Op('++', $1, null, true);\n      }), o('Expression ?', function() {\n        return new Existence($1);\n      }), o('Expression +  Expression', function() {\n        return new Op('+', $1, $3);\n      }), o('Expression -  Expression', function() {\n        return new Op('-', $1, $3);\n      }), o('Expression MATH     Expression', function() {\n        return new Op($2, $1, $3);\n      }), o('Expression SHIFT    Expression', function() {\n        return new Op($2, $1, $3);\n      }), o('Expression COMPARE  Expression', function() {\n        return new Op($2, $1, $3);\n      }), o('Expression LOGIC    Expression', function() {\n        return new Op($2, $1, $3);\n      }), o('Expression RELATION Expression', function() {\n        if ($2.charAt(0) === '!') {\n          return new Op($2.slice(1), $1, $3).invert();\n        } else {\n          return new Op($2, $1, $3);\n        }\n      }), o('SimpleAssignable COMPOUND_ASSIGN\\\n       Expression', function() {\n        return new Assign($1, $3, $2);\n      }), o('SimpleAssignable COMPOUND_ASSIGN\\\n       INDENT Expression OUTDENT', function() {\n        return new Assign($1, $4, $2);\n      }), o('SimpleAssignable EXTENDS Expression', function() {\n        return new Extends($1, $3);\n      })\n    ]\n  };\n\n  operators = [['left', '.', '?.', '::'], ['left', 'CALL_START', 'CALL_END'], ['nonassoc', '++', '--'], ['left', '?'], ['right', 'UNARY'], ['left', 'MATH'], ['left', '+', '-'], ['left', 'SHIFT'], ['left', 'RELATION'], ['left', 'COMPARE'], ['left', 'LOGIC'], ['nonassoc', 'INDENT', 'OUTDENT'], ['right', '=', ':', 'COMPOUND_ASSIGN', 'RETURN', 'THROW', 'EXTENDS'], ['right', 'FORIN', 'FOROF', 'BY', 'WHEN'], ['right', 'IF', 'ELSE', 'FOR', 'WHILE', 'UNTIL', 'LOOP', 'SUPER', 'CLASS'], ['right', 'POST_IF']];\n\n  tokens = [];\n\n  for (name in grammar) {\n    alternatives = grammar[name];\n    grammar[name] = (function() {\n      var _i, _j, _len, _len1, _ref, _results;\n      _results = [];\n      for (_i = 0, _len = alternatives.length; _i < _len; _i++) {\n        alt = alternatives[_i];\n        _ref = alt[0].split(' ');\n        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n          token = _ref[_j];\n          if (!grammar[token]) {\n            tokens.push(token);\n          }\n        }\n        if (name === 'Root') {\n          alt[1] = \"return \" + alt[1];\n        }\n        _results.push(alt);\n      }\n      return _results;\n    })();\n  }\n\n  exports.parser = new Parser({\n    tokens: tokens.join(' '),\n    bnf: grammar,\n    operators: operators.reverse(),\n    startSymbol: 'Root'\n  });\n\n}).call(this);\n"]}