{"version":3,"sources":["lexer.js"],"names":[],"mappings":"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","file":"lexer-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.3.3\n(function() {\n  var BOOL, CALLABLE, CODE, COFFEE_ALIASES, COFFEE_ALIAS_MAP, COFFEE_KEYWORDS, COMMENT, COMPARE, COMPOUND_ASSIGN, HEREDOC, HEREDOC_ILLEGAL, HEREDOC_INDENT, HEREGEX, HEREGEX_OMIT, IDENTIFIER, INDEXABLE, INVERSES, JSTOKEN, JS_FORBIDDEN, JS_KEYWORDS, LINE_BREAK, LINE_CONTINUER, LOGIC, Lexer, MATH, MULTILINER, MULTI_DENT, NOT_REGEX, NOT_SPACED_REGEX, NUMBER, OPERATOR, REGEX, RELATION, RESERVED, Rewriter, SHIFT, SIMPLESTR, STRICT_PROSCRIBED, TRAILING_SPACES, UNARY, WHITESPACE, compact, count, key, last, starts, _ref, _ref1,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  _ref = require('./rewriter'), Rewriter = _ref.Rewriter, INVERSES = _ref.INVERSES;\n\n  _ref1 = require('./helpers'), count = _ref1.count, starts = _ref1.starts, compact = _ref1.compact, last = _ref1.last;\n\n  exports.Lexer = Lexer = (function() {\n\n    function Lexer() {}\n\n    Lexer.prototype.tokenize = function(code, opts) {\n      var i, tag;\n      if (opts == null) {\n        opts = {};\n      }\n      if (WHITESPACE.test(code)) {\n        code = \"\\n\" + code;\n      }\n      code = code.replace(/\\r/g, '').replace(TRAILING_SPACES, '');\n      this.code = code;\n      this.line = opts.line || 0;\n      this.indent = 0;\n      this.indebt = 0;\n      this.outdebt = 0;\n      this.indents = [];\n      this.ends = [];\n      this.tokens = [];\n      i = 0;\n      while (this.chunk = code.slice(i)) {\n        i += this.identifierToken() || this.commentToken() || this.whitespaceToken() || this.lineToken() || this.heredocToken() || this.stringToken() || this.numberToken() || this.regexToken() || this.jsToken() || this.literalToken();\n      }\n      this.closeIndentation();\n      if (tag = this.ends.pop()) {\n        this.error(\"missing \" + tag);\n      }\n      if (opts.rewrite === false) {\n        return this.tokens;\n      }\n      return (new Rewriter).rewrite(this.tokens);\n    };\n\n    Lexer.prototype.identifierToken = function() {\n      var colon, forcedIdentifier, id, input, match, prev, tag, _ref2, _ref3;\n      if (!(match = IDENTIFIER.exec(this.chunk))) {\n        return 0;\n      }\n      input = match[0], id = match[1], colon = match[2];\n      if (id === 'own' && this.tag() === 'FOR') {\n        this.token('OWN', id);\n        return id.length;\n      }\n      forcedIdentifier = colon || (prev = last(this.tokens)) && (((_ref2 = prev[0]) === '.' || _ref2 === '?.' || _ref2 === '::') || !prev.spaced && prev[0] === '@');\n      tag = 'IDENTIFIER';\n      if (!forcedIdentifier && (__indexOf.call(JS_KEYWORDS, id) >= 0 || __indexOf.call(COFFEE_KEYWORDS, id) >= 0)) {\n        tag = id.toUpperCase();\n        if (tag === 'WHEN' && (_ref3 = this.tag(), __indexOf.call(LINE_BREAK, _ref3) >= 0)) {\n          tag = 'LEADING_WHEN';\n        } else if (tag === 'FOR') {\n          this.seenFor = true;\n        } else if (tag === 'UNLESS') {\n          tag = 'IF';\n        } else if (__indexOf.call(UNARY, tag) >= 0) {\n          tag = 'UNARY';\n        } else if (__indexOf.call(RELATION, tag) >= 0) {\n          if (tag !== 'INSTANCEOF' && this.seenFor) {\n            tag = 'FOR' + tag;\n            this.seenFor = false;\n          } else {\n            tag = 'RELATION';\n            if (this.value() === '!') {\n              this.tokens.pop();\n              id = '!' + id;\n            }\n          }\n        }\n      }\n      if (__indexOf.call(JS_FORBIDDEN, id) >= 0) {\n        if (forcedIdentifier) {\n          tag = 'IDENTIFIER';\n          id = new String(id);\n          id.reserved = true;\n        } else if (__indexOf.call(RESERVED, id) >= 0) {\n          this.error(\"reserved word \\\"\" + id + \"\\\"\");\n        }\n      }\n      if (!forcedIdentifier) {\n        if (__indexOf.call(COFFEE_ALIASES, id) >= 0) {\n          id = COFFEE_ALIAS_MAP[id];\n        }\n        tag = (function() {\n          switch (id) {\n            case '!':\n              return 'UNARY';\n            case '==':\n            case '!=':\n              return 'COMPARE';\n            case '&&':\n            case '||':\n              return 'LOGIC';\n            case 'true':\n            case 'false':\n              return 'BOOL';\n            case 'break':\n            case 'continue':\n              return 'STATEMENT';\n            default:\n              return tag;\n          }\n        })();\n      }\n      this.token(tag, id);\n      if (colon) {\n        this.token(':', ':');\n      }\n      return input.length;\n    };\n\n    Lexer.prototype.numberToken = function() {\n      var binaryLiteral, lexedLength, match, number, octalLiteral;\n      if (!(match = NUMBER.exec(this.chunk))) {\n        return 0;\n      }\n      number = match[0];\n      if (/^0[BOX]/.test(number)) {\n        this.error(\"radix prefix '\" + number + \"' must be lowercase\");\n      } else if (/E/.test(number) && !/^0x/.test(number)) {\n        this.error(\"exponential notation '\" + number + \"' must be indicated with a lowercase 'e'\");\n      } else if (/^0\\d*[89]/.test(number)) {\n        this.error(\"decimal literal '\" + number + \"' must not be prefixed with '0'\");\n      } else if (/^0\\d+/.test(number)) {\n        this.error(\"octal literal '\" + number + \"' must be prefixed with '0o'\");\n      }\n      lexedLength = number.length;\n      if (octalLiteral = /^0o([0-7]+)/.exec(number)) {\n        number = '0x' + (parseInt(octalLiteral[1], 8)).toString(16);\n      }\n      if (binaryLiteral = /^0b([01]+)/.exec(number)) {\n        number = '0x' + (parseInt(binaryLiteral[1], 2)).toString(16);\n      }\n      this.token('NUMBER', number);\n      return lexedLength;\n    };\n\n    Lexer.prototype.stringToken = function() {\n      var match, octalEsc, string;\n      switch (this.chunk.charAt(0)) {\n        case \"'\":\n          if (!(match = SIMPLESTR.exec(this.chunk))) {\n            return 0;\n          }\n          this.token('STRING', (string = match[0]).replace(MULTILINER, '\\\\\\n'));\n          break;\n        case '\"':\n          if (!(string = this.balancedString(this.chunk, '\"'))) {\n            return 0;\n          }\n          if (0 < string.indexOf('#{', 1)) {\n            this.interpolateString(string.slice(1, -1));\n          } else {\n            this.token('STRING', this.escapeLines(string));\n          }\n          break;\n        default:\n          return 0;\n      }\n      if (octalEsc = /^(?:\\\\.|[^\\\\])*\\\\(?:0[0-7]|[1-7])/.test(string)) {\n        this.error(\"octal escape sequences \" + string + \" are not allowed\");\n      }\n      this.line += count(string, '\\n');\n      return string.length;\n    };\n\n    Lexer.prototype.heredocToken = function() {\n      var doc, heredoc, match, quote;\n      if (!(match = HEREDOC.exec(this.chunk))) {\n        return 0;\n      }\n      heredoc = match[0];\n      quote = heredoc.charAt(0);\n      doc = this.sanitizeHeredoc(match[2], {\n        quote: quote,\n        indent: null\n      });\n      if (quote === '\"' && 0 <= doc.indexOf('#{')) {\n        this.interpolateString(doc, {\n          heredoc: true\n        });\n      } else {\n        this.token('STRING', this.makeString(doc, quote, true));\n      }\n      this.line += count(heredoc, '\\n');\n      return heredoc.length;\n    };\n\n    Lexer.prototype.commentToken = function() {\n      var comment, here, match;\n      if (!(match = this.chunk.match(COMMENT))) {\n        return 0;\n      }\n      comment = match[0], here = match[1];\n      if (here) {\n        this.token('HERECOMMENT', this.sanitizeHeredoc(here, {\n          herecomment: true,\n          indent: Array(this.indent + 1).join(' ')\n        }));\n      }\n      this.line += count(comment, '\\n');\n      return comment.length;\n    };\n\n    Lexer.prototype.jsToken = function() {\n      var match, script;\n      if (!(this.chunk.charAt(0) === '`' && (match = JSTOKEN.exec(this.chunk)))) {\n        return 0;\n      }\n      this.token('JS', (script = match[0]).slice(1, -1));\n      return script.length;\n    };\n\n    Lexer.prototype.regexToken = function() {\n      var flags, length, match, prev, regex, _ref2, _ref3;\n      if (this.chunk.charAt(0) !== '/') {\n        return 0;\n      }\n      if (match = HEREGEX.exec(this.chunk)) {\n        length = this.heregexToken(match);\n        this.line += count(match[0], '\\n');\n        return length;\n      }\n      prev = last(this.tokens);\n      if (prev && (_ref2 = prev[0], __indexOf.call((prev.spaced ? NOT_REGEX : NOT_SPACED_REGEX), _ref2) >= 0)) {\n        return 0;\n      }\n      if (!(match = REGEX.exec(this.chunk))) {\n        return 0;\n      }\n      _ref3 = match, match = _ref3[0], regex = _ref3[1], flags = _ref3[2];\n      if (regex.slice(0, 2) === '/*') {\n        this.error('regular expressions cannot begin with `*`');\n      }\n      if (regex === '//') {\n        regex = '/(?:)/';\n      }\n      this.token('REGEX', \"\" + regex + flags);\n      return match.length;\n    };\n\n    Lexer.prototype.heregexToken = function(match) {\n      var body, flags, heregex, re, tag, tokens, value, _i, _len, _ref2, _ref3, _ref4, _ref5;\n      heregex = match[0], body = match[1], flags = match[2];\n      if (0 > body.indexOf('#{')) {\n        re = body.replace(HEREGEX_OMIT, '').replace(/\\//g, '\\\\/');\n        if (re.match(/^\\*/)) {\n          this.error('regular expressions cannot begin with `*`');\n        }\n        this.token('REGEX', \"/\" + (re || '(?:)') + \"/\" + flags);\n        return heregex.length;\n      }\n      this.token('IDENTIFIER', 'RegExp');\n      this.tokens.push(['CALL_START', '(']);\n      tokens = [];\n      _ref2 = this.interpolateString(body, {\n        regex: true\n      });\n      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n        _ref3 = _ref2[_i], tag = _ref3[0], value = _ref3[1];\n        if (tag === 'TOKENS') {\n          tokens.push.apply(tokens, value);\n        } else {\n          if (!(value = value.replace(HEREGEX_OMIT, ''))) {\n            continue;\n          }\n          value = value.replace(/\\\\/g, '\\\\\\\\');\n          tokens.push(['STRING', this.makeString(value, '\"', true)]);\n        }\n        tokens.push(['+', '+']);\n      }\n      tokens.pop();\n      if (((_ref4 = tokens[0]) != null ? _ref4[0] : void 0) !== 'STRING') {\n        this.tokens.push(['STRING', '\"\"'], ['+', '+']);\n      }\n      (_ref5 = this.tokens).push.apply(_ref5, tokens);\n      if (flags) {\n        this.tokens.push([',', ','], ['STRING', '\"' + flags + '\"']);\n      }\n      this.token(')', ')');\n      return heregex.length;\n    };\n\n    Lexer.prototype.lineToken = function() {\n      var diff, indent, match, noNewlines, prev, size;\n      if (!(match = MULTI_DENT.exec(this.chunk))) {\n        return 0;\n      }\n      indent = match[0];\n      this.line += count(indent, '\\n');\n      this.seenFor = false;\n      prev = last(this.tokens, 1);\n      size = indent.length - 1 - indent.lastIndexOf('\\n');\n      noNewlines = this.unfinished();\n      if (size - this.indebt === this.indent) {\n        if (noNewlines) {\n          this.suppressNewlines();\n        } else {\n          this.newlineToken();\n        }\n        return indent.length;\n      }\n      if (size > this.indent) {\n        if (noNewlines) {\n          this.indebt = size - this.indent;\n          this.suppressNewlines();\n          return indent.length;\n        }\n        diff = size - this.indent + this.outdebt;\n        this.token('INDENT', diff);\n        this.indents.push(diff);\n        this.ends.push('OUTDENT');\n        this.outdebt = this.indebt = 0;\n      } else {\n        this.indebt = 0;\n        this.outdentToken(this.indent - size, noNewlines);\n      }\n      this.indent = size;\n      return indent.length;\n    };\n\n    Lexer.prototype.outdentToken = function(moveOut, noNewlines) {\n      var dent, len;\n      while (moveOut > 0) {\n        len = this.indents.length - 1;\n        if (this.indents[len] === void 0) {\n          moveOut = 0;\n        } else if (this.indents[len] === this.outdebt) {\n          moveOut -= this.outdebt;\n          this.outdebt = 0;\n        } else if (this.indents[len] < this.outdebt) {\n          this.outdebt -= this.indents[len];\n          moveOut -= this.indents[len];\n        } else {\n          dent = this.indents.pop() - this.outdebt;\n          moveOut -= dent;\n          this.outdebt = 0;\n          this.pair('OUTDENT');\n          this.token('OUTDENT', dent);\n        }\n      }\n      if (dent) {\n        this.outdebt -= moveOut;\n      }\n      while (this.value() === ';') {\n        this.tokens.pop();\n      }\n      if (!(this.tag() === 'TERMINATOR' || noNewlines)) {\n        this.token('TERMINATOR', '\\n');\n      }\n      return this;\n    };\n\n    Lexer.prototype.whitespaceToken = function() {\n      var match, nline, prev;\n      if (!((match = WHITESPACE.exec(this.chunk)) || (nline = this.chunk.charAt(0) === '\\n'))) {\n        return 0;\n      }\n      prev = last(this.tokens);\n      if (prev) {\n        prev[match ? 'spaced' : 'newLine'] = true;\n      }\n      if (match) {\n        return match[0].length;\n      } else {\n        return 0;\n      }\n    };\n\n    Lexer.prototype.newlineToken = function() {\n      while (this.value() === ';') {\n        this.tokens.pop();\n      }\n      if (this.tag() !== 'TERMINATOR') {\n        this.token('TERMINATOR', '\\n');\n      }\n      return this;\n    };\n\n    Lexer.prototype.suppressNewlines = function() {\n      if (this.value() === '\\\\') {\n        this.tokens.pop();\n      }\n      return this;\n    };\n\n    Lexer.prototype.literalToken = function() {\n      var match, prev, tag, value, _ref2, _ref3, _ref4, _ref5;\n      if (match = OPERATOR.exec(this.chunk)) {\n        value = match[0];\n        if (CODE.test(value)) {\n          this.tagParameters();\n        }\n      } else {\n        value = this.chunk.charAt(0);\n      }\n      tag = value;\n      prev = last(this.tokens);\n      if (value === '=' && prev) {\n        if (!prev[1].reserved && (_ref2 = prev[1], __indexOf.call(JS_FORBIDDEN, _ref2) >= 0)) {\n          this.error(\"reserved word \\\"\" + (this.value()) + \"\\\" can't be assigned\");\n        }\n        if ((_ref3 = prev[1]) === '||' || _ref3 === '&&') {\n          prev[0] = 'COMPOUND_ASSIGN';\n          prev[1] += '=';\n          return value.length;\n        }\n      }\n      if (value === ';') {\n        this.seenFor = false;\n        tag = 'TERMINATOR';\n      } else if (__indexOf.call(MATH, value) >= 0) {\n        tag = 'MATH';\n      } else if (__indexOf.call(COMPARE, value) >= 0) {\n        tag = 'COMPARE';\n      } else if (__indexOf.call(COMPOUND_ASSIGN, value) >= 0) {\n        tag = 'COMPOUND_ASSIGN';\n      } else if (__indexOf.call(UNARY, value) >= 0) {\n        tag = 'UNARY';\n      } else if (__indexOf.call(SHIFT, value) >= 0) {\n        tag = 'SHIFT';\n      } else if (__indexOf.call(LOGIC, value) >= 0 || value === '?' && (prev != null ? prev.spaced : void 0)) {\n        tag = 'LOGIC';\n      } else if (prev && !prev.spaced) {\n        if (value === '(' && (_ref4 = prev[0], __indexOf.call(CALLABLE, _ref4) >= 0)) {\n          if (prev[0] === '?') {\n            prev[0] = 'FUNC_EXIST';\n          }\n          tag = 'CALL_START';\n        } else if (value === '[' && (_ref5 = prev[0], __indexOf.call(INDEXABLE, _ref5) >= 0)) {\n          tag = 'INDEX_START';\n          switch (prev[0]) {\n            case '?':\n              prev[0] = 'INDEX_SOAK';\n          }\n        }\n      }\n      switch (value) {\n        case '(':\n        case '{':\n        case '[':\n          this.ends.push(INVERSES[value]);\n          break;\n        case ')':\n        case '}':\n        case ']':\n          this.pair(value);\n      }\n      this.token(tag, value);\n      return value.length;\n    };\n\n    Lexer.prototype.sanitizeHeredoc = function(doc, options) {\n      var attempt, herecomment, indent, match, _ref2;\n      indent = options.indent, herecomment = options.herecomment;\n      if (herecomment) {\n        if (HEREDOC_ILLEGAL.test(doc)) {\n          this.error(\"block comment cannot contain \\\"*/\\\", starting\");\n        }\n        if (doc.indexOf('\\n') <= 0) {\n          return doc;\n        }\n      } else {\n        while (match = HEREDOC_INDENT.exec(doc)) {\n          attempt = match[1];\n          if (indent === null || (0 < (_ref2 = attempt.length) && _ref2 < indent.length)) {\n            indent = attempt;\n          }\n        }\n      }\n      if (indent) {\n        doc = doc.replace(RegExp(\"\\\\n\" + indent, \"g\"), '\\n');\n      }\n      if (!herecomment) {\n        doc = doc.replace(/^\\n/, '');\n      }\n      return doc;\n    };\n\n    Lexer.prototype.tagParameters = function() {\n      var i, stack, tok, tokens;\n      if (this.tag() !== ')') {\n        return this;\n      }\n      stack = [];\n      tokens = this.tokens;\n      i = tokens.length;\n      tokens[--i][0] = 'PARAM_END';\n      while (tok = tokens[--i]) {\n        switch (tok[0]) {\n          case ')':\n            stack.push(tok);\n            break;\n          case '(':\n          case 'CALL_START':\n            if (stack.length) {\n              stack.pop();\n            } else if (tok[0] === '(') {\n              tok[0] = 'PARAM_START';\n              return this;\n            } else {\n              return this;\n            }\n        }\n      }\n      return this;\n    };\n\n    Lexer.prototype.closeIndentation = function() {\n      return this.outdentToken(this.indent);\n    };\n\n    Lexer.prototype.balancedString = function(str, end) {\n      var continueCount, i, letter, match, prev, stack, _i, _ref2;\n      continueCount = 0;\n      stack = [end];\n      for (i = _i = 1, _ref2 = str.length; 1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 1 <= _ref2 ? ++_i : --_i) {\n        if (continueCount) {\n          --continueCount;\n          continue;\n        }\n        switch (letter = str.charAt(i)) {\n          case '\\\\':\n            ++continueCount;\n            continue;\n          case end:\n            stack.pop();\n            if (!stack.length) {\n              return str.slice(0, i + 1 || 9e9);\n            }\n            end = stack[stack.length - 1];\n            continue;\n        }\n        if (end === '}' && (letter === '\"' || letter === \"'\")) {\n          stack.push(end = letter);\n        } else if (end === '}' && letter === '/' && (match = HEREGEX.exec(str.slice(i)) || REGEX.exec(str.slice(i)))) {\n          continueCount += match[0].length - 1;\n        } else if (end === '}' && letter === '{') {\n          stack.push(end = '}');\n        } else if (end === '\"' && prev === '#' && letter === '{') {\n          stack.push(end = '}');\n        }\n        prev = letter;\n      }\n      return this.error(\"missing \" + (stack.pop()) + \", starting\");\n    };\n\n    Lexer.prototype.interpolateString = function(str, options) {\n      var expr, heredoc, i, inner, interpolated, len, letter, nested, pi, regex, tag, tokens, value, _i, _len, _ref2, _ref3, _ref4;\n      if (options == null) {\n        options = {};\n      }\n      heredoc = options.heredoc, regex = options.regex;\n      tokens = [];\n      pi = 0;\n      i = -1;\n      while (letter = str.charAt(i += 1)) {\n        if (letter === '\\\\') {\n          i += 1;\n          continue;\n        }\n        if (!(letter === '#' && str.charAt(i + 1) === '{' && (expr = this.balancedString(str.slice(i + 1), '}')))) {\n          continue;\n        }\n        if (pi < i) {\n          tokens.push(['NEOSTRING', str.slice(pi, i)]);\n        }\n        inner = expr.slice(1, -1);\n        if (inner.length) {\n          nested = new Lexer().tokenize(inner, {\n            line: this.line,\n            rewrite: false\n          });\n          nested.pop();\n          if (((_ref2 = nested[0]) != null ? _ref2[0] : void 0) === 'TERMINATOR') {\n            nested.shift();\n          }\n          if (len = nested.length) {\n            if (len > 1) {\n              nested.unshift(['(', '(', this.line]);\n              nested.push([')', ')', this.line]);\n            }\n            tokens.push(['TOKENS', nested]);\n          }\n        }\n        i += expr.length;\n        pi = i + 1;\n      }\n      if ((i > pi && pi < str.length)) {\n        tokens.push(['NEOSTRING', str.slice(pi)]);\n      }\n      if (regex) {\n        return tokens;\n      }\n      if (!tokens.length) {\n        return this.token('STRING', '\"\"');\n      }\n      if (tokens[0][0] !== 'NEOSTRING') {\n        tokens.unshift(['', '']);\n      }\n      if (interpolated = tokens.length > 1) {\n        this.token('(', '(');\n      }\n      for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {\n        _ref3 = tokens[i], tag = _ref3[0], value = _ref3[1];\n        if (i) {\n          this.token('+', '+');\n        }\n        if (tag === 'TOKENS') {\n          (_ref4 = this.tokens).push.apply(_ref4, value);\n        } else {\n          this.token('STRING', this.makeString(value, '\"', heredoc));\n        }\n      }\n      if (interpolated) {\n        this.token(')', ')');\n      }\n      return tokens;\n    };\n\n    Lexer.prototype.pair = function(tag) {\n      var size, wanted;\n      if (tag !== (wanted = last(this.ends))) {\n        if ('OUTDENT' !== wanted) {\n          this.error(\"unmatched \" + tag);\n        }\n        this.indent -= size = last(this.indents);\n        this.outdentToken(size, true);\n        return this.pair(tag);\n      }\n      return this.ends.pop();\n    };\n\n    Lexer.prototype.token = function(tag, value) {\n      return this.tokens.push([tag, value, this.line]);\n    };\n\n    Lexer.prototype.tag = function(index, tag) {\n      var tok;\n      return (tok = last(this.tokens, index)) && (tag ? tok[0] = tag : tok[0]);\n    };\n\n    Lexer.prototype.value = function(index, val) {\n      var tok;\n      return (tok = last(this.tokens, index)) && (val ? tok[1] = val : tok[1]);\n    };\n\n    Lexer.prototype.unfinished = function() {\n      var _ref2;\n      return LINE_CONTINUER.test(this.chunk) || ((_ref2 = this.tag()) === '\\\\' || _ref2 === '.' || _ref2 === '?.' || _ref2 === 'UNARY' || _ref2 === 'MATH' || _ref2 === '+' || _ref2 === '-' || _ref2 === 'SHIFT' || _ref2 === 'RELATION' || _ref2 === 'COMPARE' || _ref2 === 'LOGIC' || _ref2 === 'THROW' || _ref2 === 'EXTENDS');\n    };\n\n    Lexer.prototype.escapeLines = function(str, heredoc) {\n      return str.replace(MULTILINER, heredoc ? '\\\\n' : '');\n    };\n\n    Lexer.prototype.makeString = function(body, quote, heredoc) {\n      if (!body) {\n        return quote + quote;\n      }\n      body = body.replace(/\\\\([\\s\\S])/g, function(match, contents) {\n        if (contents === '\\n' || contents === quote) {\n          return contents;\n        } else {\n          return match;\n        }\n      });\n      body = body.replace(RegExp(\"\" + quote, \"g\"), '\\\\$&');\n      return quote + this.escapeLines(body, heredoc) + quote;\n    };\n\n    Lexer.prototype.error = function(message) {\n      throw SyntaxError(\"\" + message + \" on line \" + (this.line + 1));\n    };\n\n    return Lexer;\n\n  })();\n\n  JS_KEYWORDS = ['true', 'false', 'null', 'this', 'new', 'delete', 'typeof', 'in', 'instanceof', 'return', 'throw', 'break', 'continue', 'debugger', 'if', 'else', 'switch', 'for', 'while', 'do', 'try', 'catch', 'finally', 'class', 'extends', 'super'];\n\n  COFFEE_KEYWORDS = ['undefined', 'then', 'unless', 'until', 'loop', 'of', 'by', 'when'];\n\n  COFFEE_ALIAS_MAP = {\n    and: '&&',\n    or: '||',\n    is: '==',\n    isnt: '!=',\n    not: '!',\n    yes: 'true',\n    no: 'false',\n    on: 'true',\n    off: 'false'\n  };\n\n  COFFEE_ALIASES = (function() {\n    var _results;\n    _results = [];\n    for (key in COFFEE_ALIAS_MAP) {\n      _results.push(key);\n    }\n    return _results;\n  })();\n\n  COFFEE_KEYWORDS = COFFEE_KEYWORDS.concat(COFFEE_ALIASES);\n\n  RESERVED = ['case', 'default', 'function', 'var', 'void', 'with', 'const', 'let', 'enum', 'export', 'import', 'native', '__hasProp', '__extends', '__slice', '__bind', '__indexOf', 'implements', 'interface', 'let', 'package', 'private', 'protected', 'public', 'static', 'yield'];\n\n  STRICT_PROSCRIBED = ['arguments', 'eval'];\n\n  JS_FORBIDDEN = JS_KEYWORDS.concat(RESERVED).concat(STRICT_PROSCRIBED);\n\n  exports.RESERVED = RESERVED.concat(JS_KEYWORDS).concat(COFFEE_KEYWORDS).concat(STRICT_PROSCRIBED);\n\n  exports.STRICT_PROSCRIBED = STRICT_PROSCRIBED;\n\n  IDENTIFIER = /^([$A-Za-z_\\x7f-\\uffff][$\\w\\x7f-\\uffff]*)([^\\n\\S]*:(?!:))?/;\n\n  NUMBER = /^0b[01]+|^0o[0-7]+|^0x[\\da-f]+|^\\d*\\.?\\d+(?:e[+-]?\\d+)?/i;\n\n  HEREDOC = /^(\"\"\"|''')([\\s\\S]*?)(?:\\n[^\\n\\S]*)?\\1/;\n\n  OPERATOR = /^(?:[-=]>|[-+*\\/%<>&|^!?=]=|>>>=?|([-+:])\\1|([&|<>])\\2=?|\\?\\.|\\.{2,3})/;\n\n  WHITESPACE = /^[^\\n\\S]+/;\n\n  COMMENT = /^###([^#][\\s\\S]*?)(?:###[^\\n\\S]*|(?:###)?$)|^(?:\\s*#(?!##[^#]).*)+/;\n\n  CODE = /^[-=]>/;\n\n  MULTI_DENT = /^(?:\\n[^\\n\\S]*)+/;\n\n  SIMPLESTR = /^'[^\\\\']*(?:\\\\.[^\\\\']*)*'/;\n\n  JSTOKEN = /^`[^\\\\`]*(?:\\\\.[^\\\\`]*)*`/;\n\n  REGEX = /^(\\/(?![\\s=])[^[\\/\\n\\\\]*(?:(?:\\\\[\\s\\S]|\\[[^\\]\\n\\\\]*(?:\\\\[\\s\\S][^\\]\\n\\\\]*)*])[^[\\/\\n\\\\]*)*\\/)([imgy]{0,4})(?!\\w)/;\n\n  HEREGEX = /^\\/{3}([\\s\\S]+?)\\/{3}([imgy]{0,4})(?!\\w)/;\n\n  HEREGEX_OMIT = /\\s+(?:#.*)?/g;\n\n  MULTILINER = /\\n/g;\n\n  HEREDOC_INDENT = /\\n+([^\\n\\S]*)/g;\n\n  HEREDOC_ILLEGAL = /\\*\\//;\n\n  LINE_CONTINUER = /^\\s*(?:,|\\??\\.(?![.\\d])|::)/;\n\n  TRAILING_SPACES = /\\s+$/;\n\n  COMPOUND_ASSIGN = ['-=', '+=', '/=', '*=', '%=', '||=', '&&=', '?=', '<<=', '>>=', '>>>=', '&=', '^=', '|='];\n\n  UNARY = ['!', '~', 'NEW', 'TYPEOF', 'DELETE', 'DO'];\n\n  LOGIC = ['&&', '||', '&', '|', '^'];\n\n  SHIFT = ['<<', '>>', '>>>'];\n\n  COMPARE = ['==', '!=', '<', '>', '<=', '>='];\n\n  MATH = ['*', '/', '%'];\n\n  RELATION = ['IN', 'OF', 'INSTANCEOF'];\n\n  BOOL = ['TRUE', 'FALSE'];\n\n  NOT_REGEX = ['NUMBER', 'REGEX', 'BOOL', 'NULL', 'UNDEFINED', '++', '--', ']'];\n\n  NOT_SPACED_REGEX = NOT_REGEX.concat(')', '}', 'THIS', 'IDENTIFIER', 'STRING');\n\n  CALLABLE = ['IDENTIFIER', 'STRING', 'REGEX', ')', ']', '}', '?', '::', '@', 'THIS', 'SUPER'];\n\n  INDEXABLE = CALLABLE.concat('NUMBER', 'BOOL', 'NULL', 'UNDEFINED');\n\n  LINE_BREAK = ['INDENT', 'OUTDENT', 'TERMINATOR'];\n\n}).call(this);\n"]}