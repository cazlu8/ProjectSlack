{"version":3,"sources":["child.js"],"names":[],"mappings":"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","file":"child-compiled.js","sourcesContent":["var path = require('path');\nvar fs = require('fs');\nvar nodeunit = require('nodeunit');\n\nvar filepaths = fs.readdirSync('test').map(function(filename) {\n  return path.join('test', filename);\n});\n\nvar unfinished = {};\nvar currentModule;\nfunction sendMessage(message) {\n  process.stdout.write(JSON.stringify(message) + '\\n');\n}\n\n// If an exception is thrown, let the parent process know and exit.\nprocess.on('uncaughtException', function (e) {\n  sendMessage({error: [e.name, e.message, e.stack]});\n  process.exit();\n});\n\n// If Nodeunit explodes because a test was missing test.done(), handle it.\nvar unfinished = {};\nprocess.on('exit', function (e) {\n  var len = Object.keys(unfinished).length\n  if (len > 0) {\n    sendMessage({exit: ['UNFINISHED']});\n    // process.reallyExit(len);\n  } else {\n    sendMessage({exit: ['finished']});\n  }\n  // process.exit();\n});\n\nnodeunit.reporters.test = {\n  run: function(files, options, callback) {\n    // Nodeunit needs absolute paths.\n    var paths = files.map(function (filepath) {\n      return path.resolve(filepath);\n    });\n    nodeunit.runFiles(paths, {\n      // No idea.\n      testspec: undefined,\n      // Executed when the first test in a file is run. If no tests exist in\n      // the file, this doesn't execute.\n      moduleStart: function(name) {\n        // Keep track of this so that moduleDone output can be suppressed in\n        // cases where a test file contains no tests.\n        currentModule = name;\n        // Send back to the parent process.\n        sendMessage({moduleStart: [name.toString()]});\n      },\n      // Executed after a file is done being processed. This executes whether\n      // tests exist in the file or not.\n      moduleDone: function(name) {\n        // Abort if no tests actually ran.\n        if (name !== currentModule) { return; }\n        // Send back to the parent process.\n        sendMessage({moduleDone: [name.toString()]});\n      },\n      // Executed before each test is run.\n      testStart: function(name) {\n        // Keep track of the current test, in case test.done() was omitted\n        // and Nodeunit explodes.\n        unfinished[name] = name;\n        // Send back to the parent process.\n        sendMessage({testStart: [name.toString()]});\n      },\n      // Executed after each test and all its assertions are run.\n      testDone: function(name, assertions) {\n        delete unfinished[name];\n        // Send back to the parent process.\n        sendMessage({testDone: [\n          name.toString(),\n          assertions.failures(),\n          assertions.map(function(assertion) {\n            var e = assertion.error;\n            if (e) {\n              assertion.error = {\n                name: e.name,\n                message: e.message,\n                stack: e.stack\n              };\n            }\n            return assertion;\n          })\n        ]});\n      },\n      // Executed when everything is all done.\n      done: function (assertions) {\n        // Send back to the parent process.\n        sendMessage({done: [\n          assertions.failures(),\n          assertions.duration,\n          assertions\n        ]});\n      }\n    });\n  }\n}\n\nnodeunit.reporters.test.run(filepaths, {});\n"]}