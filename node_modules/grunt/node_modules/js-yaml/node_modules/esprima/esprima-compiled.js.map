{"version":3,"sources":["esprima.js"],"names":[],"mappings":"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","file":"esprima-compiled.js","sourcesContent":["/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = source[index++];\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += source[index++];\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += source[index++];\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += source[index++];\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction([]),\n                        kind: 'set'\n                    };\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction(param, token),\n                        kind: 'set'\n                    };\n                }\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n\n    function parseLeftHandSideExpression() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall(), token;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator) {\n            return expr;\n        }\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return parsePostfixExpression();\n        }\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr;\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead());\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function createLocationMarker() {\n        var marker = {};\n\n        marker.range = [index, index];\n        marker.loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            },\n            end: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        marker.end = function () {\n            this.range[1] = index;\n            this.loc.end.line = lineNumber;\n            this.loc.end.column = index - lineStart;\n        };\n\n        marker.applyGroup = function (node) {\n            if (extra.range) {\n                node.groupRange = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.groupLoc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        marker.apply = function (node) {\n            if (extra.range) {\n                node.range = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        return marker;\n    }\n\n    function trackGroupExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        marker.end();\n        marker.applyGroup(expr);\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpressionAllowCall() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function filterGroup(node) {\n        var n, i, entry;\n\n        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};\n        for (i in node) {\n            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {\n                entry = node[i];\n                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {\n                    n[i] = entry;\n                } else {\n                    n[i] = filterGroup(entry);\n                }\n            }\n        }\n        return n;\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                var start, end;\n\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range) {\n                    if (node.left.groupRange || node.right.groupRange) {\n                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];\n                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];\n                        node.range = [start, end];\n                    } else if (typeof node.range === 'undefined') {\n                        start = node.left.range[0];\n                        end = node.right.range[1];\n                        node.range = [start, end];\n                    }\n                }\n                if (loc) {\n                    if (node.left.groupLoc || node.right.groupLoc) {\n                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;\n                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;\n                        node.loc = {\n                            start: start,\n                            end: end\n                        };\n                    } else if (typeof node.loc === 'undefined') {\n                        node.loc = {\n                            start: node.left.loc.start,\n                            end: node.right.loc.end\n                        };\n                    }\n                }\n            }\n\n            return function () {\n                var marker, node;\n\n                skipComment();\n\n                marker = createLocationMarker();\n                node = parseFunction.apply(null, arguments);\n                marker.end();\n\n                if (range && typeof node.range === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (loc && typeof node.loc === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (isBinary(node)) {\n                    visit(node);\n                }\n\n                return node;\n            };\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            extra.parseGroupExpression = parseGroupExpression;\n            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;\n            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;\n            parseGroupExpression = trackGroupExpression;\n            parseLeftHandSideExpression = trackLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGroupExpression = extra.parseGroupExpression;\n            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.range || extra.loc) {\n                program.body = filterGroup(program.body);\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.4';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}