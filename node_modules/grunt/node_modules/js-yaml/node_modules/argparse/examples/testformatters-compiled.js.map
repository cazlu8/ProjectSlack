{"version":3,"sources":["testformatters.js"],"names":[],"mappings":"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","file":"testformatters-compiled.js","sourcesContent":["'use strict';\n\nvar a, group, parser, helptext;\n\nvar assert = require('assert');\nvar _ = require('underscore');\n_.str = require('underscore.string');\nvar print = function () {\n    return console.log.apply(console, arguments);\n  };\n// print = function () {};\n\nvar argparse = require('argparse');\n\nprint(\"TEST argparse.ArgumentDefaultsHelpFormatter\");\n\nparser = new argparse.ArgumentParser({\n  debug: true,\n  formatterClass: argparse.ArgumentDefaultsHelpFormatter,\n  description: 'description'\n});\n\nparser.addArgument(['--foo'], {\n  help: 'foo help - oh and by the way, %(defaultValue)s'\n});\n\nparser.addArgument(['--bar'], {\n  action: 'storeTrue',\n  help: 'bar help'\n});\n\nparser.addArgument(['spam'], {\n  help: 'spam help'\n});\n\nparser.addArgument(['badger'], {\n  nargs: '?',\n  defaultValue: 'wooden',\n  help: 'badger help'\n});\n\ngroup = parser.addArgumentGroup({\n  title: 'title',\n  description: 'group description'\n});\n\ngroup.addArgument(['--baz'], {\n  type: 'int',\n  defaultValue: 42,\n  help: 'baz help'\n});\n\nhelptext = parser.formatHelp();\nprint(helptext);\n// test selected clips\nassert(helptext.match(/badger help \\(default: wooden\\)/));\nassert(helptext.match(/foo help - oh and by the way, null/));\nassert(helptext.match(/bar help \\(default: false\\)/));\nassert(helptext.match(/title:\\n {2}group description/)); // test indent\nassert(helptext.match(/baz help \\(default: 42\\)/im));\n\n/*\nusage: PROG [-h] [--foo FOO] [--bar] [--baz BAZ] spam [badger]\n\ndescription\n\npositional arguments:\n  spam        spam help\n  badger      badger help (default: wooden)\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --foo FOO   foo help - oh and by the way, null\n  --bar       bar help (default: false)\n\ntitle:\n  group description\n\n  --baz BAZ   baz help (default: 42)\n*/\n\nprint(\"TEST argparse.RawDescriptionHelpFormatter\");\n\nparser = new argparse.ArgumentParser({\n  debug: true,\n  prog: 'PROG',\n  formatterClass: argparse.RawDescriptionHelpFormatter,\n  description: 'Keep the formatting\\n' +\n               '    exactly as it is written\\n' +\n               '\\n' +\n               'here\\n'\n});\n\na = parser.addArgument(['--foo'], {\n  help: '  foo help should not\\n' +\n        '    retain this odd formatting'\n});\n\nparser.addArgument(['spam'], {\n  'help': 'spam help'\n});\n\ngroup = parser.addArgumentGroup({\n  title: 'title',\n  description: '    This text\\n' +\n               '  should be indented\\n' +\n               '    exactly like it is here\\n'\n});\n\ngroup.addArgument(['--bar'], {\n  help: 'bar help'\n});\n\nhelptext = parser.formatHelp();\nprint(helptext);\n// test selected clips\nassert(helptext.match(parser.description));\nassert.equal(helptext.match(a.help), null);\nassert(helptext.match(/foo help should not retain this odd formatting/));\n\n/*\nclass TestHelpRawDescription(HelpTestCase):\n    \"\"\"Test the RawTextHelpFormatter\"\"\"\n....\n\nusage: PROG [-h] [--foo FOO] [--bar BAR] spam\n\nKeep the formatting\n    exactly as it is written\n\nhere\n\npositional arguments:\n  spam        spam help\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --foo FOO   foo help should not retain this odd formatting\n\ntitle:\n      This text\n    should be indented\n      exactly like it is here\n\n  --bar BAR   bar help\n*/\n\n\nprint(\"TEST argparse.RawTextHelpFormatter\");\n\nparser = new argparse.ArgumentParser({\n  debug: true,\n  prog: 'PROG',\n  formatterClass: argparse.RawTextHelpFormatter,\n  description: 'Keep the formatting\\n' +\n               '    exactly as it is written\\n' +\n               '\\n' +\n               'here\\n'\n});\n\nparser.addArgument(['--baz'], {\n  help: '    baz help should also\\n' +\n        'appear as given here'\n});\n\na = parser.addArgument(['--foo'], {\n  help: '  foo help should also\\n' +\n        'appear as given here'\n});\n\nparser.addArgument(['spam'], {\n  'help': 'spam help'\n});\n\ngroup = parser.addArgumentGroup({\n  title: 'title',\n  description: '    This text\\n' +\n               '  should be indented\\n' +\n               '    exactly like it is here\\n'\n});\n\ngroup.addArgument(['--bar'], {\n  help: 'bar help'\n});\n\nhelptext = parser.formatHelp();\nprint(helptext);\n// test selected clips\nassert(helptext.match(parser.description));\nassert(helptext.match(/( {14})appear as given here/gm));\n\n/*\nclass TestHelpRawText(HelpTestCase):\n    \"\"\"Test the RawTextHelpFormatter\"\"\"\n\nusage: PROG [-h] [--foo FOO] [--bar BAR] spam\n\nKeep the formatting\n    exactly as it is written\n\nhere\n\npositional arguments:\n  spam        spam help\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --foo FOO       foo help should also\n              appear as given here\n\ntitle:\n      This text\n    should be indented\n      exactly like it is here\n\n  --bar BAR   bar help\n*/\n\n\nprint(\"TEST metavar as a tuple\");\n\nparser = new argparse.ArgumentParser({\n  prog: 'PROG'\n});\n\nparser.addArgument(['-w'], {\n  help: 'w',\n  nargs: '+',\n  metavar: ['W1', 'W2']\n});\n\nparser.addArgument(['-x'], {\n  help: 'x',\n  nargs: '*',\n  metavar: ['X1', 'X2']\n});\n\nparser.addArgument(['-y'], {\n  help: 'y',\n  nargs: 3,\n  metavar: ['Y1', 'Y2', 'Y3']\n});\n\nparser.addArgument(['-z'], {\n  help: 'z',\n  nargs: '?',\n  metavar: ['Z1']\n});\n\nhelptext = parser.formatHelp();\nprint(helptext);\nvar ustring = 'PROG [-h] [-w W1 [W2 ...]] [-x [X1 [X2 ...]]] [-y Y1 Y2 Y3] [-z [Z1]]';\nustring = ustring.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]');\n// print(ustring)\nassert(helptext.match(new RegExp(ustring)));\n\n/*\nclass TestHelpTupleMetavar(HelpTestCase):\n    \"\"\"Test specifying metavar as a tuple\"\"\"\n\nusage: PROG [-h] [-w W1 [W2 ...]] [-x [X1 [X2 ...]]] [-y Y1 Y2 Y3] [-z [Z1]]\n\noptional arguments:\n  -h, --help        show this help message and exit\n  -w W1 [W2 ...]    w\n  -x [X1 [X2 ...]]  x\n  -y Y1 Y2 Y3       y\n  -z [Z1]           z\n*/\n\n"]}