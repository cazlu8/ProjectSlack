{"version":3,"sources":["namespace.js"],"names":[],"mappings":";;;;;;;;;;AAUA,YAAY,CAAC;;AAEb,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;;;;;AAO9B,IAAI,SAAS,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,SAAS,CAAC,OAAO,EAAE;AAC3D,GAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACzB,CAAC;;;;;;;;AAQF,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE;AACzC,SAAO,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;CACzB,CAAC;;;;;;;;;;AAUF,SAAS,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,GAAG,EAAE,KAAK,EAAE;AAC9C,MAAI,OAAQ,GAAG,AAAC,KAAK,QAAQ,EAAE;AAC7B,KAAC,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GACrB,MAAM;AACL,QAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;GACnB;AACD,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;;;AASF,SAAS,CAAC,SAAS,CAAC,GAAG,GAAG,UAAU,GAAG,EAAE,YAAY,EAAE;AACrD,SAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,GAAE,IAAI,CAAC,GAAG,CAAC,CAAC;CAC7C,CAAC;;;;;;;;;AASF,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE,YAAY,EAAE;AACvD,MAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AACtB,MAAI,KAAK,KAAK,IAAI,EAAE;AAClB,WAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AACjB,WAAO,KAAK,CAAC;GACd,MAAM;AACL,WAAO,YAAY,CAAC;GACrB;CACF,CAAC","file":"namespace-compiled.js","sourcesContent":["/**\n * class Namespace\n *\n * Simple object for storing attributes. Implements equality by attribute names\n * and values, and provides a simple string representation.\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-namespace-object\n **/\n'use strict';\n\nvar _ = require('underscore');\n\n/**\n * new Namespace(options)\n * - options(object): predefined propertis for result object\n *\n **/\nvar Namespace = module.exports = function Namespace(options) {\n  _.extend(this, options);\n};\n\n/**\n * Namespace#isset(key) -> Boolean\n * - key (string|number): property name\n *\n * Tells whenever `namespace` contains given `key` or not.\n **/\nNamespace.prototype.isset = function (key) {\n  return _.has(this, key);\n};\n\n/**\n * Namespace#set(key, value) -> self\n * -key (string|number|object): propery name\n * -value (mixed): new property value\n *\n * Set the property named key with value.\n * If key object then set all key properties to namespace object\n **/\nNamespace.prototype.set = function (key, value) {\n  if (typeof (key) === 'object') {\n    _.extend(this, key);\n  } else {\n    this[key] = value;\n  }\n  return this;\n};\n\n/**\n * Namespace#get(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return the property key or defaulValue if not set\n **/\nNamespace.prototype.get = function (key, defaultValue) {\n  return !this[key] ? defaultValue: this[key];\n};\n\n/**\n * Namespace#unset(key, defaultValue) -> mixed\n * - key (string|number): property name\n * - defaultValue (mixed): default value\n *\n * Return data[key](and delete it) or defaultValue\n **/\nNamespace.prototype.unset = function (key, defaultValue) {\n  var value = this[key];\n  if (value !== null) {\n    delete this[key];\n    return value;\n  } else {\n    return defaultValue;\n  }\n};\n"]}