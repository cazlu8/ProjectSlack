{"version":3,"sources":["action.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,YAAY,CAAC;;;AAIb,IAAI,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsC5B,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,MAAM,CAAC,OAAO,EAAE;AACrD,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,EAAE,CAAC;AACjD,MAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACzB,MAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;AAChE,MAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,KAAK,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzE,MAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;AACzC,MAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,KAAK,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAC7D,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,KAAK,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;AACtE,MAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,KAAK,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAE,KAAK,CAAC;AACzE,MAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,KAAK,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAC7D,MAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,KAAK,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;;AAEtE,MAAI,EAAE,IAAI,CAAC,aAAa,YAAY,KAAK,CAAA,AAAC,EAAE;AAC1C,UAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;GACrD;AACD,MAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,IAAI,CAAC,QAAQ,AAAC,KAAK,SAAS,EAAE;AACtE,UAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;GACjD;CACF,CAAC;;;;;;;AAOF,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,YAAY;AACrC,MAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AACjC,WAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GACrC,MAAM,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,CAAC,QAAQ,EAAE;AAChE,WAAO,IAAI,CAAC,OAAO,CAAC;GACrB,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,QAAQ,EAAE;AAC/D,WAAO,IAAI,CAAC,IAAI,CAAC;GAClB;AACD,SAAO,IAAI,CAAC;CACb,CAAC;;;;;;;AAOF,MAAM,CAAC,SAAS,CAAC,UAAU,GAAG,YAAY;AACxC,SAAO,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;CAC7B,CAAC;;;;;;;AAOF,MAAM,CAAC,SAAS,CAAC,YAAY,GAAG,YAAY;AAC1C,SAAQ,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAE;CAC1C,CAAC;;;;;;;;;;;;;;;;;;AAkBF,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY;AAClC,QAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;CACxC,CAAC","file":"action-compiled.js","sourcesContent":["/**\n * class Action\n *\n * Base class for all actions\n * Do not call in your code, use this class only for inherits your own action\n *\n * Information about how to convert command line strings to Javascript objects.\n * Action objects are used by an ArgumentParser to represent the information\n * needed to parse a single argument from one or more strings from the command\n * line. The keyword arguments to the Action constructor are also all attributes\n * of Action instances.\n *\n * #####Alowed keywords:\n *\n * - `store`\n * - `storeConstant`\n * - `storeTrue`\n * - `storeFalse`\n * - `append`\n * - `appendConstant`\n * - `count`\n * - `help`\n * - `version`\n *\n * Information about action options see [[Action.new]]\n *\n * See also [original guide](http://docs.python.org/dev/library/argparse.html#action)\n *\n **/\n\n'use strict';\n\n\n// Constants\nvar $$ = require('./const');\n\n\n/**\n * new Action(options)\n *\n * Base class for all actions. Used only for inherits\n *\n *\n * ##### Options:\n *\n * - `optionStrings`  A list of command-line option strings for the action.\n * - `dest`  Attribute to hold the created object(s)\n * - `nargs`  The number of command-line arguments that should be consumed.\n * By default, one argument will be consumed and a single value will be\n * produced.\n * - `constant`  Default value for an action with no value.\n * - `defaultValue`  The value to be produced if the option is not specified.\n * - `type`  Cast to 'string'|'int'|'float'|'complex'|function (string). If\n * None, 'string'.\n * - `choices`  The choices available.\n * - `required`  True if the action must always be specified at the command\n * line.\n * - `help`  The help describing the argument.\n * - `metavar`  The name to be used for the option's argument with the help\n * string. If None, the 'dest' value will be used as the name.\n *\n * ##### nargs supported values:\n *\n * - `N` (an integer) consumes N arguments (and produces a list)\n * - `?`  consumes zero or one arguments\n * - `*` consumes zero or more arguments (and produces a list)\n * - `+` consumes one or more arguments (and produces a list)\n *\n * Note: that the difference between the default and nargs=1 is that with the\n * default, a single value will be produced, while with nargs=1, a list\n * containing a single value will be produced.\n **/\nvar Action = module.exports = function Action(options) {\n  options = options || {};\n  this.optionStrings = options.optionStrings || [];\n  this.dest = options.dest;\n  this.nargs = options.nargs !== undefined ? options.nargs : null;\n  this.constant = options.constant !== undefined ? options.constant : null;\n  this.defaultValue = options.defaultValue;\n  this.type = options.type !== undefined ? options.type : null;\n  this.choices = options.choices !== undefined ? options.choices : null;\n  this.required = options.required !== undefined ? options.required: false;\n  this.help = options.help !== undefined ? options.help : null;\n  this.metavar = options.metavar !== undefined ? options.metavar : null;\n\n  if (!(this.optionStrings instanceof Array)) {\n    throw new Error('optionStrings should be an array');\n  }\n  if (this.required !== undefined && typeof(this.required) !== 'boolean') {\n    throw new Error('required should be a boolean');\n  }\n};\n\n/**\n * Action#getName -> String\n *\n * Tells action name\n **/\nAction.prototype.getName = function () {\n  if (this.optionStrings.length > 0) {\n    return this.optionStrings.join('/');\n  } else if (this.metavar !== null && this.metavar !== $$.SUPPRESS) {\n    return this.metavar;\n  } else if (this.dest !== undefined && this.dest !== $$.SUPPRESS) {\n    return this.dest;\n  }\n  return null;\n};\n\n/**\n * Action#isOptional -> Boolean\n *\n * Return true if optional\n **/\nAction.prototype.isOptional = function () {\n  return !this.isPositional();\n};\n\n/**\n * Action#isPositional -> Boolean\n *\n * Return true if positional\n **/\nAction.prototype.isPositional = function () {\n  return (this.optionStrings.length === 0);\n};\n\n/**\n * Action#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Should be implemented in inherited classes\n *\n * ##### Example\n *\n *      ActionCount.prototype.call = function (parser, namespace, values, optionString) {\n *        namespace.set(this.dest, (namespace[this.dest] || 0) + 1);\n *      };\n *\n **/\nAction.prototype.call = function () {\n  throw new Error('.call() not defined');// Not Implemented error\n};\n"]}