{"version":3,"sources":["argument_parser.js"],"names":[],"mappings":"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","file":"argument_parser-compiled.js","sourcesContent":["/**\n * class ArgumentParser\n *\n * Object for parsing command line strings into js objects.\n *\n * Inherited from [[ActionContainer]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\nvar Path    = require('path');\n\nvar _ = require('underscore');\n_.str = require('underscore.string');\n\n// Constants\nvar $$ = require('./const');\n\nvar ActionContainer = require('./action_container');\n\n// Errors\nvar argumentErrorHelper = require('./argument/error');\n\nvar HelpFormatter = require('./help/formatter');\n\nvar Namespace = require('./namespace');\n\n\n/**\n * new ArgumentParser(options)\n *\n * Create a new ArgumentParser object.\n *\n * ##### Options:\n * - `prog`  The name of the program (default: Path.basename(process.argv[1]))\n * - `usage`  A usage message (default: auto-generated from arguments)\n * - `description`  A description of what the program does\n * - `epilog`  Text following the argument descriptions\n * - `parents`  Parsers whose arguments should be copied into this one\n * - `formatterClass`  HelpFormatter class for printing help messages\n * - `prefixChars`  Characters that prefix optional arguments\n * - `fromfilePrefixChars` Characters that prefix files containing additional arguments\n * - `argumentDefault`  The default value for all arguments\n * - `addHelp`  Add a -h/-help option\n * - `conflictHandler`  Specifies how to handle conflicting argument names\n * - `debug`  Enable debug mode. Argument errors throw exception in\n *   debug mode and process.exit in normal. Used for development and\n *   testing (default: false)\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#argumentparser-objects\n **/\nvar ArgumentParser = module.exports = function ArgumentParser(options) {\n  var self = this;\n  options = options || {};\n\n  options.description = (options.description || null);\n  options.argumentDefault = (options.argumentDefault || null);\n  options.prefixChars = (options.prefixChars || '-');\n  options.conflictHandler = (options.conflictHandler || 'error');\n  ActionContainer.call(this, options);\n\n  options.addHelp = (options.addHelp === undefined || !!options.addHelp);\n  options.parents = (options.parents || []);\n  // default program name\n  options.prog = (options.prog || Path.basename(process.argv[1]));\n  this.prog = options.prog;\n  this.usage = options.usage;\n  this.epilog = options.epilog;\n  this.version = options.version;\n\n  this.debug = (options.debug === true);\n\n  this.formatterClass = (options.formatterClass || HelpFormatter);\n  this.fromfilePrefixChars = options.fromfilePrefixChars || null;\n  this._positionals = this.addArgumentGroup({title: 'Positional arguments'});\n  this._optionals = this.addArgumentGroup({title: 'Optional arguments'});\n  this._subparsers = null;\n\n  // register types\n  var FUNCTION_IDENTITY = function (o) {\n    return o;\n  };\n  this.register('type', 'auto', FUNCTION_IDENTITY);\n  this.register('type', null, FUNCTION_IDENTITY);\n  this.register('type', 'int', function (x) {\n    var result = parseInt(x, 10);\n    if (isNaN(result)) {\n      throw new Error(x + ' is not a valid integer.');\n    }\n    return result;\n  });\n  this.register('type', 'float', function (x) {\n    var result = parseFloat(x);\n    if (isNaN(result)) {\n      throw new Error(x + ' is not a valid float.');\n    }\n    return result;\n  });\n  this.register('type', 'string', function (x) {\n    return '' + x;\n  });\n\n  // add help and version arguments if necessary\n  var defaultPrefix = (this.prefixChars.indexOf('-') > -1) ? '-' : this.prefixChars[0];\n  if (options.addHelp) {\n    this.addArgument(\n      [defaultPrefix + 'h', defaultPrefix + defaultPrefix + 'help'],\n      {\n        action: 'help',\n        defaultValue: $$.SUPPRESS,\n        help: 'Show this help message and exit.'\n      }\n    );\n  }\n  if (this.version !== undefined) {\n    this.addArgument(\n      [defaultPrefix + 'v', defaultPrefix + defaultPrefix + 'version'],\n      {\n        action: 'version',\n        version: this.version,\n        defaultValue: $$.SUPPRESS,\n        help: \"Show program's version number and exit.\"\n      }\n    );\n  }\n\n  // add parent arguments and defaults\n  options.parents.forEach(function (parent) {\n    self._addContainerActions(parent);\n    if (parent._defaults !== undefined) {\n      for (var defaultKey in parent._defaults) {\n        if (parent._defaults.hasOwnProperty(defaultKey)) {\n          self._defaults[defaultKey] = parent._defaults[defaultKey];\n        }\n      }\n    }\n  });\n\n};\nutil.inherits(ArgumentParser, ActionContainer);\n\n/**\n * ArgumentParser#addSubparsers(options) -> [[ActionSubparsers]]\n * - options (object): hash of options see [[ActionSubparsers.new]]\n *\n * See also [subcommands][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#sub-commands\n **/\nArgumentParser.prototype.addSubparsers = function (options) {\n  if (!!this._subparsers) {\n    this.error('Cannot have multiple subparser arguments.');\n  }\n\n  options = options || {};\n  options.debug = (this.debug === true);\n  options.optionStrings = [];\n  options.parserClass = (options.parserClass || ArgumentParser);\n\n\n  if (!!options.title || !!options.description) {\n\n    this._subparsers = this.addArgumentGroup({\n      title: (options.title || 'subcommands'),\n      description: options.description\n    });\n    delete options.title;\n    delete options.description;\n\n  } else {\n    this._subparsers = this._positionals;\n  }\n\n  // prog defaults to the usage message of this parser, skipping\n  // optional arguments and with no \"usage:\" prefix\n  if (!options.prog) {\n    var formatter = this._getFormatter();\n    var positionals = this._getPositionalActions();\n    var groups = this._mutuallyExclusiveGroups;\n    formatter.addUsage(this.usage, positionals, groups, '');\n    options.prog = _.str.strip(formatter.formatHelp());\n  }\n\n  // create the parsers action and add it to the positionals list\n  var ParsersClass = this._popActionClass(options, 'parsers');\n  var action = new ParsersClass(options);\n  this._subparsers._addAction(action);\n\n  // return the created parsers action\n  return action;\n};\n\nArgumentParser.prototype._addAction = function (action) {\n  if (action.isOptional()) {\n    this._optionals._addAction(action);\n  } else {\n    this._positionals._addAction(action);\n  }\n  return action;\n};\n\nArgumentParser.prototype._getOptionalActions = function () {\n  return this._actions.filter(function (action) {\n    return action.isOptional();\n  });\n};\n\nArgumentParser.prototype._getPositionalActions = function () {\n  return this._actions.filter(function (action) {\n    return action.isPositional();\n  });\n};\n\n\n/**\n * ArgumentParser#parseArgs(args, namespace) -> Namespace|Object\n * - args (array): input elements\n * - namespace (Namespace|Object): result object\n *\n * Parsed args and throws error if some arguments are not recognized\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#the-parse-args-method\n **/\nArgumentParser.prototype.parseArgs = function (args, namespace) {\n  var argv;\n  var result = this.parseKnownArgs(args, namespace);\n\n  args = result[0];\n  argv = result[1];\n  if (argv && argv.length > 0) {\n    this.error(\n      format('Unrecognized arguments: %s.', argv.join(' '))\n    );\n  }\n  return args;\n};\n\n/**\n * ArgumentParser#parseKnownArgs(args, namespace) -> array\n * - args (array): input options\n * - namespace (Namespace|Object): result object\n *\n * Parse known arguments and return tuple of result object\n * and unknown args\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#partial-parsing\n **/\nArgumentParser.prototype.parseKnownArgs = function (args, namespace) {\n  var self = this;\n\n  // args default to the system args\n  args = args || process.argv.slice(2);\n\n  // default Namespace built from parser defaults\n  namespace = namespace || new Namespace();\n\n  self._actions.forEach(function (action) {\n    if (action.dest !== $$.SUPPRESS) {\n      if (!_.has(namespace, action.dest)) {\n        if (action.defaultValue !== $$.SUPPRESS) {\n          var defaultValue = action.defaultValue;\n          if (_.isString(action.defaultValue)) {\n            defaultValue = self._getValue(action, defaultValue);\n          }\n          namespace[action.dest] = defaultValue;\n        }\n      }\n    }\n  });\n\n  _.keys(self._defaults).forEach(function (dest) {\n    namespace[dest] = self._defaults[dest];\n  });\n\n  // parse the arguments and exit if there are any errors\n  try {\n    var res = this._parseKnownArgs(args, namespace);\n\n    namespace = res[0];\n    args = res[1];\n    if (_.has(namespace, $$._UNRECOGNIZED_ARGS_ATTR)) {\n      args = _.union(args, namespace[$$._UNRECOGNIZED_ARGS_ATTR]);\n      delete namespace[$$._UNRECOGNIZED_ARGS_ATTR];\n    }\n    return [namespace, args];\n  } catch (e) {\n    this.error(e);\n  }\n};\n\nArgumentParser.prototype._parseKnownArgs = function (argStrings, namespace) {\n  var self = this;\n\n  var extras = [];\n\n  // replace arg strings that are file references\n  if (this.fromfilePrefixChars !== null) {\n    argStrings = this._readArgsFromFiles(argStrings);\n  }\n  // map all mutually exclusive arguments to the other arguments\n  // they can't occur with\n  // Python has 'conflicts = action_conflicts.setdefault(mutex_action, [])'\n  // though I can't conceive of a way in which an action could be a member\n  // of two different mutually exclusive groups.\n\n  function actionHash(action) {\n    // some sort of hashable key for this action\n    // action itself cannot be a key in actionConflicts\n    // I think getName() (join of optionStrings) is unique enough\n    return action.getName();\n  }\n\n  var conflicts, key;\n  var actionConflicts = {};\n\n  this._mutuallyExclusiveGroups.forEach(function (mutexGroup) {\n    mutexGroup._groupActions.forEach(function (mutexAction, i, groupActions) {\n      key = actionHash(mutexAction);\n      if (!_.has(actionConflicts, key)) {\n        actionConflicts[key] = [];\n      }\n      conflicts = actionConflicts[key];\n      conflicts.push.apply(conflicts, groupActions.slice(0, i));\n      conflicts.push.apply(conflicts, groupActions.slice(i + 1));\n    });\n  });\n\n  // find all option indices, and determine the arg_string_pattern\n  // which has an 'O' if there is an option at an index,\n  // an 'A' if there is an argument, or a '-' if there is a '--'\n  var optionStringIndices = {};\n\n  var argStringPatternParts = [];\n\n  argStrings.forEach(function (argString, argStringIndex) {\n    if (argString === '--') {\n      argStringPatternParts.push('-');\n      while (argStringIndex < argStrings.length) {\n        argStringPatternParts.push('A');\n        argStringIndex++;\n      }\n    }\n    // otherwise, add the arg to the arg strings\n    // and note the index if it was an option\n    else {\n      var pattern;\n      var optionTuple = self._parseOptional(argString);\n      if (!optionTuple) {\n        pattern = 'A';\n      }\n      else {\n        optionStringIndices[argStringIndex] = optionTuple;\n        pattern = 'O';\n      }\n      argStringPatternParts.push(pattern);\n    }\n  });\n  var argStringsPattern = argStringPatternParts.join('');\n\n  var seenActions = [];\n  var seenNonDefaultActions = [];\n\n\n  function takeAction(action, argumentStrings, optionString) {\n    seenActions.push(action);\n    var argumentValues = self._getValues(action, argumentStrings);\n\n    // error if this argument is not allowed with other previously\n    // seen arguments, assuming that actions that use the default\n    // value don't really count as \"present\"\n    if (argumentValues !== action.defaultValue) {\n      seenNonDefaultActions.push(action);\n      if (!!actionConflicts[actionHash(action)]) {\n        actionConflicts[actionHash(action)].forEach(function (actionConflict) {\n          if (seenNonDefaultActions.indexOf(actionConflict) >= 0) {\n            throw argumentErrorHelper(\n              action,\n              format('Not allowed with argument \"%s\".', actionConflict.getName())\n            );\n          }\n        });\n      }\n    }\n\n    if (argumentValues !== $$.SUPPRESS) {\n      action.call(self, namespace, argumentValues, optionString);\n    }\n  }\n\n  function consumeOptional(startIndex) {\n    // get the optional identified at this index\n    var optionTuple = optionStringIndices[startIndex];\n    var action = optionTuple[0];\n    var optionString = optionTuple[1];\n    var explicitArg = optionTuple[2];\n\n    // identify additional optionals in the same arg string\n    // (e.g. -xyz is the same as -x -y -z if no args are required)\n    var actionTuples = [];\n\n    var args, argCount, start, stop;\n\n    while (true) {\n      if (!action) {\n        extras.push(argStrings[startIndex]);\n        return startIndex + 1;\n      }\n      if (!!explicitArg) {\n        argCount = self._matchArgument(action, 'A');\n\n        // if the action is a single-dash option and takes no\n        // arguments, try to parse more single-dash options out\n        // of the tail of the option string\n        var chars = self.prefixChars;\n        if (argCount === 0 && chars.indexOf(optionString[1]) < 0) {\n          actionTuples.push([action, [], optionString]);\n          optionString = optionString[0] + explicitArg[0];\n          var newExplicitArg = explicitArg.slice(1) || null;\n          var optionalsMap = self._optionStringActions;\n\n          if (_.keys(optionalsMap).indexOf(optionString) >= 0) {\n            action = optionalsMap[optionString];\n            explicitArg = newExplicitArg;\n          }\n          else {\n            var msg = 'ignored explicit argument %r';\n            throw argumentErrorHelper(action, msg);\n          }\n        }\n        // if the action expect exactly one argument, we've\n        // successfully matched the option; exit the loop\n        else if (argCount === 1) {\n          stop = startIndex + 1;\n          args = [explicitArg];\n          actionTuples.push([action, args, optionString]);\n          break;\n        }\n        // error if a double-dash option did not use the\n        // explicit argument\n        else {\n          var message = 'ignored explicit argument %r';\n          throw argumentErrorHelper(action, _.str.sprintf(message, explicitArg));\n        }\n      }\n      // if there is no explicit argument, try to match the\n      // optional's string arguments with the following strings\n      // if successful, exit the loop\n      else {\n\n        start = startIndex + 1;\n        var selectedPatterns = argStringsPattern.substr(start);\n\n        argCount = self._matchArgument(action, selectedPatterns);\n        stop = start + argCount;\n\n\n        args = argStrings.slice(start, stop);\n\n        actionTuples.push([action, args, optionString]);\n        break;\n      }\n\n    }\n\n    // add the Optional to the list and return the index at which\n    // the Optional's string args stopped\n    if (actionTuples.length < 1) {\n      throw new Error('length should be > 0');\n    }\n    for (var i = 0; i < actionTuples.length; i++) {\n      takeAction.apply(self, actionTuples[i]);\n    }\n    return stop;\n  }\n\n  // the list of Positionals left to be parsed; this is modified\n  // by consume_positionals()\n  var positionals = self._getPositionalActions();\n\n  function consumePositionals(startIndex) {\n    // match as many Positionals as possible\n    var selectedPattern = argStringsPattern.substr(startIndex);\n    var argCounts = self._matchArgumentsPartial(positionals, selectedPattern);\n\n    // slice off the appropriate arg strings for each Positional\n    // and add the Positional and its args to the list\n    _.zip(positionals, argCounts).forEach(function (item) {\n        var action = item[0];\n        var argCount = item[1];\n        if (argCount === undefined) {\n          return;\n        }\n        var args = argStrings.slice(startIndex, startIndex + argCount);\n\n        startIndex += argCount;\n        takeAction(action, args);\n      });\n\n    // slice off the Positionals that we just parsed and return the\n    // index at which the Positionals' string args stopped\n    positionals = positionals.slice(argCounts.length);\n    return startIndex;\n  }\n\n  // consume Positionals and Optionals alternately, until we have\n  // passed the last option string\n  var startIndex = 0;\n  var position;\n\n  var maxOptionStringIndex = -1;\n\n  Object.keys(optionStringIndices).forEach(function (position) {\n    maxOptionStringIndex = Math.max(maxOptionStringIndex, parseInt(position, 10));\n  });\n\n  var positionalsEndIndex, nextOptionStringIndex;\n\n  while (startIndex <= maxOptionStringIndex) {\n    // consume any Positionals preceding the next option\n    nextOptionStringIndex = null;\n    for (position in optionStringIndices) {\n      if (!optionStringIndices.hasOwnProperty(position)) { continue; }\n\n      position = parseInt(position, 10);\n      if (position >= startIndex) {\n        if (nextOptionStringIndex !== null) {\n          nextOptionStringIndex = Math.min(nextOptionStringIndex, position);\n        }\n        else {\n          nextOptionStringIndex = position;\n        }\n      }\n    }\n\n    if (startIndex !== nextOptionStringIndex) {\n      positionalsEndIndex = consumePositionals(startIndex);\n      // only try to parse the next optional if we didn't consume\n      // the option string during the positionals parsing\n      if (positionalsEndIndex > startIndex) {\n        startIndex = positionalsEndIndex;\n        continue;\n      }\n      else {\n        startIndex = positionalsEndIndex;\n      }\n    }\n\n    // if we consumed all the positionals we could and we're not\n    // at the index of an option string, there were extra arguments\n    if (!optionStringIndices[startIndex]) {\n      var strings = argStrings.slice(startIndex, nextOptionStringIndex);\n      extras = extras.concat(strings);\n      startIndex = nextOptionStringIndex;\n    }\n    // consume the next optional and any arguments for it\n    startIndex = consumeOptional(startIndex);\n  }\n\n  // consume any positionals following the last Optional\n  var stopIndex = consumePositionals(startIndex);\n\n  // if we didn't consume all the argument strings, there were extras\n  extras = extras.concat(_.rest(argStrings, stopIndex));\n\n  // if we didn't use all the Positional objects, there were too few\n  // arg strings supplied.\n  if (positionals.length > 0) {\n    self.error('too few arguments');\n  }\n\n  // make sure all required actions were present\n  self._actions.forEach(function (action) {\n    if (action.required) {\n      if (_.indexOf(seenActions, action) < 0) {\n        self.error(format('Argument \"%s\" is required', action.getName()));\n      }\n    }\n  });\n\n  // make sure all required groups have one option present\n  var actionUsed = false;\n  self._mutuallyExclusiveGroups.forEach(function (group) {\n    if (group.required) {\n      actionUsed = _.any(group._groupActions, function (action) {\n        return _.contains(seenNonDefaultActions, action);\n      });\n\n      // if no actions were used, report the error\n      if (!actionUsed) {\n        var names = [];\n        group._groupActions.forEach(function (action) {\n          if (action.help !== $$.SUPPRESS) {\n            names.push(action.getName());\n          }\n        });\n        names = names.join(' ');\n        var msg = 'one of the arguments ' + names + ' is required';\n        self.error(msg);\n      }\n    }\n  });\n\n  // return the updated namespace and the extra arguments\n  return [namespace, extras];\n};\n\nArgumentParser.prototype._readArgsFromFiles = function (argStrings) {\n  // expand arguments referencing files\n  var _this = this;\n  var fs = require('fs');\n  var newArgStrings = [];\n  argStrings.forEach(function (argString) {\n    if (_this.fromfilePrefixChars.indexOf(argString[0]) < 0) {\n      // for regular arguments, just add them back into the list\n      newArgStrings.push(argString);\n    } else {\n      // replace arguments referencing files with the file content\n      try {\n        var argstrs = [];\n        var filename = argString.slice(1);\n        var content = fs.readFileSync(filename, 'utf8');\n        content = content.trim().split('\\n');\n        content.forEach(function (argLine) {\n          _this.convertArgLineToArgs(argLine).forEach(function (arg) {\n            argstrs.push(arg);\n          });\n          argstrs = _this._readArgsFromFiles(argstrs);\n        });\n        newArgStrings.push.apply(newArgStrings, argstrs);\n      } catch (error) {\n        return _this.error(error.message);\n      }\n    }\n  });\n  return newArgStrings;\n};\n\nArgumentParser.prototype.convertArgLineToArgs = function (argLine) {\n  return [argLine];\n};\n\nArgumentParser.prototype._matchArgument = function (action, regexpArgStrings) {\n\n  // match the pattern for this action to the arg strings\n  var regexpNargs = new RegExp('^' + this._getNargsPattern(action));\n  var matches = regexpArgStrings.match(regexpNargs);\n  var message;\n\n  // throw an exception if we weren't able to find a match\n  if (!matches) {\n    switch (action.nargs) {\n    case undefined:\n    case null:\n      message = 'Expected one argument.';\n      break;\n    case $$.OPTIONAL:\n      message = 'Expected at most one argument.';\n      break;\n    case $$.ONE_OR_MORE:\n      message = 'Expected at least one argument.';\n      break;\n    default:\n      message = 'Expected %s argument(s)';\n    }\n\n    throw argumentErrorHelper(\n      action,\n      format(message, action.nargs)\n    );\n  }\n  // return the number of arguments matched\n  return matches[1].length;\n};\n\nArgumentParser.prototype._matchArgumentsPartial = function (actions, regexpArgStrings) {\n  // progressively shorten the actions list by slicing off the\n  // final actions until we find a match\n  var self = this;\n  var result = [];\n  var actionSlice, pattern, matches;\n  var i, j;\n\n  var getLength = function (string) {\n    return string.length;\n  };\n\n  for (i = actions.length; i > 0; i--) {\n    pattern = '';\n    actionSlice = actions.slice(0, i);\n    for (j = 0; j < actionSlice.length; j++) {\n      pattern += self._getNargsPattern(actionSlice[j]);\n    }\n\n    pattern = new RegExp('^' + pattern);\n    matches = regexpArgStrings.match(pattern);\n\n    if (matches && matches.length > 0) {\n      // need only groups\n      matches = matches.splice(1);\n      result = result.concat(matches.map(getLength));\n      break;\n    }\n  }\n\n  // return the list of arg string counts\n  return result;\n};\n\nArgumentParser.prototype._parseOptional = function (argString) {\n  var action, optionString, argExplicit, optionTuples;\n\n  // if it's an empty string, it was meant to be a positional\n  if (!argString) {\n    return null;\n  }\n\n  // if it doesn't start with a prefix, it was meant to be positional\n  if (this.prefixChars.indexOf(argString[0]) < 0) {\n    return null;\n  }\n\n  // if the option string is present in the parser, return the action\n  if (!!this._optionStringActions[argString]) {\n    return [this._optionStringActions[argString], argString, null];\n  }\n\n  // if it's just a single character, it was meant to be positional\n  if (argString.length === 1) {\n    return null;\n  }\n\n  // if the option string before the \"=\" is present, return the action\n  if (argString.indexOf('=') >= 0) {\n    var argStringSplit = argString.split('=');\n    optionString = argStringSplit[0];\n    argExplicit = argStringSplit[1];\n\n    if (!!this._optionStringActions[optionString]) {\n      action = this._optionStringActions[optionString];\n      return [action, optionString, argExplicit];\n    }\n  }\n\n  // search through all possible prefixes of the option string\n  // and all actions in the parser for possible interpretations\n  optionTuples = this._getOptionTuples(argString);\n\n  // if multiple actions match, the option string was ambiguous\n  if (optionTuples.length > 1) {\n    var optionStrings = optionTuples.map(function (optionTuple) {\n      return optionTuple[1];\n    });\n    this.error(format(\n          'Ambiguous option: \"%s\" could match %s.',\n          argString, optionStrings.join(', ')\n    ));\n  // if exactly one action matched, this segmentation is good,\n  // so return the parsed action\n  } else if (optionTuples.length === 1) {\n    return optionTuples[0];\n  }\n\n  // if it was not found as an option, but it looks like a negative\n  // number, it was meant to be positional\n  // unless there are negative-number-like options\n  if (argString.match(this._regexpNegativeNumber)) {\n    if (!_.any(this._hasNegativeNumberOptionals)) {\n      return null;\n    }\n  }\n  // if it contains a space, it was meant to be a positional\n  if (argString.search(' ') >= 0) {\n    return null;\n  }\n\n  // it was meant to be an optional but there is no such option\n  // in this parser (though it might be a valid option in a subparser)\n  return [null, argString, null];\n};\n\nArgumentParser.prototype._getOptionTuples = function (optionString) {\n  var result = [];\n  var chars = this.prefixChars;\n  var optionPrefix;\n  var argExplicit;\n  var action;\n  var actionOptionString;\n\n  // option strings starting with two prefix characters are only split at\n  // the '='\n  if (chars.indexOf(optionString[0]) >= 0 && chars.indexOf(optionString[1]) >= 0) {\n    if (optionString.indexOf('=') >= 0) {\n      var optionStringSplit = optionString.split('=', 1);\n\n      optionPrefix = optionStringSplit[0];\n      argExplicit = optionStringSplit[1];\n    } else {\n      optionPrefix = optionString;\n      argExplicit = null;\n    }\n\n    for (actionOptionString in this._optionStringActions) {\n      if (actionOptionString.substr(0, optionPrefix.length) === optionPrefix) {\n        action = this._optionStringActions[actionOptionString];\n        result.push([action, actionOptionString, argExplicit]);\n      }\n    }\n\n  // single character options can be concatenated with their arguments\n  // but multiple character options always have to have their argument\n  // separate\n  } else if (chars.indexOf(optionString[0]) >= 0 && chars.indexOf(optionString[1]) < 0) {\n    optionPrefix = optionString;\n    argExplicit = null;\n    var optionPrefixShort = optionString.substr(0, 2);\n    var argExplicitShort = optionString.substr(2);\n\n    for (actionOptionString in this._optionStringActions) {\n      action = this._optionStringActions[actionOptionString];\n      if (actionOptionString === optionPrefixShort) {\n        result.push([action, actionOptionString, argExplicitShort]);\n      } else if (actionOptionString.substr(0, optionPrefix.length) === optionPrefix) {\n        result.push([action, actionOptionString, argExplicit]);\n      }\n    }\n\n  // shouldn't ever get here\n  } else {\n    throw new Error(format('Unexpected option string: %s.', optionString));\n  }\n  // return the collected option tuples\n  return result;\n};\n\nArgumentParser.prototype._getNargsPattern = function (action) {\n  // in all examples below, we have to allow for '--' args\n  // which are represented as '-' in the pattern\n  var regexpNargs;\n\n  switch (action.nargs) {\n  // the default (null) is assumed to be a single argument\n  case undefined:\n  case null:\n    regexpNargs = '(-*A-*)';\n    break;\n  // allow zero or more arguments\n  case $$.OPTIONAL:\n    regexpNargs = '(-*A?-*)';\n    break;\n  // allow zero or more arguments\n  case $$.ZERO_OR_MORE:\n    regexpNargs = '(-*[A-]*)';\n    break;\n  // allow one or more arguments\n  case $$.ONE_OR_MORE:\n    regexpNargs = '(-*A[A-]*)';\n    break;\n  // allow any number of options or arguments\n  case $$.REMAINDER:\n    regexpNargs = '([-AO]*)';\n    break;\n  // allow one argument followed by any number of options or arguments\n  case $$.PARSER:\n    regexpNargs = '(-*A[-AO]*)';\n    break;\n  // all others should be integers\n  default:\n    regexpNargs = '(-*' + _.str.repeat('-*A', action.nargs) + '-*)';\n  }\n\n  // if this is an optional action, -- is not allowed\n  if (action.isOptional()) {\n    regexpNargs = regexpNargs.replace(/-\\*/g, '');\n    regexpNargs = regexpNargs.replace(/-/g, '');\n  }\n\n  // return the pattern\n  return regexpNargs;\n};\n\n//\n// Value conversion methods\n//\n\nArgumentParser.prototype._getValues = function (action, argStrings) {\n  var self = this;\n\n  // for everything but PARSER args, strip out '--'\n  if (action.nargs !== $$.PARSER && action.nargs !== $$.REMAINDER) {\n    argStrings = argStrings.filter(function (arrayElement) {\n      return arrayElement !== '--';\n    });\n  }\n\n  var value, argString;\n\n  // optional argument produces a default when not present\n  if (argStrings.length === 0 && action.nargs === $$.OPTIONAL) {\n\n    value = (action.isOptional()) ? action.constant: action.defaultValue;\n\n    if (typeof(value) === 'string') {\n      value = this._getValue(action, value);\n      this._checkValue(action, value);\n    }\n\n  // when nargs='*' on a positional, if there were no command-line\n  // args, use the default if it is anything other than None\n  } else if (argStrings.length === 0 && action.nargs === $$.ZERO_OR_MORE &&\n    action.optionStrings.length === 0) {\n\n    value = (action.defaultValue || argStrings);\n    this._checkValue(action, value);\n\n  // single argument or optional argument produces a single value\n  } else if (argStrings.length === 1 &&\n        (!action.nargs || action.nargs === $$.OPTIONAL)) {\n\n    argString = argStrings[0];\n    value = this._getValue(action, argString);\n    this._checkValue(action, value);\n\n  // REMAINDER arguments convert all values, checking none\n  } else if (action.nargs === $$.REMAINDER) {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n\n  // PARSER arguments convert all values, but check only the first\n  } else if (action.nargs === $$.PARSER) {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n    this._checkValue(action, value[0]);\n\n  // all other types of nargs produce a list\n  } else {\n    value = argStrings.map(function (v) {\n      return self._getValue(action, v);\n    });\n    value.forEach(function (v) {\n      self._checkValue(action, v);\n    });\n  }\n\n  // return the converted value\n  return value;\n};\n\nArgumentParser.prototype._getValue = function (action, argString) {\n  var result;\n\n  var typeFunction = this._registryGet('type', action.type, action.type);\n  if (!_.isFunction(typeFunction)) {\n    var message = format('%s is not callable', typeFunction);\n    throw argumentErrorHelper(action, message);\n  }\n\n  // convert the value to the appropriate type\n  try {\n    result = typeFunction(argString);\n\n    // ArgumentTypeErrors indicate errors\n    // If action.type is not a registered string, it is a function\n    // Try to deduce its name for inclusion in the error message\n    // Failing that, include the error message it raised.\n  } catch (e) {\n    var name = null;\n    if (_.isString(action.type)) {\n      name = action.type;\n    } else {\n      name = action.type.name || action.type.displayName || '<function>';\n    }\n    var msg = format('Invalid %s value: %s', name, argString);\n    if (name === '<function>') {msg += '\\n' + e.message; }\n    throw argumentErrorHelper(action, msg);\n  }\n  // return the converted value\n  return result;\n};\n\nArgumentParser.prototype._checkValue = function (action, value) {\n  // converted value must be one of the choices (if specified)\n  var choices = action.choices;\n  if (!!choices) {\n    // choise for argument can by array or string\n    if ((_.isString(choices) || _.isArray(choices)) &&\n        choices.indexOf(value) !== -1) {\n      return;\n    }\n    // choise for subparsers can by only hash\n    if (_.isObject(choices) && !_.isArray(choices) && choices[value]) {\n      return;\n    }\n\n    if (_.isString(choices)) {\n      choices = choices.split('').join(', ');\n    }\n    else if (_.isArray(choices)) {\n      choices =  choices.join(', ');\n    }\n    else {\n      choices =  _.keys(choices).join(', ');\n    }\n    var message = format('Invalid choice: %s (choose from [%s])', value, choices);\n    throw argumentErrorHelper(action, message);\n  }\n};\n\n//\n// Help formatting methods\n//\n\n/**\n * ArgumentParser#formatUsage -> string\n *\n * Return usage string\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.formatUsage = function () {\n  var formatter = this._getFormatter();\n  formatter.addUsage(this.usage, this._actions, this._mutuallyExclusiveGroups);\n  return formatter.formatHelp();\n};\n\n/**\n * ArgumentParser#formatHelp -> string\n *\n * Return help\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.formatHelp = function () {\n  var formatter = this._getFormatter();\n\n  // usage\n  formatter.addUsage(this.usage, this._actions, this._mutuallyExclusiveGroups);\n\n  // description\n  formatter.addText(this.description);\n\n  // positionals, optionals and user-defined groups\n  this._actionGroups.forEach(function (actionGroup) {\n    formatter.startSection(actionGroup.title);\n    formatter.addText(actionGroup.description);\n    formatter.addArguments(actionGroup._groupActions);\n    formatter.endSection();\n  });\n\n  // epilog\n  formatter.addText(this.epilog);\n\n  // determine help from format above\n  return formatter.formatHelp();\n};\n\nArgumentParser.prototype._getFormatter = function () {\n  var FormatterClass = this.formatterClass;\n  var formatter = new FormatterClass({prog: this.prog});\n  return formatter;\n};\n\n//\n//  Print functions\n//\n\n/**\n * ArgumentParser#printUsage() -> Void\n *\n * Print usage\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.printUsage = function () {\n  this._printMessage(this.formatUsage());\n};\n\n/**\n * ArgumentParser#printHelp() -> Void\n *\n * Print help\n *\n * See also [original guide][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#printing-help\n **/\nArgumentParser.prototype.printHelp = function () {\n  this._printMessage(this.formatHelp());\n};\n\nArgumentParser.prototype._printMessage = function (message, stream) {\n  if (!stream) {\n    stream = process.stdout;\n  }\n  if (message) {\n    stream.write('' + message);\n  }\n};\n\n//\n//  Exit functions\n//\n\n/**\n * ArgumentParser#exit(status=0, message) -> Void\n * - status (int): exit status\n * - message (string): message\n *\n * Print message in stderr/stdout and exit program\n **/\nArgumentParser.prototype.exit = function (status, message) {\n  if (!!message) {\n    if (status === 0) {\n      this._printMessage(message);\n    }\n    else {\n      this._printMessage(message, process.stderr);\n    }\n  }\n\n  process.exit(status);\n};\n\n/**\n * ArgumentParser#error(message) -> Void\n * - err (Error|string): message\n *\n * Error method Prints a usage message incorporating the message to stderr and\n * exits. If you override this in a subclass,\n * it should not return -- it should\n * either exit or throw an exception.\n *\n **/\nArgumentParser.prototype.error = function (err) {\n  var message;\n  if (err instanceof Error) {\n    if (this.debug === true) {\n      throw err;\n    }\n    message = err.message;\n  }\n  else {\n    message = err;\n  }\n  var msg = format('%s: error: %s', this.prog, message) + $$.EOL;\n\n  if (this.debug === true) {\n    throw new Error(msg);\n  }\n\n  this.printUsage(process.stderr);\n\n  return this.exit(2, msg);\n};\n"]}