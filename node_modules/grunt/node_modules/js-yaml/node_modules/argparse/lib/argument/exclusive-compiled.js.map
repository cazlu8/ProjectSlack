{"version":3,"sources":["exclusive.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;AAUvC,IAAI,sBAAsB,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,sBAAsB,CAAC,SAAS,EAAE,OAAO,EAAE;AAChG,MAAI,QAAQ,CAAC;AACb,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,UAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC;AACrC,eAAa,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACpC,MAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;CAE1B,CAAC;AACF,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;;AAGrD,sBAAsB,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,MAAM,EAAE;AAC9D,MAAI,GAAG,CAAC;AACR,MAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,OAAG,GAAG,+CAA+C,CAAC;AACtD,UAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;GACtB;AACD,QAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC5C,MAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAChC,SAAO,MAAM,CAAC;CACf,CAAC;;AAGF,sBAAsB,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,MAAM,EAAE;AACjE,MAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACtC,MAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;CACnC,CAAC","file":"exclusive-compiled.js","sourcesContent":["/** internal\n * class MutuallyExclusiveGroup\n *\n * Group arguments.\n * By default, ArgumentParser groups command-line arguments\n * into “positional arguments” and “optional arguments”\n * when displaying help messages. When there is a better\n * conceptual grouping of arguments than this default one,\n * appropriate groups can be created using the addArgumentGroup() method\n *\n * This class inherited from [[ArgumentContainer]]\n **/\n'use strict';\n\nvar util = require('util');\n\nvar ArgumentGroup = require('./group');\n\n/**\n * new MutuallyExclusiveGroup(container, options)\n * - container (object): main container\n * - options (object): options.required -> true/false\n *\n * `required` could be an argument itself, but making it a property of\n * the options argument is more consistent with the JS adaptation of the Python)\n **/\nvar MutuallyExclusiveGroup = module.exports = function MutuallyExclusiveGroup(container, options) {\n  var required;\n  options = options || {};\n  required = options.required || false;\n  ArgumentGroup.call(this, container);\n  this.required = required;\n\n};\nutil.inherits(MutuallyExclusiveGroup, ArgumentGroup);\n\n\nMutuallyExclusiveGroup.prototype._addAction = function (action) {\n  var msg;\n  if (action.required) {\n    msg = 'mutually exclusive arguments must be optional';\n    throw new Error(msg);\n  }\n  action = this._container._addAction(action);\n  this._groupActions.push(action);\n  return action;\n};\n\n\nMutuallyExclusiveGroup.prototype._removeAction = function (action) {\n  this._container._removeAction(action);\n  this._groupActions.remove(action);\n};\n\n"]}