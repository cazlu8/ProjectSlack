{"version":3,"sources":["added_formatters.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,IAAI,GAAM,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9B,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;;AAGrC,IAAI,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAE7B,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;;;;;;;;;;;AAY9C,IAAI,6BAA6B,GAAG,SAAS,6BAA6B,CAAC,OAAO,EAAE;AAClF,eAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACnC,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,6BAA6B,EAAE,aAAa,CAAC,CAAC;;AAE5D,6BAA6B,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU,MAAM,EAAE;AACzE,MAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,MAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;AAClD,QAAI,MAAM,CAAC,YAAY,KAAK,EAAE,CAAC,QAAQ,EAAE;AACvC,UAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;AACtD,UAAI,MAAM,CAAC,UAAU,EAAE,IAAK,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,EAAE;AACxE,YAAI,IAAI,8BAA8B,CAAC;OACxC;KACF;GACF;AACD,SAAO,IAAI,CAAC;CACb,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;;;;;;;;;;;;AAY7E,IAAI,2BAA2B,GAAG,SAAS,2BAA2B,CAAC,OAAO,EAAE;AAC9E,eAAa,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACnC,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC;;AAE1D,2BAA2B,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE;AAC/E,MAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7B,OAAK,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE;AAC9B,WAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;GACnC,CAAC,CAAC;AACL,SAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACzB,CAAC;AACF,MAAM,CAAC,OAAO,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;;;;;;;;;;;;AAYzE,IAAI,oBAAoB,GAAG,SAAS,oBAAoB,CAAC,OAAO,EAAE;AAChE,6BAA2B,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CACjD,CAAC;;AAEF,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,2BAA2B,CAAC,CAAC;;AAEjE,oBAAoB,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,IAAI,EAAE;AAC3D,SAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CACzB,CAAC;;AAEF,MAAM,CAAC,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC","file":"added_formatters-compiled.js","sourcesContent":["'use strict';\n\nvar util    = require('util');\nvar _ = require('underscore');\n_.str = require('underscore.string');\n\n// Constants\nvar $$ = require('../const');\n\nvar HelpFormatter = require('./formatter.js');\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which adds default values to argument help.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nvar ArgumentDefaultsHelpFormatter = function ArgumentDefaultsHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n};\n\nutil.inherits(ArgumentDefaultsHelpFormatter, HelpFormatter);\n\nArgumentDefaultsHelpFormatter.prototype._getHelpString = function (action) {\n  var help = action.help;\n  if (action.help.indexOf('%(defaultValue)s') === -1) {\n    if (action.defaultValue !== $$.SUPPRESS) {\n      var defaulting_nargs = [$$.OPTIONAL, $$.ZERO_OR_MORE];\n      if (action.isOptional() || (defaulting_nargs.indexOf(action.nargs) >= 0)) {\n        help += ' (default: %(defaultValue)s)';\n      }\n    }\n  }\n  return help;\n};\n\nmodule.exports.ArgumentDefaultsHelpFormatter = ArgumentDefaultsHelpFormatter;\n\n/**\n * new RawDescriptionHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawDescriptionHelpFormatter, ...})\n *\n * Help message formatter which retains any formatting in descriptions.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nvar RawDescriptionHelpFormatter = function RawDescriptionHelpFormatter(options) {\n  HelpFormatter.call(this, options);\n};\n\nutil.inherits(RawDescriptionHelpFormatter, HelpFormatter);\n\nRawDescriptionHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = text.split('\\n');\n  lines = lines.map(function (line) {\n      return _.str.rtrim(indent + line);\n    });\n  return lines.join('\\n');\n};\nmodule.exports.RawDescriptionHelpFormatter = RawDescriptionHelpFormatter;\n\n/**\n * new RawTextHelpFormatter(options)\n * new ArgumentParser({formatterClass: argparse.RawTextHelpFormatter, ...})\n *\n * Help message formatter which retains formatting of all help text.\n *\n * Only the name of this class is considered a public API. All the methods\n * provided by the class are considered an implementation detail.\n **/\n\nvar RawTextHelpFormatter = function RawTextHelpFormatter(options) {\n  RawDescriptionHelpFormatter.call(this, options);\n};\n\nutil.inherits(RawTextHelpFormatter, RawDescriptionHelpFormatter);\n\nRawTextHelpFormatter.prototype._splitLines = function (text) {\n  return text.split('\\n');\n};\n\nmodule.exports.RawTextHelpFormatter = RawTextHelpFormatter;\n"]}