{"version":3,"sources":["formatter.js"],"names":[],"mappings":"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","file":"formatter-compiled.js","sourcesContent":["/**\n * class HelpFormatter\n *\n * Formatter for generating usage messages and argument help strings. Only the\n * name of this class is considered a public API. All the methods provided by\n * the class are considered an implementation detail.\n *\n * Do not call in your code, use this class only for inherits your own forvatter\n *\n * ToDo add [additonal formatters][1]\n *\n * [1]:http://docs.python.org/dev/library/argparse.html#formatter-class\n **/\n'use strict';\n\nvar _ = require('underscore');\n_.str = require('underscore.string');\n\n// Constants\nvar $$ = require('../const');\n\n\n/*:nodoc:* internal\n * new Support(parent, heding)\n * - parent (object): parent section\n * - heading (string): header string\n *\n **/\nfunction Section(parent, heading) {\n  this._parent = parent;\n  this._heading = heading;\n  this._items = [];\n}\n\n/*:nodoc:* internal\n * Section#addItem(callback) -> Void\n * - callback (array): tuple with function and args\n *\n * Add function for single element\n **/\nSection.prototype.addItem = function (callback) {\n  this._items.push(callback);\n};\n\n/*:nodoc:* internal\n * Section#formatHelp(formatter) -> string\n * - formatter (HelpFormatter): current formatter\n *\n * Form help section string\n *\n **/\nSection.prototype.formatHelp = function (formatter) {\n  var itemHelp, heading;\n\n  // format the indented section\n  if (!!this._parent) {\n    formatter._indent();\n  }\n\n  itemHelp = this._items.map(function (item) {\n    var obj, func, args;\n\n    obj = formatter;\n    func = item[0];\n    args = item[1];\n    return func.apply(obj, args);\n  });\n  itemHelp = formatter._joinParts(itemHelp);\n\n  if (!!this._parent) {\n    formatter._dedent();\n  }\n\n  // return nothing if the section was empty\n  if (!itemHelp) {\n    return '';\n  }\n\n  // add the heading if the section was non-empty\n  heading = '';\n  if (!!this._heading && this._heading !== $$.SUPPRESS) {\n    var currentIndent = formatter.currentIndent;\n    heading = _.str.repeat(' ', currentIndent) + this._heading + ':' + $$.EOL;\n  }\n\n  // join the section-initialize newline, the heading and the help\n  return formatter._joinParts([$$.EOL, heading, itemHelp, $$.EOL]);\n};\n\n/**\n * new HelpFormatter(options)\n *\n * #### Options:\n * - `prog`: program name\n * - `indentIncriment`: indent step, default value 2\n * - `maxHelpPosition`: max help position, default value = 24\n * - `width`: line width\n *\n **/\nvar HelpFormatter = module.exports = function HelpFormatter(options) {\n  options = options || {};\n\n  this._prog = options.prog;\n\n  this._maxHelpPosition = options.maxHelpPosition || 24;\n  this._width = (options.width || ((process.env.COLUMNS || 80) - 2));\n\n  this._currentIndent = 0;\n  this._indentIncriment = options.indentIncriment || 2;\n  this._level = 0;\n  this._actionMaxLength = 0;\n\n  this._rootSection = new Section(null);\n  this._currentSection = this._rootSection;\n\n  this._whitespaceMatcher = new RegExp('\\\\s+', 'g');\n  this._longBreakMatcher = new RegExp($$.EOL + $$.EOL + $$.EOL + '+', 'g');\n};\n\nHelpFormatter.prototype._indent = function () {\n  this._currentIndent += this._indentIncriment;\n  this._level += 1;\n};\n\nHelpFormatter.prototype._dedent = function () {\n  this._currentIndent -= this._indentIncriment;\n  this._level -= 1;\n  if (this._currentIndent < 0) {\n    throw new Error('Indent decreased below 0.');\n  }\n};\n\nHelpFormatter.prototype._addItem = function (func, args) {\n  this._currentSection.addItem([func, args]);\n};\n\n//\n// Message building methods\n//\n\n/**\n * HelpFormatter#startSection(heading) -> Void\n * - heading (string): header string\n *\n * Start new help section\n *\n * See alse [code example][1]\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.startSection = function (heading) {\n  this._indent();\n  var section = new Section(this._currentSection, heading);\n  var func = section.formatHelp.bind(section);\n  this._addItem(func, [this]);\n  this._currentSection = section;\n};\n\n/**\n * HelpFormatter#endSection -> Void\n *\n * End help section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n **/\nHelpFormatter.prototype.endSection = function () {\n  this._currentSection = this._currentSection._parent;\n  this._dedent();\n};\n\n/**\n * HelpFormatter#addText(text) -> Void\n * - text (string): plain text\n *\n * Add plain text into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addText = function (text) {\n  if (!!text && text !== $$.SUPPRESS) {\n    this._addItem(this._formatText, [text]);\n  }\n};\n\n/**\n * HelpFormatter#addUsage(usage, actions, groups, prefix) -> Void\n * - usage (string): usage text\n * - actions (array): actions list\n * - groups (array): groups list\n * - prefix (string): usage prefix\n *\n * Add usage data into current section\n *\n * ##### Example\n *\n *      formatter.addUsage(this.usage, this._actions, []);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.addUsage = function (usage, actions, groups, prefix) {\n  if (usage !== $$.SUPPRESS) {\n    this._addItem(this._formatUsage, [usage, actions, groups, prefix]);\n  }\n};\n\n/**\n * HelpFormatter#addArgument(action) -> Void\n * - action (object): action\n *\n * Add argument into current section\n *\n * Single variant of [[HelpFormatter#addArguments]]\n **/\nHelpFormatter.prototype.addArgument = function (action) {\n  if (action.help !== $$.SUPPRESS) {\n    var self = this;\n\n    // find all invocations\n    var invocations = [this._formatActionInvocation(action)];\n    var invocationLength = invocations[0].length;\n\n    var actionLength;\n\n    if (!!action._getSubactions) {\n      this._indent();\n      action._getSubactions().forEach(function (subaction) {\n\n        var invocationNew = self._formatActionInvocation(subaction);\n        invocations.push(invocationNew);\n        invocationLength = Math.max(invocationLength, invocationNew.length);\n\n      });\n      this._dedent();\n    }\n\n    // update the maximum item length\n    actionLength = invocationLength + this._currentIndent;\n    this._actionMaxLength = Math.max(this._actionMaxLength, actionLength);\n\n    // add the item to the list\n    this._addItem(this._formatAction, [action]);\n  }\n};\n\n/**\n * HelpFormatter#addArguments(actions) -> Void\n * - actions (array): actions list\n *\n * Mass add arguments into current section\n *\n * ##### Example\n *\n *      formatter.startSection(actionGroup.title);\n *      formatter.addText(actionGroup.description);\n *      formatter.addArguments(actionGroup._groupActions);\n *      formatter.endSection();\n *\n **/\nHelpFormatter.prototype.addArguments = function (actions) {\n  var self = this;\n  actions.forEach(function (action) {\n    self.addArgument(action);\n  });\n};\n\n//\n// Help-formatting methods\n//\n\n/**\n * HelpFormatter#formatHelp -> string\n *\n * Format help\n *\n * ##### Example\n *\n *      formatter.addText(this.epilog);\n *      return formatter.formatHelp();\n *\n **/\nHelpFormatter.prototype.formatHelp = function () {\n  var help = this._rootSection.formatHelp(this);\n  if (help) {\n    help = help.replace(this._longBreakMatcher, $$.EOL + $$.EOL);\n    help = _.str.strip(help, $$.EOL) + $$.EOL;\n  }\n  return help;\n};\n\nHelpFormatter.prototype._joinParts = function (partStrings) {\n  return partStrings.filter(function (part) {\n    return (!!part && part !== $$.SUPPRESS);\n  }).join('');\n};\n\nHelpFormatter.prototype._formatUsage = function (usage, actions, groups, prefix) {\n  if (!prefix && !_.isString(prefix)) {\n    prefix = 'usage: ';\n  }\n\n  actions = actions || [];\n  groups = groups || [];\n\n\n  // if usage is specified, use that\n  if (usage) {\n    usage = _.str.sprintf(usage, {prog: this._prog});\n\n    // if no optionals or positionals are available, usage is just prog\n  } else if (!usage && actions.length === 0) {\n    usage = this._prog;\n\n    // if optionals and positionals are available, calculate usage\n  } else if (!usage) {\n    var prog = this._prog;\n    var optionals = [];\n    var positionals = [];\n    var actionUsage;\n    var textWidth;\n\n    // split optionals from positionals\n    actions.forEach(function (action) {\n      if (action.isOptional()) {\n        optionals.push(action);\n      } else {\n        positionals.push(action);\n      }\n    });\n\n    // build full usage string\n    actionUsage = this._formatActionsUsage([].concat(optionals, positionals), groups);\n    usage = [prog, actionUsage].join(' ');\n\n    // wrap the usage parts if it's too long\n    textWidth = this._width - this._currentIndent;\n    if ((prefix.length + usage.length) > textWidth) {\n\n      // break usage into wrappable parts\n      var regexpPart = new RegExp('\\\\(.*?\\\\)+|\\\\[.*?\\\\]+|\\\\S+', 'g');\n      var optionalUsage = this._formatActionsUsage(optionals, groups);\n      var positionalUsage = this._formatActionsUsage(positionals, groups);\n\n\n      var optionalParts = optionalUsage.match(regexpPart);\n      var positionalParts = positionalUsage.match(regexpPart) || [];\n\n      if (optionalParts.join(' ') !== optionalUsage) {\n        throw new Error('assert \"optionalParts.join(\\' \\') === optionalUsage\"');\n      }\n      if (positionalParts.join(' ') !== positionalUsage) {\n        throw new Error('assert \"positionalParts.join(\\' \\') === positionalUsage\"');\n      }\n\n      // helper for wrapping lines\n      var _getLines = function (parts, indent, prefix) {\n        var lines = [];\n        var line = [];\n\n        var lineLength = !!prefix ? prefix.length - 1: indent.length - 1;\n\n        parts.forEach(function (part) {\n          if (lineLength + 1 + part.length > textWidth) {\n            lines.push(indent + line.join(' '));\n            line = [];\n            lineLength = indent.length - 1;\n          }\n          line.push(part);\n          lineLength += part.length + 1;\n        });\n\n        if (line) {\n          lines.push(indent + line.join(' '));\n        }\n        if (prefix) {\n          lines[0] = lines[0].substr(indent.length);\n        }\n        return lines;\n      };\n\n      var lines, indent, parts;\n      // if prog is short, follow it with optionals or positionals\n      if (prefix.length + prog.length <= 0.75 * textWidth) {\n        indent = _.str.repeat(' ', (prefix.length + prog.length + 1));\n        if (optionalParts) {\n          lines = [].concat(\n            _getLines([prog].concat(optionalParts), indent, prefix),\n            _getLines(positionalParts, indent)\n          );\n        } else if (positionalParts) {\n          lines = _getLines([prog].concat(positionalParts), indent, prefix);\n        } else {\n          lines = [prog];\n        }\n\n        // if prog is long, put it on its own line\n      } else {\n        indent = _.str.repeat(' ', prefix.length);\n        parts = optionalParts + positionalParts;\n        lines = _getLines(parts, indent);\n        if (lines.length > 1) {\n          lines = [].concat(\n            _getLines(optionalParts, indent),\n            _getLines(positionalParts, indent)\n          );\n        }\n        lines = [prog] + lines;\n      }\n      // join lines into usage\n      usage = lines.join($$.EOL);\n    }\n  }\n\n  // prefix with 'usage:'\n  return prefix + usage + $$.EOL + $$.EOL;\n};\n\nHelpFormatter.prototype._formatActionsUsage = function (actions, groups) {\n  // find group indices and identify actions in groups\n  var groupActions = [];\n  var inserts = [];\n  var self = this;\n\n  groups.forEach(function (group) {\n    var end;\n    var i;\n\n    var start = actions.indexOf(group._groupActions[0]);\n    if (start >= 0) {\n      end = start + group._groupActions.length;\n\n      //if (actions.slice(start, end) === group._groupActions) {\n      if (_.isEqual(actions.slice(start, end), group._groupActions)) {\n        group._groupActions.forEach(function (action) {\n          groupActions.push(action);\n        });\n\n        if (!group.required) {\n          if (!!inserts[start]) {\n            inserts[start] += ' [';\n          }\n          else {\n            inserts[start] = '[';\n          }\n          inserts[end] = ']';\n        } else {\n          if (!!inserts[start]) {\n            inserts[start] += ' (';\n          }\n          else {\n            inserts[start] = '(';\n          }\n          inserts[end] = ')';\n        }\n        for (i = start + 1; i < end; i += 1) {\n          inserts[i] = '|';\n        }\n      }\n    }\n  });\n\n  // collect all actions format strings\n  var parts = [];\n\n  actions.forEach(function (action, actionIndex) {\n    var part;\n    var optionString;\n    var argsDefault;\n    var argsString;\n\n    // suppressed arguments are marked with None\n    // remove | separators for suppressed arguments\n    if (action.help === $$.SUPPRESS) {\n      parts.push(null);\n      if (inserts[actionIndex] === '|') {\n        inserts.splice(actionIndex, actionIndex);\n      } else if (inserts[actionIndex + 1] === '|') {\n        inserts.splice(actionIndex + 1, actionIndex + 1);\n      }\n\n      // produce all arg strings\n    } else if (!action.isOptional()) {\n      part = self._formatArgs(action, action.dest);\n\n      // if it's in a group, strip the outer []\n      if (groupActions.indexOf(action) >= 0) {\n        if (part[0] === '[' && part[part.length - 1] === ']') {\n          part = part.slice(1, -1);\n        }\n      }\n      // add the action string to the list\n      parts.push(part);\n\n    // produce the first way to invoke the option in brackets\n    } else {\n      optionString = action.optionStrings[0];\n\n      // if the Optional doesn't take a value, format is: -s or --long\n      if (action.nargs === 0) {\n        part = '' + optionString;\n\n      // if the Optional takes a value, format is: -s ARGS or --long ARGS\n      } else {\n        argsDefault = action.dest.toUpperCase();\n        argsString = self._formatArgs(action, argsDefault);\n        part = optionString + ' ' + argsString;\n      }\n      // make it look optional if it's not required or in a group\n      if (!action.required && groupActions.indexOf(action) < 0) {\n        part = '[' + part + ']';\n      }\n      // add the action string to the list\n      parts.push(part);\n    }\n  });\n\n  // insert things at the necessary indices\n  for (var i = inserts.length - 1; i >= 0; --i) {\n    if (inserts[i] !== null) {\n      parts.splice(i, 0, inserts[i]);\n    }\n  }\n\n  // join all the action items with spaces\n  var text = parts.filter(function (part) {\n    return !!part;\n  }).join(' ');\n\n  // clean up separators for mutually exclusive groups\n  text = text.replace(/([\\[(]) /g, '$1'); // remove spaces\n  text = text.replace(/ ([\\])])/g, '$1');\n  text = text.replace(/\\[ *\\]/g, ''); // remove empty groups\n  text = text.replace(/\\( *\\)/g, '');\n  text = text.replace(/\\(([^|]*)\\)/g, '$1'); // remove () from single action groups\n\n  text = _.str.strip(text);\n\n  // return the text\n  return text;\n};\n\nHelpFormatter.prototype._formatText = function (text) {\n  text = _.str.sprintf(text, {prog: this._prog});\n  var textWidth = this._width - this._currentIndent;\n  var indentIncriment = _.str.repeat(' ', this._currentIndent);\n  return this._fillText(text, textWidth, indentIncriment) + $$.EOL + $$.EOL;\n};\n\nHelpFormatter.prototype._formatAction = function (action) {\n  var self = this;\n\n  var helpText;\n  var helpLines;\n  var parts;\n  var indentFirst;\n\n  // determine the required width and the entry label\n  var helpPosition = Math.min(this._actionMaxLength + 2, this._maxHelpPosition);\n  var helpWidth = this._width - helpPosition;\n  var actionWidth = helpPosition - this._currentIndent - 2;\n  var actionHeader = this._formatActionInvocation(action);\n\n  // no help; start on same line and add a final newline\n  if (!action.help) {\n    actionHeader = _.str.repeat(' ', this._currentIndent) + actionHeader + $$.EOL;\n\n  // short action name; start on the same line and pad two spaces\n  } else if (actionHeader.length <= actionWidth) {\n    actionHeader = _.str.repeat(' ', this._currentIndent) +\n        actionHeader +\n        '  ' +\n        _.str.repeat(' ', actionWidth - actionHeader.length);\n    indentFirst = 0;\n\n  // long action name; start on the next line\n  } else {\n    actionHeader = _.str.repeat(' ', this._currentIndent) + actionHeader + $$.EOL;\n    indentFirst = helpPosition;\n  }\n\n  // collect the pieces of the action help\n  parts = [actionHeader];\n\n  // if there was help for the action, add lines of help text\n  if (!!action.help) {\n    helpText = this._expandHelp(action);\n    helpLines = this._splitLines(helpText, helpWidth);\n    parts.push(_.str.repeat(' ', indentFirst) + helpLines[0] + $$.EOL);\n    helpLines.slice(1).forEach(function (line) {\n      parts.push(_.str.repeat(' ', helpPosition) + line + $$.EOL);\n    });\n\n  // or add a newline if the description doesn't end with one\n  } else if (actionHeader.charAt(actionHeader.length - 1) !== $$.EOL) {\n    parts.push($$.EOL);\n  }\n  // if there are any sub-actions, add their help as well\n  if (!!action._getSubactions) {\n    this._indent();\n    action._getSubactions().forEach(function (subaction) {\n      parts.push(self._formatAction(subaction));\n    });\n    this._dedent();\n  }\n  // return a single string\n  return this._joinParts(parts);\n};\n\nHelpFormatter.prototype._formatActionInvocation = function (action) {\n  if (!action.isOptional()) {\n    var format_func = this._metavarFormatter(action, action.dest);\n    var metavars = format_func(1);\n    return metavars[0];\n  } else {\n    var parts = [];\n    var argsDefault;\n    var argsString;\n\n    // if the Optional doesn't take a value, format is: -s, --long\n    if (action.nargs === 0) {\n      parts = parts.concat(action.optionStrings);\n\n    // if the Optional takes a value, format is: -s ARGS, --long ARGS\n    } else {\n      argsDefault = action.dest.toUpperCase();\n      argsString = this._formatArgs(action, argsDefault);\n      action.optionStrings.forEach(function (optionString) {\n        parts.push(optionString + ' ' + argsString);\n      });\n    }\n    return parts.join(', ');\n  }\n};\n\nHelpFormatter.prototype._metavarFormatter = function (action, metavarDefault) {\n  var result;\n\n  if (!!action.metavar || action.metavar === '') {\n    result = action.metavar;\n  } else if (!!action.choices) {\n    var choices = action.choices;\n\n    if (_.isString(choices)) {\n      choices = choices.split('').join(', ');\n    } else if (_.isArray(choices)) {\n      choices = choices.join(',');\n    }\n    else\n    {\n      choices = _.keys(choices).join(',');\n    }\n    result = '{' + choices + '}';\n  } else {\n    result = metavarDefault;\n  }\n\n  return function (size) {\n    if (Array.isArray(result)) {\n      return result;\n    } else {\n      var metavars = [];\n      for (var i = 0; i < size; i += 1) {\n        metavars.push(result);\n      }\n      return metavars;\n    }\n  };\n};\n\nHelpFormatter.prototype._formatArgs = function (action, metavarDefault) {\n  var result;\n  var metavars;\n\n  var buildMetavar = this._metavarFormatter(action, metavarDefault);\n\n  switch (action.nargs) {\n  case undefined:\n  case null:\n    metavars = buildMetavar(1);\n    result = '' + metavars[0];\n    break;\n  case $$.OPTIONAL:\n    metavars = buildMetavar(1);\n    result = '[' + metavars[0] + ']';\n    break;\n  case $$.ZERO_OR_MORE:\n    metavars = buildMetavar(2);\n    result = '[' + metavars[0] + ' [' + metavars[1] + ' ...]]';\n    break;\n  case $$.ONE_OR_MORE:\n    metavars = buildMetavar(2);\n    result = '' + metavars[0] + ' [' + metavars[1] + ' ...]';\n    break;\n  case $$.REMAINDER:\n    result = '...';\n    break;\n  case $$.PARSER:\n    metavars = buildMetavar(1);\n    result = metavars[0] + ' ...';\n    break;\n  default:\n    metavars = buildMetavar(action.nargs);\n    result = metavars.join(' ');\n  }\n  return result;\n};\n\nHelpFormatter.prototype._expandHelp = function (action) {\n  var params = { prog: this._prog };\n\n  Object.keys(action).forEach(function (actionProperty) {\n    var actionValue = action[actionProperty];\n\n    if (actionValue !== $$.SUPPRESS) {\n      params[actionProperty] = actionValue;\n    }\n  });\n\n  if (!!params.choices) {\n    if (_.isString(params.choices)) {\n      params.choices = params.choices.split('').join(', ');\n    }\n    else if (_.isArray(params.choices)) {\n      params.choices = params.choices.join(', ');\n    }\n    else {\n      params.choices = _.keys(params.choices).join(', ');\n    }\n  }\n\n  return _.str.sprintf(this._getHelpString(action), params);\n};\n\nHelpFormatter.prototype._splitLines = function (text, width) {\n  var lines = [];\n  var delimiters = [\" \", \".\", \",\", \"!\", \"?\"];\n  var re = new RegExp('[' + delimiters.join('') + '][^' + delimiters.join('') + ']*$');\n\n  text = text.replace(/[\\n\\|\\t]/g, ' ');\n\n  text = _.str.strip(text);\n  text = text.replace(this._whitespaceMatcher, ' ');\n\n  // Wraps the single paragraph in text (a string) so every line\n  // is at most width characters long.\n  text.split($$.EOL).forEach(function (line) {\n    if (width >= line.length) {\n      lines.push(line);\n      return;\n    }\n\n    var wrapStart = 0;\n    var wrapEnd = width;\n    var delimiterIndex = 0;\n    while (wrapEnd <= line.length) {\n      if (wrapEnd !== line.length && delimiters.indexOf(line[wrapEnd] < -1)) {\n        delimiterIndex = (re.exec(line.substring(wrapStart, wrapEnd)) || {}).index;\n        wrapEnd = wrapStart + delimiterIndex + 1;\n      }\n      lines.push(line.substring(wrapStart, wrapEnd));\n      wrapStart = wrapEnd;\n      wrapEnd += width;\n    }\n    if (wrapStart < line.length) {\n      lines.push(line.substring(wrapStart, wrapEnd));\n    }\n  });\n\n  return lines;\n};\n\nHelpFormatter.prototype._fillText = function (text, width, indent) {\n  var lines = this._splitLines(text, width);\n  lines = lines.map(function (line) {\n    return indent + line;\n  });\n  return lines.join($$.EOL);\n};\n\nHelpFormatter.prototype._getHelpString = function (action) {\n  return action.help;\n};\n"]}