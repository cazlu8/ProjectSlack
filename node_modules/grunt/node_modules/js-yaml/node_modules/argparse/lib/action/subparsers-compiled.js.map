{"version":3,"sources":["subparsers.js"],"names":[],"mappings":"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","file":"subparsers-compiled.js","sourcesContent":["/** internal\n * class ActionSubparsers\n *\n * Support the creation of such sub-commands with the addSubparsers()\n *\n * This class inherited from [[Action]]\n **/\n'use strict';\n\nvar util    = require('util');\nvar format  = require('util').format;\nvar _       = require('underscore');\n\n\nvar Action = require('../action');\n\n// Constants\nvar $$ = require('../const');\n\n// Errors\nvar argumentErrorHelper = require('../argument/error');\n\n\n/*:nodoc:*\n * new ChoicesPseudoAction(name, help)\n *\n * Create pseudo action for correct help text\n *\n **/\nvar ChoicesPseudoAction = function (name, help) {\n  var options = {\n    optionStrings: [],\n    dest: name,\n    help: help\n  };\n\n  Action.call(this, options);\n};\nutil.inherits(ChoicesPseudoAction, Action);\n\n/**\n * new ActionSubparsers(options)\n * - options (object): options hash see [[Action.new]]\n *\n **/\nvar ActionSubparsers = module.exports = function ActionSubparsers(options) {\n  options = options || {};\n  options.dest = options.dest || $$.SUPPRESS;\n  options.nargs = $$.PARSER;\n\n  this.debug = (options.debug === true);\n\n  this._progPrefix = options.prog;\n  this._parserClass = options.parserClass;\n  this._nameParserMap = {};\n  this._choicesActions = [];\n\n  options.choices = this._nameParserMap;\n  Action.call(this, options);\n};\nutil.inherits(ActionSubparsers, Action);\n\n/*:nodoc:*\n * ActionSubparsers#addParser(name, options) -> ArgumentParser\n * - name (string): sub-command name\n * - options (object): see [[ArgumentParser.new]]\n *\n *  Note:\n *  addParser supports an additional aliases option,\n *  which allows multiple strings to refer to the same subparser.\n *  This example, like svn, aliases co as a shorthand for checkout\n *\n **/\nActionSubparsers.prototype.addParser = function (name, options) {\n  var parser;\n\n  var self = this;\n\n  options = options || {};\n\n  options.debug = (this.debug === true);\n\n  // set program from the existing prefix\n  if (!options.prog) {\n    options.prog = this._progPrefix + ' ' + name;\n  }\n\n  var aliases = options.aliases || [];\n\n  // create a pseudo-action to hold the choice help\n  if (!!options.help || _.isString(options.help)) {\n    var help = options.help;\n    delete options.help;\n\n    var choiceAction = new ChoicesPseudoAction(name, help);\n    this._choicesActions.push(choiceAction);\n  }\n\n  // create the parser and add it to the map\n  parser = new this._parserClass(options);\n  this._nameParserMap[name] = parser;\n\n  // make parser available under aliases also\n  aliases.forEach(function (alias) {\n    self._nameParserMap[alias] = parser;\n  });\n\n  return parser;\n};\n\nActionSubparsers.prototype._getSubactions = function () {\n  return this._choicesActions;\n};\n\n/*:nodoc:*\n * ActionSubparsers#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Parse input aguments\n **/\nActionSubparsers.prototype.call = function (parser, namespace, values) {\n  var parserName = values[0];\n  var argStrings = values.slice(1);\n\n  // set the parser name if requested\n  if (this.dest !== $$.SUPPRESS) {\n    namespace[this.dest] = parserName;\n  }\n\n  // select the parser\n  if (!!this._nameParserMap[parserName]) {\n    parser = this._nameParserMap[parserName];\n  } else {\n    throw argumentErrorHelper(format(\n      'Unknown parser \"%s\" (choices: [%s]).',\n        parserName,\n        _.keys(this._nameParserMap).join(', ')\n    ));\n  }\n\n  // parse all the remaining options into the namespace\n  parser.parseArgs(argStrings, namespace);\n};\n\n\n"]}