{"version":3,"sources":["append.js"],"names":[],"mappings":";;;;;;;;;AASA,YAAY,CAAC;;AAEb,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAE3B,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;;AAGlC,IAAI,EAAE,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;;AAS7B,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,YAAY,CAAC,OAAO,EAAE;AACjE,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,MAAI,IAAI,CAAC,KAAK,IAAI,CAAC,EAAE;AACnB,UAAM,IAAI,KAAK,CAAC,+CAA+C,GAC3D,iDAAiD,GACjD,iDAAiD,CAAC,CAAC;GACxD;AACD,MAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC,QAAQ,EAAE;AACjD,UAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;GAC3D;AACD,QAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;CAC5B,CAAC;AACF,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;;;;;;;;;;;AAWpC,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE;AACjE,MAAI,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AAClD,OAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnB,WAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CACjC,CAAC","file":"append-compiled.js","sourcesContent":["/*:nodoc:*\n * class ActionAppend\n *\n * This action stores a list, and appends each argument value to the list.\n * This is useful to allow an option to be specified multiple times.\n * This class inherided from [[Action]]\n *\n **/\n\n'use strict';\n\nvar util = require('util');\n\nvar Action = require('../action');\n\n// Constants\nvar $$ = require('../const');\n\n/*:nodoc:*\n * new ActionAppend(options)\n * - options (object): options hash see [[Action.new]]\n *\n * Note: options.nargs should be optional for constants\n * and more then zero for other\n **/\nvar ActionAppend = module.exports = function ActionAppend(options) {\n  options = options || {};\n  if (this.nargs <= 0) {\n    throw new Error('nargs for append actions must be > 0; if arg ' +\n        'strings are not supplying the value to append, ' +\n        'the append const action may be more appropriate');\n  }\n  if (!!this.constant && this.nargs !== $$.OPTIONAL) {\n    throw new Error('nargs must be OPTIONAL to supply const');\n  }\n  Action.call(this, options);\n};\nutil.inherits(ActionAppend, Action);\n\n/*:nodoc:*\n * ActionAppend#call(parser, namespace, values, optionString) -> Void\n * - parser (ArgumentParser): current parser\n * - namespace (Namespace): namespace for output data\n * - values (Array): parsed values\n * - optionString (Array): input option string(not parsed)\n *\n * Call the action. Save result in namespace object\n **/\nActionAppend.prototype.call = function (parser, namespace, values) {\n  var items = [].concat(namespace[this.dest] || []); // or _.clone\n  items.push(values);\n  namespace.set(this.dest, items);\n};\n\n\n"]}