{"version":3,"sources":["schema.js"],"names":[],"mappings":"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","file":"schema-compiled.js","sourcesContent":["'use strict';\n\n\nvar common        = require('./common');\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag) {\n        exclude.push(previousIndex);\n      }\n    });\n\n    result.push(currentType);\n  });\n\n  return result.filter(function (type, index) {\n    return -1 === exclude.indexOf(index);\n  });\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {}, index, length;\n\n  function collectType(type) {\n    result[type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\n\nfunction Schema(definition) {\n  this.include  = definition.include  || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n\n  this.implicit.forEach(function (type) {\n    if (null !== type.loader && 'string' !== type.loader.kind) {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\n\nSchema.DEFAULT = null;\n\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n  case 1:\n    schemas = Schema.DEFAULT;\n    types = arguments[0];\n    break;\n\n  case 2:\n    schemas = arguments[0];\n    types = arguments[1];\n    break;\n\n  default:\n    throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) { return type instanceof Type; })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\n\nmodule.exports = Schema;\n"]}