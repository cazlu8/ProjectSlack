{"version":3,"sources":["loader.js"],"names":[],"mappings":"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","file":"loader-compiled.js","sourcesContent":["'use strict';\n\n\nvar common         = require('./common');\nvar YAMLException  = require('./exception');\nvar Mark           = require('./mark');\nvar NIL            = common.NIL;\nvar SAFE_SCHEMA    = require('./schema/safe');\nvar DEFAULT_SCHEMA = require('./schema/default');\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\nvar KIND_STRING = 'string';\nvar KIND_ARRAY  = 'array';\nvar KIND_OBJECT = 'object';\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar CHAR_TAB                  = 0x09;   /* Tab */\nvar CHAR_LINE_FEED            = 0x0A;   /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D;   /* CR */\nvar CHAR_SPACE                = 0x20;   /* Space */\nvar CHAR_EXCLAMATION          = 0x21;   /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22;   /* \" */\nvar CHAR_SHARP                = 0x23;   /* # */\nvar CHAR_PERCENT              = 0x25;   /* % */\nvar CHAR_AMPERSAND            = 0x26;   /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27;   /* ' */\nvar CHAR_ASTERISK             = 0x2A;   /* * */\nvar CHAR_PLUS                 = 0x2B;   /* + */\nvar CHAR_COMMA                = 0x2C;   /* , */\nvar CHAR_MINUS                = 0x2D;   /* - */\nvar CHAR_DOT                  = 0x2E;   /* . */\nvar CHAR_SLASH                = 0x2F;   /* / */\nvar CHAR_DIGIT_ZERO           = 0x30;   /* 0 */\nvar CHAR_DIGIT_ONE            = 0x31;   /* 1 */\nvar CHAR_DIGIT_NINE           = 0x39;   /* 9 */\nvar CHAR_COLON                = 0x3A;   /* : */\nvar CHAR_LESS_THAN            = 0x3C;   /* < */\nvar CHAR_GREATER_THAN         = 0x3E;   /* > */\nvar CHAR_QUESTION             = 0x3F;   /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40;   /* @ */\nvar CHAR_CAPITAL_A            = 0x41;   /* A */\nvar CHAR_CAPITAL_F            = 0x46;   /* F */\nvar CHAR_CAPITAL_L            = 0x4C;   /* L */\nvar CHAR_CAPITAL_N            = 0x4E;   /* N */\nvar CHAR_CAPITAL_P            = 0x50;   /* P */\nvar CHAR_CAPITAL_U            = 0x55;   /* U */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B;   /* [ */\nvar CHAR_BACKSLASH            = 0x5C;   /* \\ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;   /* ] */\nvar CHAR_UNDERSCORE           = 0x5F;   /* _ */\nvar CHAR_GRAVE_ACCENT         = 0x60;   /* ` */\nvar CHAR_SMALL_A              = 0x61;   /* a */\nvar CHAR_SMALL_B              = 0x62;   /* b */\nvar CHAR_SMALL_E              = 0x65;   /* e */\nvar CHAR_SMALL_F              = 0x66;   /* f */\nvar CHAR_SMALL_N              = 0x6E;   /* n */\nvar CHAR_SMALL_R              = 0x72;   /* r */\nvar CHAR_SMALL_T              = 0x74;   /* t */\nvar CHAR_SMALL_U              = 0x75;   /* u */\nvar CHAR_SMALL_V              = 0x76;   /* v */\nvar CHAR_SMALL_X              = 0x78;   /* x */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B;   /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C;   /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D;   /* } */\n\n\nvar SIMPLE_ESCAPE_SEQUENCES = {};\n\nSIMPLE_ESCAPE_SEQUENCES[CHAR_DIGIT_ZERO]   = '\\x00';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_A]      = '\\x07';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_B]      = '\\x08';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_T]      = '\\x09';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_TAB]          = '\\x09';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_N]      = '\\x0A';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_V]      = '\\x0B';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_F]      = '\\x0C';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_R]      = '\\x0D';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SMALL_E]      = '\\x1B';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SPACE]        = ' ';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_DOUBLE_QUOTE] = '\\x22';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_SLASH]        = '/';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_BACKSLASH]    = '\\x5C';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_CAPITAL_N]    = '\\x85';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_UNDERSCORE]   = '\\xA0';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_CAPITAL_L]    = '\\u2028';\nSIMPLE_ESCAPE_SEQUENCES[CHAR_CAPITAL_P]    = '\\u2029';\n\n\nvar HEXADECIMAL_ESCAPE_SEQUENCES = {};\n\nHEXADECIMAL_ESCAPE_SEQUENCES[CHAR_SMALL_X]   = 2;\nHEXADECIMAL_ESCAPE_SEQUENCES[CHAR_SMALL_U]   = 4;\nHEXADECIMAL_ESCAPE_SEQUENCES[CHAR_CAPITAL_U] = 8;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uD800-\\uDFFF\\uFFFE\\uFFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction loadAll(input, output, options) {\n  options = options || {};\n\n  var filename = options['filename'] || null,\n      schema   = options['schema']   || DEFAULT_SCHEMA,\n      resolve  = options['resolve']  || true,\n      validate = options['validate'] || true,\n      strict   = options['strict']   || false,\n      legacy   = options['legacy']   || false,\n\n      directiveHandlers = {},\n      implicitTypes     = schema.compiledImplicit,\n      typeMap           = schema.compiledTypeMap,\n\n      length     = input.length,\n      position   = 0,\n      line       = 0,\n      lineStart  = 0,\n      lineIndent = 0,\n      character  = input.charCodeAt(position),\n\n      version,\n      checkLineBreaks,\n      tagMap,\n      anchorMap,\n      tag,\n      anchor,\n      kind,\n      result;\n\n  function generateError(message) {\n    return new YAMLException(\n      message,\n      new Mark(filename, input, position, line, (position - lineStart)));\n  }\n\n  function throwError(message) {\n    throw generateError(message);\n  }\n\n  function throwWarning(message) {\n    var error = generateError(message);\n\n    if (strict) {\n      throw error;\n    } else {\n      console.warn(error.toString());\n    }\n  }\n\n  directiveHandlers['YAML'] = function handleYamlDirective(name, args) {\n    var match, major, minor;\n\n    if (null !== version) {\n      throwError('duplication of %YAML directive');\n    }\n\n    if (1 !== args.length) {\n      throwError('YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (null === match) {\n      throwError('ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (1 !== major) {\n      throwError('unacceptable YAML version of the document');\n    }\n\n    version = args[0];\n    checkLineBreaks = (minor < 2);\n\n    if (1 !== minor && 2 !== minor) {\n      throwWarning('unsupported YAML version of the document');\n    }\n  };\n\n  directiveHandlers['TAG'] = function handleTagDirective(name, args) {\n    var handle, prefix;\n\n    if (2 !== args.length) {\n      throwError('TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError('ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(tagMap, handle)) {\n      throwError('there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError('ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    tagMap[handle] = prefix;\n  };\n\n  function captureSegment(start, end, checkJson) {\n    var _position, _length, _character, _result;\n\n    if (start < end) {\n      _result = input.slice(start, end);\n\n      if (checkJson && validate) {\n        for (_position = 0, _length = _result.length;\n             _position < _length;\n             _position += 1) {\n          _character = _result.charCodeAt(_position);\n          if (!(0x09 === _character ||\n                0x20 <= _character && _character <= 0x10FFFF)) {\n            throwError('expected valid JSON character');\n          }\n        }\n      }\n\n      result += _result;\n    }\n  }\n\n  function mergeMappings(destination, source) {\n    var sourceKeys, key, index, quantity;\n\n    if (!common.isObject(source)) {\n      throwError('cannot merge mappings; the provided source object is unacceptable');\n    }\n\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n      key = sourceKeys[index];\n\n      if (!_hasOwnProperty.call(destination, key)) {\n        destination[key] = source[key];\n      }\n    }\n  }\n\n  function storeMappingPair(_result, keyTag, keyNode, valueNode) {\n    var index, quantity;\n\n    keyNode = String(keyNode);\n\n    if (null === _result) {\n      _result = {};\n    }\n\n    if ('tag:yaml.org,2002:merge' === keyTag) {\n      if (Array.isArray(valueNode)) {\n        for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n          mergeMappings(_result, valueNode[index]);\n        }\n      } else {\n        mergeMappings(_result, valueNode);\n      }\n    } else {\n      _result[keyNode] = valueNode;\n    }\n\n    return _result;\n  }\n\n  function readLineBreak() {\n    if (CHAR_LINE_FEED === character) {\n      position += 1;\n    } else if (CHAR_CARRIAGE_RETURN === character) {\n      if (CHAR_LINE_FEED === input.charCodeAt(position + 1)) {\n        position += 2;\n      } else {\n        position += 1;\n      }\n    } else {\n      throwError('a line break is expected');\n    }\n\n    line += 1;\n    lineStart = position;\n    character = input.charCodeAt(position);\n  }\n\n  function skipSeparationSpace(allowComments, checkIndent) {\n    var lineBreaks = 0;\n\n    while (position < length) {\n      while (CHAR_SPACE === character || CHAR_TAB === character) {\n        character = input.charCodeAt(++position);\n      }\n\n      if (allowComments && CHAR_SHARP === character) {\n        do { character = input.charCodeAt(++position); }\n        while (position < length &&\n               CHAR_LINE_FEED !== character &&\n               CHAR_CARRIAGE_RETURN !== character);\n      }\n\n      if (CHAR_LINE_FEED === character || CHAR_CARRIAGE_RETURN === character) {\n        readLineBreak();\n        lineBreaks += 1;\n        lineIndent = 0;\n\n        while (CHAR_SPACE === character) {\n          lineIndent += 1;\n          character = input.charCodeAt(++position);\n        }\n\n        if (lineIndent < checkIndent) {\n          throwWarning('deficient indentation');\n        }\n      } else {\n        break;\n      }\n    }\n\n    return lineBreaks;\n  }\n\n  function testDocumentSeparator() {\n    var _position, _character;\n\n    if (position === lineStart &&\n        (CHAR_MINUS === character || CHAR_DOT === character) &&\n        input.charCodeAt(position + 1) === character &&\n        input.charCodeAt(position + 2) === character) {\n\n      _position = position + 3;\n      _character = input.charCodeAt(_position);\n\n      if (_position >= length ||\n          CHAR_SPACE           === _character ||\n          CHAR_TAB             === _character ||\n          CHAR_LINE_FEED       === _character ||\n          CHAR_CARRIAGE_RETURN === _character) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function writeFoldedLines(count) {\n    if (1 === count) {\n      result += ' ';\n    } else if (count > 1) {\n      result += common.repeat('\\n', count - 1);\n    }\n  }\n\n  function readPlainScalar(nodeIndent, withinFlowCollection) {\n    var preceding,\n        following,\n        captureStart,\n        captureEnd,\n        hasPendingContent,\n        _line,\n        _lineStart,\n        _lineIndent,\n        _kind = kind,\n        _result = result;\n\n    if (CHAR_SPACE                === character ||\n        CHAR_TAB                  === character ||\n        CHAR_LINE_FEED            === character ||\n        CHAR_CARRIAGE_RETURN      === character ||\n        CHAR_COMMA                === character ||\n        CHAR_LEFT_SQUARE_BRACKET  === character ||\n        CHAR_RIGHT_SQUARE_BRACKET === character ||\n        CHAR_LEFT_CURLY_BRACKET   === character ||\n        CHAR_RIGHT_CURLY_BRACKET  === character ||\n        CHAR_SHARP                === character ||\n        CHAR_AMPERSAND            === character ||\n        CHAR_ASTERISK             === character ||\n        CHAR_EXCLAMATION          === character ||\n        CHAR_VERTICAL_LINE        === character ||\n        CHAR_GREATER_THAN         === character ||\n        CHAR_SINGLE_QUOTE         === character ||\n        CHAR_DOUBLE_QUOTE         === character ||\n        CHAR_PERCENT              === character ||\n        CHAR_COMMERCIAL_AT        === character ||\n        CHAR_GRAVE_ACCENT         === character) {\n      return false;\n    }\n\n    if (CHAR_QUESTION === character ||\n        CHAR_MINUS === character) {\n      following = input.charCodeAt(position + 1);\n\n      if (CHAR_SPACE                 === following ||\n          CHAR_TAB                   === following ||\n          CHAR_LINE_FEED             === following ||\n          CHAR_CARRIAGE_RETURN       === following ||\n          withinFlowCollection &&\n          (CHAR_COMMA                === following ||\n           CHAR_LEFT_SQUARE_BRACKET  === following ||\n           CHAR_RIGHT_SQUARE_BRACKET === following ||\n           CHAR_LEFT_CURLY_BRACKET   === following ||\n           CHAR_RIGHT_CURLY_BRACKET  === following)) {\n        return false;\n      }\n    }\n\n    kind = KIND_STRING;\n    result = '';\n    captureStart = captureEnd = position;\n    hasPendingContent = false;\n\n    while (position < length) {\n      if (CHAR_COLON === character) {\n        following = input.charCodeAt(position + 1);\n\n        if (CHAR_SPACE                 === following ||\n            CHAR_TAB                   === following ||\n            CHAR_LINE_FEED             === following ||\n            CHAR_CARRIAGE_RETURN       === following ||\n            withinFlowCollection &&\n            (CHAR_COMMA                === following ||\n             CHAR_LEFT_SQUARE_BRACKET  === following ||\n             CHAR_RIGHT_SQUARE_BRACKET === following ||\n             CHAR_LEFT_CURLY_BRACKET   === following ||\n             CHAR_RIGHT_CURLY_BRACKET  === following)) {\n          break;\n        }\n\n      } else if (CHAR_SHARP === character) {\n        preceding = input.charCodeAt(position - 1);\n\n        if (CHAR_SPACE           === preceding ||\n            CHAR_TAB             === preceding ||\n            CHAR_LINE_FEED       === preceding ||\n            CHAR_CARRIAGE_RETURN === preceding) {\n          break;\n        }\n\n      } else if ((position === lineStart && testDocumentSeparator()) ||\n                 withinFlowCollection &&\n                 (CHAR_COMMA                === character ||\n                  CHAR_LEFT_SQUARE_BRACKET  === character ||\n                  CHAR_RIGHT_SQUARE_BRACKET === character ||\n                  CHAR_LEFT_CURLY_BRACKET   === character ||\n                  CHAR_RIGHT_CURLY_BRACKET  === character)) {\n        break;\n\n      } else if (CHAR_LINE_FEED === character ||\n                 CHAR_CARRIAGE_RETURN === character) {\n        _line = line;\n        _lineStart = lineStart;\n        _lineIndent = lineIndent;\n        skipSeparationSpace(false, -1);\n\n        if (lineIndent >= nodeIndent) {\n          hasPendingContent = true;\n          continue;\n        } else {\n          position = captureEnd;\n          line = _line;\n          lineStart = _lineStart;\n          lineIndent = _lineIndent;\n          character = input.charCodeAt(position);\n          break;\n        }\n      }\n\n      if (hasPendingContent) {\n        captureSegment(captureStart, captureEnd, false);\n        writeFoldedLines(line - _line);\n        captureStart = captureEnd = position;\n        hasPendingContent = false;\n      }\n\n      if (CHAR_SPACE !== character && CHAR_TAB !== character) {\n        captureEnd = position + 1;\n      }\n\n      character = input.charCodeAt(++position);\n    }\n\n    captureSegment(captureStart, captureEnd, false);\n\n    if (result) {\n      return true;\n    } else {\n      kind = _kind;\n      result = _result;\n      return false;\n    }\n  }\n\n  function readSingleQuotedScalar(nodeIndent) {\n    var captureStart, captureEnd;\n\n    if (CHAR_SINGLE_QUOTE !== character) {\n      return false;\n    }\n\n    kind = KIND_STRING;\n    result = '';\n    character = input.charCodeAt(++position);\n    captureStart = captureEnd = position;\n\n    while (position < length) {\n      if (CHAR_SINGLE_QUOTE === character) {\n        captureSegment(captureStart, position, true);\n        character = input.charCodeAt(++position);\n\n        if (CHAR_SINGLE_QUOTE === character) {\n          captureStart = captureEnd = position;\n          character = input.charCodeAt(++position);\n        } else {\n          return true;\n        }\n\n      } else if (CHAR_LINE_FEED === character ||\n                 CHAR_CARRIAGE_RETURN === character) {\n        captureSegment(captureStart, captureEnd, true);\n        writeFoldedLines(skipSeparationSpace(false, nodeIndent));\n        captureStart = captureEnd = position;\n        character = input.charCodeAt(position);\n\n      } else if (position === lineStart && testDocumentSeparator()) {\n        throwError('unexpected end of the document within a single quoted scalar');\n\n      } else {\n        character = input.charCodeAt(++position);\n        captureEnd = position;\n      }\n    }\n\n    throwError('unexpected end of the stream within a single quoted scalar');\n  }\n\n  function readDoubleQuotedScalar(nodeIndent) {\n    var captureStart,\n        captureEnd,\n        hexLength,\n        hexIndex,\n        hexOffset,\n        hexResult;\n\n    if (CHAR_DOUBLE_QUOTE !== character) {\n      return false;\n    }\n\n    kind = KIND_STRING;\n    result = '';\n    character = input.charCodeAt(++position);\n    captureStart = captureEnd = position;\n\n    while (position < length) {\n      if (CHAR_DOUBLE_QUOTE === character) {\n        captureSegment(captureStart, position, true);\n        character = input.charCodeAt(++position);\n        return true;\n\n      } else if (CHAR_BACKSLASH === character) {\n        captureSegment(captureStart, position, true);\n        character = input.charCodeAt(++position);\n\n        if (CHAR_LINE_FEED       === character ||\n            CHAR_CARRIAGE_RETURN === character) {\n          skipSeparationSpace(false, nodeIndent);\n\n        } else if (SIMPLE_ESCAPE_SEQUENCES[character]) {\n          result += SIMPLE_ESCAPE_SEQUENCES[character];\n          character = input.charCodeAt(++position);\n\n        } else if (HEXADECIMAL_ESCAPE_SEQUENCES[character]) {\n          hexLength = HEXADECIMAL_ESCAPE_SEQUENCES[character];\n          hexResult = 0;\n\n          for (hexIndex = 1; hexIndex <= hexLength; hexIndex += 1) {\n            hexOffset = (hexLength - hexIndex) * 4;\n            character = input.charCodeAt(++position);\n\n            if (CHAR_DIGIT_ZERO <= character && character <= CHAR_DIGIT_NINE) {\n              hexResult |= (character - CHAR_DIGIT_ZERO) << hexOffset;\n\n            } else if (CHAR_CAPITAL_A <= character && character <= CHAR_CAPITAL_F) {\n              hexResult |= (character - CHAR_CAPITAL_A + 10) << hexOffset;\n\n            } else if (CHAR_SMALL_A <= character && character <= CHAR_SMALL_F) {\n              hexResult |= (character - CHAR_SMALL_A + 10) << hexOffset;\n\n            } else {\n              throwError('expected hexadecimal character');\n            }\n          }\n\n          result += String.fromCharCode(hexResult);\n          character = input.charCodeAt(++position);\n\n        } else {\n          throwError('unknown escape sequence');\n        }\n\n        captureStart = captureEnd = position;\n\n      } else if (CHAR_LINE_FEED === character ||\n                 CHAR_CARRIAGE_RETURN === character) {\n        captureSegment(captureStart, captureEnd, true);\n        writeFoldedLines(skipSeparationSpace(false, nodeIndent));\n        captureStart = captureEnd = position;\n        character = input.charCodeAt(position);\n\n      } else if (position === lineStart && testDocumentSeparator()) {\n        throwError('unexpected end of the document within a double quoted scalar');\n\n      } else {\n        character = input.charCodeAt(++position);\n        captureEnd = position;\n      }\n    }\n\n    throwError('unexpected end of the stream within a double quoted scalar');\n  }\n\n  function readFlowCollection(nodeIndent) {\n    var readNext = true,\n        _line,\n        _tag     = tag,\n        _result,\n        following,\n        terminator,\n        isPair,\n        isExplicitPair,\n        isMapping,\n        keyNode,\n        keyTag,\n        valueNode;\n\n    switch (character) {\n    case CHAR_LEFT_SQUARE_BRACKET:\n      terminator = CHAR_RIGHT_SQUARE_BRACKET;\n      isMapping = false;\n      _result = [];\n      break;\n\n    case CHAR_LEFT_CURLY_BRACKET:\n      terminator = CHAR_RIGHT_CURLY_BRACKET;\n      isMapping = true;\n      _result = {};\n      break;\n\n    default:\n      return false;\n    }\n\n    if (null !== anchor) {\n      anchorMap[anchor] = _result;\n    }\n\n    character = input.charCodeAt(++position);\n\n    while (position < length) {\n      skipSeparationSpace(true, nodeIndent);\n\n      if (character === terminator) {\n        character = input.charCodeAt(++position);\n        tag = _tag;\n        kind = isMapping ? KIND_OBJECT : KIND_ARRAY;\n        result = _result;\n        return true;\n      } else if (!readNext) {\n        throwError('missed comma between flow collection entries');\n      }\n\n      keyTag = keyNode = valueNode = null;\n      isPair = isExplicitPair = false;\n\n      if (CHAR_QUESTION === character) {\n        following = input.charCodeAt(position + 1);\n\n        if (CHAR_SPACE === following ||\n            CHAR_TAB === following ||\n            CHAR_LINE_FEED === following ||\n            CHAR_CARRIAGE_RETURN === following) {\n          isPair = isExplicitPair = true;\n          position += 1;\n          character = following;\n          skipSeparationSpace(true, nodeIndent);\n        }\n      }\n\n      _line = line;\n      composeNode(nodeIndent, CONTEXT_FLOW_IN, false, true);\n      keyTag = tag;\n      keyNode = result;\n\n      if ((isExplicitPair || line === _line) && CHAR_COLON === character) {\n        isPair = true;\n        character = input.charCodeAt(++position);\n        skipSeparationSpace(true, nodeIndent);\n        composeNode(nodeIndent, CONTEXT_FLOW_IN, false, true);\n        valueNode = result;\n      }\n\n      if (isMapping) {\n        storeMappingPair(_result, keyTag, keyNode, valueNode);\n      } else if (isPair) {\n        _result.push(storeMappingPair(null, keyTag, keyNode, valueNode));\n      } else {\n        _result.push(keyNode);\n      }\n\n      skipSeparationSpace(true, nodeIndent);\n\n      if (CHAR_COMMA === character) {\n        readNext = true;\n        character = input.charCodeAt(++position);\n      } else {\n        readNext = false;\n      }\n    }\n\n    throwError('unexpected end of the stream within a flow collection');\n  }\n\n  function readBlockScalar(nodeIndent) {\n    var captureStart,\n        folding,\n        chomping       = CHOMPING_CLIP,\n        detectedIndent = false,\n        textIndent     = nodeIndent,\n        emptyLines     = -1;\n\n    switch (character) {\n    case CHAR_VERTICAL_LINE:\n      folding = false;\n      break;\n\n    case CHAR_GREATER_THAN:\n      folding = true;\n      break;\n\n    default:\n      return false;\n    }\n\n    kind = KIND_STRING;\n    result = '';\n\n    while (position < length) {\n      character = input.charCodeAt(++position);\n\n      if (CHAR_PLUS === character || CHAR_MINUS === character) {\n        if (CHOMPING_CLIP === chomping) {\n          chomping = (CHAR_PLUS === character) ? CHOMPING_KEEP : CHOMPING_STRIP;\n        } else {\n          throwError('repeat of a chomping mode identifier');\n        }\n\n      } else if (CHAR_DIGIT_ZERO <= character && character <= CHAR_DIGIT_NINE) {\n        if (CHAR_DIGIT_ZERO === character) {\n          throwError('bad explicit indentation width of a block scalar; it cannot be less than one');\n        } else if (!detectedIndent) {\n          textIndent = nodeIndent + (character - CHAR_DIGIT_ONE);\n          detectedIndent = true;\n        } else {\n          throwError('repeat of an indentation width identifier');\n        }\n\n      } else {\n        break;\n      }\n    }\n\n    if (CHAR_SPACE === character || CHAR_TAB === character) {\n      do { character = input.charCodeAt(++position); }\n      while (CHAR_SPACE === character || CHAR_TAB === character);\n\n      if (CHAR_SHARP === character) {\n        do { character = input.charCodeAt(++position); }\n        while (position < length &&\n               CHAR_LINE_FEED !== character &&\n               CHAR_CARRIAGE_RETURN !== character);\n      }\n    }\n\n    while (position < length) {\n      readLineBreak();\n      lineIndent = 0;\n\n      while ((!detectedIndent || lineIndent < textIndent) &&\n             (CHAR_SPACE === character)) {\n        lineIndent += 1;\n        character = input.charCodeAt(++position);\n      }\n\n      if (!detectedIndent && lineIndent > textIndent) {\n        textIndent = lineIndent;\n      }\n\n      if (CHAR_LINE_FEED === character || CHAR_CARRIAGE_RETURN === character) {\n        emptyLines += 1;\n        continue;\n      }\n\n      // End of the scalar. Perform the chomping.\n      if (lineIndent < textIndent) {\n        if (CHOMPING_KEEP === chomping) {\n          result += common.repeat('\\n', emptyLines + 1);\n        } else if (CHOMPING_CLIP === chomping) {\n          result += '\\n';\n        }\n        break;\n      }\n\n      detectedIndent = true;\n\n      if (folding) {\n        if (CHAR_SPACE === character || CHAR_TAB === character) {\n          result += common.repeat('\\n', emptyLines + 1);\n          emptyLines = 1;\n        } else if (0 === emptyLines) {\n          result += ' ';\n          emptyLines = 0;\n        } else {\n          result += common.repeat('\\n', emptyLines);\n          emptyLines = 0;\n        }\n      } else {\n        result += common.repeat('\\n', emptyLines + 1);\n        emptyLines = 0;\n      }\n\n      captureStart = position;\n\n      do { character = input.charCodeAt(++position); }\n      while (position < length &&\n             CHAR_LINE_FEED !== character &&\n             CHAR_CARRIAGE_RETURN !== character);\n\n      captureSegment(captureStart, position, false);\n    }\n\n    return true;\n  }\n\n  function readBlockSequence(nodeIndent) {\n    var _line,\n        _tag      = tag,\n        _result   = [],\n        following,\n        detected  = false;\n\n    if (null !== anchor) {\n      anchorMap[anchor] = _result;\n    }\n\n    while (position < length) {\n      if (CHAR_MINUS !== character) {\n        break;\n      }\n\n      following = input.charCodeAt(position + 1);\n\n      if (CHAR_SPACE           !== following &&\n          CHAR_TAB             !== following &&\n          CHAR_LINE_FEED       !== following &&\n          CHAR_CARRIAGE_RETURN !== following) {\n        break;\n      }\n\n      detected = true;\n      position += 1;\n      character = following;\n\n      if (skipSeparationSpace(true, -1)) {\n        if (lineIndent <= nodeIndent) {\n          _result.push(null);\n          continue;\n        }\n      }\n\n      _line = line;\n      composeNode(nodeIndent, CONTEXT_BLOCK_IN, false, true);\n      _result.push(result);\n      skipSeparationSpace(true, -1);\n\n      if ((line === _line || lineIndent > nodeIndent) && position < length) {\n        throwError('bad indentation of a sequence entry');\n      } else if (lineIndent < nodeIndent) {\n        break;\n      }\n    }\n\n    if (detected) {\n      tag = _tag;\n      kind = KIND_ARRAY;\n      result = _result;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function readBlockMapping(nodeIndent) {\n    var following,\n        allowCompact,\n        _line,\n        _tag          = tag,\n        _result       = {},\n        keyTag        = null,\n        keyNode       = null,\n        valueNode     = null,\n        atExplicitKey = false,\n        detected      = false;\n\n    if (null !== anchor) {\n      anchorMap[anchor] = _result;\n    }\n\n    while (position < length) {\n      following = input.charCodeAt(position + 1);\n      _line = line; // Save the current line.\n\n      if ((CHAR_QUESTION        === character ||\n           CHAR_COLON           === character) &&\n          (CHAR_SPACE           === following ||\n           CHAR_TAB             === following ||\n           CHAR_LINE_FEED       === following ||\n           CHAR_CARRIAGE_RETURN === following)) {\n\n        if (CHAR_QUESTION === character) {\n          if (atExplicitKey) {\n            storeMappingPair(_result, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = true;\n          allowCompact = true;\n\n        } else if (atExplicitKey) {\n          // i.e. CHAR_COLON === character after the explicit key.\n          atExplicitKey = false;\n          allowCompact = true;\n\n        } else {\n          throwError('incomplete explicit mapping pair; a key node is missed');\n        }\n\n        position += 1;\n        character = following;\n\n      } else if (composeNode(nodeIndent, CONTEXT_FLOW_OUT, false, true)) {\n        if (line === _line) {\n          // TODO: Remove this cycle when the flow readers will consume\n          // trailing whitespaces like the block readers.\n          while (CHAR_SPACE === character ||\n                 CHAR_TAB === character) {\n            character = input.charCodeAt(++position);\n          }\n\n          if (CHAR_COLON === character) {\n            character = input.charCodeAt(++position);\n\n            if (CHAR_SPACE           !== character &&\n                CHAR_TAB             !== character &&\n                CHAR_LINE_FEED       !== character &&\n                CHAR_CARRIAGE_RETURN !== character) {\n              throwError('a whitespace character is expected after the key-value separator within a block mapping');\n            }\n\n            if (atExplicitKey) {\n              storeMappingPair(_result, keyTag, keyNode, null);\n              keyTag = keyNode = valueNode = null;\n            }\n\n            detected = true;\n            atExplicitKey = false;\n            allowCompact = false;\n            keyTag = tag;\n            keyNode = result;\n\n          } else if (detected) {\n            throwError('can not read an implicit mapping pair; a colon is missed');\n\n          } else {\n            tag = _tag;\n            return true; // Keep the result of `composeNode`.\n          }\n\n        } else if (detected) {\n          throwError('can not read a block mapping entry; a multiline key may not be an implicit key');\n\n        } else {\n          tag = _tag;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else {\n        break;\n      }\n\n      if (line === _line || lineIndent > nodeIndent) {\n        if (composeNode(nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n          if (atExplicitKey) {\n            keyNode = result;\n          } else {\n            valueNode = result;\n          }\n        }\n\n        if (!atExplicitKey) {\n          storeMappingPair(_result, keyTag, keyNode, valueNode);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        // TODO: It is needed only for flow node readers. It should be removed\n        // when the flow readers will consume trailing whitespaces as well as\n        // the block readers.\n        skipSeparationSpace(true, -1);\n      }\n\n      if (lineIndent > nodeIndent && position < length) {\n        throwError('bad indentation of a mapping entry');\n      } else if (lineIndent < nodeIndent) {\n        break;\n      }\n    }\n\n    if (atExplicitKey) {\n      storeMappingPair(_result, keyTag, keyNode, null);\n    }\n\n    if (detected) {\n      tag = _tag;\n      kind = KIND_OBJECT;\n      result = _result;\n    }\n\n    return detected;\n  }\n\n  function readTagProperty() {\n    var _position,\n        isVerbatim = false,\n        isNamed    = false,\n        tagHandle,\n        tagName;\n\n    if (CHAR_EXCLAMATION !== character) {\n      return false;\n    }\n\n    if (null !== tag) {\n      throwError('duplication of a tag property');\n    }\n\n    character = input.charCodeAt(++position);\n\n    if (CHAR_LESS_THAN === character) {\n      isVerbatim = true;\n      character = input.charCodeAt(++position);\n\n    } else if (CHAR_EXCLAMATION === character) {\n      isNamed = true;\n      tagHandle = '!!';\n      character = input.charCodeAt(++position);\n\n    } else {\n      tagHandle = '!';\n    }\n\n    _position = position;\n\n    if (isVerbatim) {\n      do { character = input.charCodeAt(++position); }\n      while (position < length && CHAR_GREATER_THAN !== character);\n\n      if (position < length) {\n        tagName = input.slice(_position, position);\n        character = input.charCodeAt(++position);\n      } else {\n        throwError('unexpected end of the stream within a verbatim tag');\n      }\n    } else {\n      while (position < length &&\n             CHAR_SPACE           !== character &&\n             CHAR_TAB             !== character &&\n             CHAR_LINE_FEED       !== character &&\n             CHAR_CARRIAGE_RETURN !== character) {\n\n        if (CHAR_EXCLAMATION === character) {\n          if (!isNamed) {\n            tagHandle = input.slice(_position - 1, position + 1);\n\n            if (validate && !PATTERN_TAG_HANDLE.test(tagHandle)) {\n              throwError('named tag handle cannot contain such characters');\n            }\n\n            isNamed = true;\n            _position = position + 1;\n          } else {\n            throwError('tag suffix cannot contain exclamation marks');\n          }\n        }\n\n        character = input.charCodeAt(++position);\n      }\n\n      tagName = input.slice(_position, position);\n\n      if (validate && PATTERN_FLOW_INDICATORS.test(tagName)) {\n        throwError('tag suffix cannot contain flow indicator characters');\n      }\n    }\n\n    if (validate && tagName && !PATTERN_TAG_URI.test(tagName)) {\n      throwError('tag name cannot contain such characters: ' + tagName);\n    }\n\n    if (isVerbatim) {\n      tag = tagName;\n\n    } else if (_hasOwnProperty.call(tagMap, tagHandle)) {\n      tag = tagMap[tagHandle] + tagName;\n\n    } else if ('!' === tagHandle) {\n      tag = '!' + tagName;\n\n    } else if ('!!' === tagHandle) {\n      tag = 'tag:yaml.org,2002:' + tagName;\n\n    } else {\n      throwError('undeclared tag handle \"' + tagHandle + '\"');\n    }\n\n    return true;\n  }\n\n  function readAnchorProperty() {\n    var _position;\n\n    if (CHAR_AMPERSAND !== character) {\n      return false;\n    }\n\n    if (null !== anchor) {\n      throwError('duplication of an anchor property');\n    }\n\n    character = input.charCodeAt(++position);\n    _position = position;\n\n    while (position < length &&\n           CHAR_SPACE                !== character &&\n           CHAR_TAB                  !== character &&\n           CHAR_LINE_FEED            !== character &&\n           CHAR_CARRIAGE_RETURN      !== character &&\n           CHAR_COMMA                !== character &&\n           CHAR_LEFT_SQUARE_BRACKET  !== character &&\n           CHAR_RIGHT_SQUARE_BRACKET !== character &&\n           CHAR_LEFT_CURLY_BRACKET   !== character &&\n           CHAR_RIGHT_CURLY_BRACKET  !== character) {\n      character = input.charCodeAt(++position);\n    }\n\n    if (position === _position) {\n      throwError('name of an anchor node must contain at least one character');\n    }\n\n    anchor = input.slice(_position, position);\n    return true;\n  }\n\n  function readAlias() {\n    var _position, alias;\n\n    if (CHAR_ASTERISK !== character) {\n      return false;\n    }\n\n    character = input.charCodeAt(++position);\n    _position = position;\n\n    while (position < length &&\n           CHAR_SPACE                !== character &&\n           CHAR_TAB                  !== character &&\n           CHAR_LINE_FEED            !== character &&\n           CHAR_CARRIAGE_RETURN      !== character &&\n           CHAR_COMMA                !== character &&\n           CHAR_LEFT_SQUARE_BRACKET  !== character &&\n           CHAR_RIGHT_SQUARE_BRACKET !== character &&\n           CHAR_LEFT_CURLY_BRACKET   !== character &&\n           CHAR_RIGHT_CURLY_BRACKET  !== character) {\n      character = input.charCodeAt(++position);\n    }\n\n    if (position === _position) {\n      throwError('name of an alias node must contain at least one character');\n    }\n\n    alias = input.slice(_position, position);\n\n    if (!anchorMap.hasOwnProperty(alias)) {\n      throwError('unidentified alias \"' + alias + '\"');\n    }\n\n    result = anchorMap[alias];\n    skipSeparationSpace(true, -1);\n    return true;\n  }\n\n  function composeNode(parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles,\n        allowBlockScalars,\n        allowBlockCollections,\n        atNewLine  = false,\n        isIndented = true,\n        hasContent = false,\n        typeIndex,\n        typeQuantity,\n        type,\n        typeLoader,\n        flowIndent,\n        blockIndent,\n        _result;\n\n    tag    = null;\n    anchor = null;\n    kind   = null;\n    result = null;\n\n    allowBlockStyles = allowBlockScalars = allowBlockCollections =\n      CONTEXT_BLOCK_OUT === nodeContext ||\n      CONTEXT_BLOCK_IN  === nodeContext;\n\n    if (allowToSeek) {\n      if (skipSeparationSpace(true, -1)) {\n        atNewLine = true;\n\n        if (lineIndent === parentIndent) {\n          isIndented = false;\n\n        } else if (lineIndent > parentIndent) {\n          isIndented = true;\n\n        } else {\n          return false;\n        }\n      }\n    }\n\n    if (isIndented) {\n      while (readTagProperty() || readAnchorProperty()) {\n        if (skipSeparationSpace(true, -1)) {\n          atNewLine = true;\n\n          if (lineIndent > parentIndent) {\n            isIndented = true;\n            allowBlockCollections = allowBlockStyles;\n\n          } else if (lineIndent === parentIndent) {\n            isIndented = false;\n            allowBlockCollections = allowBlockStyles;\n\n          } else {\n            return true;\n          }\n        } else {\n          allowBlockCollections = false;\n        }\n      }\n    }\n\n    if (allowBlockCollections) {\n      allowBlockCollections = atNewLine || allowCompact;\n    }\n\n    if (isIndented || CONTEXT_BLOCK_OUT === nodeContext) {\n      if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n        flowIndent = parentIndent;\n      } else {\n        flowIndent = parentIndent + 1;\n      }\n\n      blockIndent = position - lineStart;\n\n      if (isIndented) {\n        if (allowBlockCollections &&\n            (readBlockSequence(blockIndent) ||\n             readBlockMapping(blockIndent)) ||\n            readFlowCollection(flowIndent)) {\n          hasContent = true;\n        } else {\n          if ((allowBlockScalars && readBlockScalar(flowIndent)) ||\n              readSingleQuotedScalar(flowIndent) ||\n              readDoubleQuotedScalar(flowIndent)) {\n            hasContent = true;\n\n          } else if (readAlias()) {\n            hasContent = true;\n\n            if (null !== tag || null !== anchor) {\n              throwError('alias node should not have any properties');\n            }\n\n          } else if (readPlainScalar(flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n            hasContent = true;\n\n            if (null === tag) {\n              tag = '?';\n            }\n          }\n\n          if (null !== anchor) {\n            anchorMap[anchor] = result;\n          }\n        }\n      } else {\n        hasContent = allowBlockCollections && readBlockSequence(blockIndent);\n      }\n    }\n\n    if (null !== tag && '!' !== tag) {\n      if ('?' === tag) {\n        if (resolve) {\n          for (typeIndex = 0, typeQuantity = implicitTypes.length;\n               typeIndex < typeQuantity;\n               typeIndex += 1) {\n            type = implicitTypes[typeIndex];\n\n            // Implicit resolving is not allowed for non-scalar types, and '?'\n            // non-specific tag is only assigned to plain scalars. So, it isn't\n            // needed to check for 'kind' conformity.\n            _result = type.loader.resolver(result, false);\n\n            if (NIL !== _result) {\n              tag = type.tag;\n              result = _result;\n              break;\n            }\n          }\n        }\n      } else if (_hasOwnProperty.call(typeMap, tag)) {\n        typeLoader = typeMap[tag].loader;\n\n        if (null !== result && typeLoader.kind !== kind) {\n          throwError('unacceptable node kind for !<' + tag + '> tag; it should be \"' + typeLoader.kind + '\", not \"' + kind + '\"');\n        }\n\n        if (typeLoader.resolver) {\n          _result = typeLoader.resolver(result, true);\n\n          if (NIL !== _result) {\n            result = _result;\n          } else {\n            throwError('cannot resolve a node with !<' + tag + '> explicit tag');\n          }\n        }\n      } else {\n        throwWarning('unknown tag !<' + tag + '>');\n      }\n    }\n\n    return null !== tag || null !== anchor || hasContent;\n  }\n\n  function readDocument() {\n    var documentStart = position,\n        _position,\n        directiveName,\n        directiveArgs,\n        hasDirectives = false;\n\n    version = null;\n    checkLineBreaks = legacy;\n    tagMap = {};\n    anchorMap = {};\n\n    while (position < length) {\n      skipSeparationSpace(true, -1);\n\n      if (lineIndent > 0 || CHAR_PERCENT !== character) {\n        break;\n      }\n\n      hasDirectives = true;\n      character = input.charCodeAt(++position);\n      _position = position;\n\n      while (position < length &&\n             CHAR_SPACE           !== character &&\n             CHAR_TAB             !== character &&\n             CHAR_LINE_FEED       !== character &&\n             CHAR_CARRIAGE_RETURN !== character) {\n        character = input.charCodeAt(++position);\n      }\n\n      directiveName = input.slice(_position, position);\n      directiveArgs = [];\n\n      if (directiveName.length < 1) {\n        throwError('directive name must not be less than one character in length');\n      }\n\n      while (position < length) {\n        while (CHAR_SPACE === character || CHAR_TAB === character) {\n          character = input.charCodeAt(++position);\n        }\n\n        if (CHAR_SHARP === character) {\n          do { character = input.charCodeAt(++position); }\n          while (position < length &&\n                 CHAR_LINE_FEED !== character &&\n                 CHAR_CARRIAGE_RETURN !== character);\n          break;\n        }\n\n        if (CHAR_LINE_FEED === character || CHAR_CARRIAGE_RETURN === character) {\n          break;\n        }\n\n        _position = position;\n\n        while (position < length &&\n               CHAR_SPACE           !== character &&\n               CHAR_TAB             !== character &&\n               CHAR_LINE_FEED       !== character &&\n               CHAR_CARRIAGE_RETURN !== character) {\n          character = input.charCodeAt(++position);\n        }\n\n        directiveArgs.push(input.slice(_position, position));\n      }\n\n      if (position < length) {\n        readLineBreak();\n      }\n\n      if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n        directiveHandlers[directiveName](directiveName, directiveArgs);\n      } else {\n        throwWarning('unknown document directive \"' + directiveName + '\"');\n      }\n    }\n\n    skipSeparationSpace(true, -1);\n\n    if (0 === lineIndent &&\n        CHAR_MINUS === character &&\n        CHAR_MINUS === input.charCodeAt(position + 1) &&\n        CHAR_MINUS === input.charCodeAt(position + 2)) {\n      position += 3;\n      character = input.charCodeAt(position);\n      skipSeparationSpace(true, -1);\n\n    } else if (hasDirectives) {\n      throwError('directives end mark is expected');\n    }\n\n    composeNode(lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(true, -1);\n\n    if (validate && checkLineBreaks &&\n        PATTERN_NON_ASCII_LINE_BREAKS.test(input.slice(documentStart, position))) {\n      throwWarning('non-ASCII line breaks are interpreted as content');\n    }\n\n    output(result);\n\n    if (position === lineStart && testDocumentSeparator()) {\n      if (CHAR_DOT === character) {\n        position += 3;\n        character = input.charCodeAt(position);\n        skipSeparationSpace(true, -1);\n      }\n      return;\n    }\n\n    if (position < length) {\n      throwError('end of the stream or a document separator is expected');\n    } else {\n      return;\n    }\n  }\n\n  if (validate && PATTERN_NON_PRINTABLE.test(input)) {\n    throwError('the stream contains non-printable characters');\n  }\n\n  while (CHAR_SPACE === character) {\n    lineIndent += 1;\n    character = input.charCodeAt(++position);\n  }\n\n  while (position < length) {\n    readDocument();\n  }\n}\n\n\nfunction load(input, options) {\n  var result = null, received = false;\n\n  function callback(data) {\n    if (!received) {\n      result = data;\n      received = true;\n    } else {\n      throw new YAMLException('expected a single document in the stream, but found more');\n    }\n  }\n\n  loadAll(input, callback, options);\n\n  return result;\n}\n\n\nfunction safeLoadAll(input, output, options) {\n  loadAll(input, output, common.extend({ schema: SAFE_SCHEMA }, options));\n}\n\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({ schema: SAFE_SCHEMA }, options));\n}\n\n\nmodule.exports.loadAll     = loadAll;\nmodule.exports.load        = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad    = safeLoad;\n"]}