{"version":3,"sources":["binary.js"],"names":[],"mappings":"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","file":"binary-compiled.js","sourcesContent":["// Modified from:\n// https://raw.github.com/kanaka/noVNC/d890e8640f20fba3215ba7be8e0ff145aeb8c17c/include/base64.js\n\n'use strict';\n\n\nvar NodeBuffer = require('buffer').Buffer; // A trick for browserified version.\nvar common     = require('../common');\nvar NIL        = common.NIL;\nvar Type       = require('../type');\n\n\n\nvar BASE64_PADDING = '=';\n\nvar BASE64_BINTABLE = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1,  0, -1, -1,\n  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1\n];\n\nvar BASE64_CHARTABLE =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n\nfunction resolveYamlBinary(object /*, explicit*/) {\n  var value, code, idx = 0, result = [], leftbits, leftdata;\n\n  leftbits = 0; // number of bits decoded, but yet to be appended\n  leftdata = 0; // bits decoded, but yet to be appended\n\n  // Convert one by one.\n  for (idx = 0; idx < object.length; idx += 1) {\n    code = object.charCodeAt(idx);\n    value = BASE64_BINTABLE[code & 0x7F];\n\n    // Skip LF(NL) || CR\n    if (0x0A !== code && 0x0D !== code) {\n      // Fail on illegal characters\n      if (-1 === value) {\n        return NIL;\n      }\n\n      // Collect data into leftdata, update bitcount\n      leftdata = (leftdata << 6) | value;\n      leftbits += 6;\n\n      // If we have 8 or more bits, append 8 bits to the result\n      if (leftbits >= 8) {\n        leftbits -= 8;\n\n        // Append if not padding.\n        if (BASE64_PADDING !== object.charAt(idx)) {\n          result.push((leftdata >> leftbits) & 0xFF);\n        }\n\n        leftdata &= (1 << leftbits) - 1;\n      }\n    }\n  }\n\n  // If there are any bits left, the base64 string was corrupted\n  if (leftbits) {\n    return NIL;\n  } else {\n    return new NodeBuffer(result);\n  }\n}\n\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', index, length, rest;\n\n  // Convert every three bytes to 4 ASCII characters.\n  for (index = 0, length = object.length - 2; index < length; index += 3) {\n    result += BASE64_CHARTABLE[object[index + 0] >> 2];\n    result += BASE64_CHARTABLE[((object[index + 0] & 0x03) << 4) + (object[index + 1] >> 4)];\n    result += BASE64_CHARTABLE[((object[index + 1] & 0x0F) << 2) + (object[index + 2] >> 6)];\n    result += BASE64_CHARTABLE[object[index + 2] & 0x3F];\n  }\n\n  rest = object.length % 3;\n\n  // Convert the remaining 1 or 2 bytes, padding out to 4 characters.\n  if (0 !== rest) {\n    index = object.length - rest;\n    result += BASE64_CHARTABLE[object[index + 0] >> 2];\n\n    if (2 === rest) {\n      result += BASE64_CHARTABLE[((object[index + 0] & 0x03) << 4) + (object[index + 1] >> 4)];\n      result += BASE64_CHARTABLE[(object[index + 1] & 0x0F) << 2];\n      result += BASE64_PADDING;\n    } else {\n      result += BASE64_CHARTABLE[(object[index + 0] & 0x03) << 4];\n      result += BASE64_PADDING + BASE64_PADDING;\n    }\n  }\n\n  return result;\n}\n\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  loader: {\n    kind: 'string',\n    resolver: resolveYamlBinary\n  },\n  dumper: {\n    kind: 'object',\n    instanceOf: NodeBuffer,\n    representer: representYamlBinary\n  }\n});\n"]}