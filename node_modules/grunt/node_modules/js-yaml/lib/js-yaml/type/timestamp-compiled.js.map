{"version":3,"sources":["timestamp.js"],"names":[],"mappings":"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","file":"timestamp-compiled.js","sourcesContent":["'use strict';\n\n\nvar NIL  = require('../common').NIL;\nvar Type = require('../type');\n\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:(?:[Tt]|[ \\\\t]+)'              + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?)?$');         // [11] tz_minute\n\n\nfunction resolveYamlTimestamp(object /*, explicit*/) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, data;\n\n  match = YAML_TIMESTAMP_REGEXP.exec(object);\n\n  if (null === match) {\n    return NIL;\n  }\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if ('-' === match[9]) {\n      delta = -delta;\n    }\n  }\n\n  data = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) {\n    data.setTime(data.getTime() - delta);\n  }\n\n  return data;\n}\n\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  loader: {\n    kind: 'string',\n    resolver: resolveYamlTimestamp\n  },\n  dumper: {\n    kind: 'object',\n    instanceOf: Date,\n    representer: representYamlTimestamp\n  }\n});\n"]}