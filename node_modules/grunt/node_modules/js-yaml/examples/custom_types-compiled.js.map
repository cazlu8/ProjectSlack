{"version":3,"sources":["custom_types.js"],"names":[],"mappings":"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","file":"custom_types-compiled.js","sourcesContent":["'use strict';\n\n\nvar fs   = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar yaml = require('../lib/js-yaml');\n\n\n// Let define a couple of classes...\n\nfunction Point(x, y, z) {\n  this.klass = 'Point';\n  this.x     = x;\n  this.y     = y;\n  this.z     = z;\n}\n\n\nfunction Space(height, width, points) {\n  if (points) {\n    if (!points.every(function (point) { return point instanceof Point; })) {\n      throw new Error('A non-Point inside a points array!');\n    }\n  }\n\n  this.klass  = 'Space';\n  this.height = height;\n  this.width  = width;\n  this.points = points;\n}\n\n\n// Let define YAML types to load and dump our Point/Space objects.\n\nvar pointYamlType = new yaml.Type('!point', {\n  // The information used to load a Point.\n  loader: {\n    kind: 'array', // It must be an array. (sequence in YAML)\n    resolver: function (object) {\n      // It must contain exactly tree elements.\n      if (3 === object.length) {\n        return new Point(object[0], object[1], object[2]);\n\n      // Otherwise, it is NOT a Point.\n      } else {\n        return yaml.NIL;\n      }\n    }\n  },\n  // The information used to dump a Point.\n  dumper: {\n    kind: 'object', // It must be an object but not an array.\n    instanceOf: Point, // Also, it must be an instance of Point class.\n    representer: function (point) {\n      // And it should be represented in YAML as three-element sequence.\n      return [ point.x, point.y, point.z ];\n    }\n  }\n});\n\n\nvar spaceYamlType = new yaml.Type('!space', {\n  loader: {\n    kind: 'object', // 'object' here means 'mapping' in YAML.\n    resolver: function (object) {\n      return new Space(object.height, object.width, object.points);\n    }\n  },\n  dumper: {\n    kind: 'object',\n    instanceOf: Space\n    // The representer is omitted here. So, Space objects will be dumped as is.\n    // That is regular mapping with three key-value pairs but with !space tag.\n  }\n});\n\n\n// After our types are defined, it's time to join them into a schema.\n\nvar SPACE_SCHEMA = yaml.Schema.create([ spaceYamlType, pointYamlType ]);\n\n\n// And read a document using that schema.\n\nfs.readFile(path.join(__dirname, 'custom_types.yaml'), 'utf8', function (error, data) {\n  var loaded;\n\n  if (!error) {\n    loaded = yaml.load(data, { schema: SPACE_SCHEMA });\n    console.log(util.inspect(loaded, false, 20, true));\n  } else {\n    console.error(error.stack || error.message || String(error));\n  }\n});\n\n\n// There are some exports to play with this example interactively.\n\nmodule.exports.Point         = Point;\nmodule.exports.Space         = Space;\nmodule.exports.pointYamlType = pointYamlType;\nmodule.exports.spaceYamlType = spaceYamlType;\nmodule.exports.SPACE_SCHEMA  = SPACE_SCHEMA;\n"]}