{"version":3,"sources":["findup-sync_test.js"],"names":[],"mappings":"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","file":"findup-sync_test-compiled.js","sourcesContent":["'use strict';\n\n// Nodejs lib.\nvar path = require('path');\n\nvar findup = require('../lib/findup-sync.js');\n\n// Get a relative path.\nvar rel = function(abspath) {\n  return typeof abspath === 'string' ? path.relative('.', abspath) : abspath;\n};\n\nexports['findup'] = {\n  setUp: function(done) {\n    this.cwd = process.cwd();\n    done();\n  },\n  tearDown: function(done) {\n    process.chdir(this.cwd);\n    done();\n  },\n  'simple': function(test) {\n    test.expect(8);\n    var opts = {cwd: 'test/fixtures/a/b'};\n    test.equal(rel(findup('foo.txt', opts)), path.normalize('test/fixtures/a/foo.txt'), 'should find files');\n    test.equal(rel(findup('bar.txt', opts)), path.normalize('test/fixtures/a/b/bar.txt'), 'should find files');\n    test.equal(rel(findup('a.txt', opts)), path.normalize('test/fixtures/a.txt'), 'should find files');\n    test.equal(rel(findup('?.txt', opts)), path.normalize('test/fixtures/a.txt'), 'should support glob patterns');\n    test.equal(rel(findup('*.txt', opts)), path.normalize('test/fixtures/a/b/bar.txt'), 'should find the first thing that matches the glob pattern');\n    test.equal(rel(findup(['b*.txt', 'f*.txt'], opts)), path.normalize('test/fixtures/a/b/bar.txt'), 'should find the first thing that matches any of the glob patterns');\n    test.equal(rel(findup(['f*.txt', 'b*.txt'], opts)), path.normalize('test/fixtures/a/b/bar.txt'), 'should find the first thing that matches any of the glob patterns');\n    test.equal(findup('not-gonna-exist-i-hope.txt', opts), null, 'should returning null if no files found');\n    test.done();\n  },\n  'cwd': function(test) {\n    test.expect(8);\n    process.chdir('test/fixtures/a/b');\n    test.equal(rel(findup('foo.txt')), path.normalize('../foo.txt'), 'should find files');\n    test.equal(rel(findup('bar.txt')), 'bar.txt', 'should find files');\n    test.equal(rel(findup('a.txt')), path.normalize('../../a.txt'), 'should find files');\n    test.equal(rel(findup('?.txt')), path.normalize('../../a.txt'), 'should support glob patterns');\n    test.equal(rel(findup('*.txt')), 'bar.txt', 'should find the first thing that matches the glob pattern');\n    test.equal(rel(findup(['b*.txt', 'f*.txt'])), 'bar.txt', 'should find the first thing that matches any of the glob patterns');\n    test.equal(rel(findup(['f*.txt', 'b*.txt'])), 'bar.txt', 'should find the first thing that matches any of the glob patterns');\n    test.equal(findup('not-gonna-exist-i-hope.txt'), null, 'should returning null if no files found');\n    test.done();\n  },\n};\n"]}