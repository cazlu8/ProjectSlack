{"version":3,"sources":["memory-leak.js"],"names":[],"mappings":";;AAEA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;AAC9B,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAA;AAC5B,IAAI,IAAI,GAAG,CAAC,CAAA;AACZ,SAAS,CAAC,GAAG;AACX,MAAI,EAAG,CAAA;AACP,MAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;CAClB;;AAED,SAAS,KAAK,GAAG;AACf,MAAI,EAAG,CAAA;CACR;;AAED,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;;AAE5B,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC5B,KAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,EAAA,CAAC,CAAC;;AAEhB,QAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EACb,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;GACf;;AAED,IAAE,EAAE,CAAA;;AAEJ,MAAI,KAAK,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;;;AAGjC,MAAI,SAAS,GAAG,IAAI,CAAA;;;AAGpB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;AAC9B,KAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,EAAA,CAAC,CAAC;;AAEhB,QAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EACb,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;GACf;;AAED,IAAE,EAAE,CAAA;;AAEJ,MAAI,GAAG,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;AAC/B,GAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,EAAE,eAAe,CAAC,CAAA;;AAEzC,SAAO,CAAC,KAAK,CAAC,aAAa,GACb,WAAW,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;AACvC,GAAC,CAAC,IAAI,EAAE,CAAC;AACT,GAAC,CAAC,GAAG,EAAE,CAAC;CACT,CAAC,CAAA","file":"memory-leak-compiled.js","sourcesContent":["#!/usr/bin/env node --expose_gc\n\nvar weak = require('weak');\nvar test = require('tap').test\nvar LRU = require('../')\nvar l = new LRU({ max: 10 })\nvar refs = 0\nfunction X() {\n  refs ++\n  weak(this, deref)\n}\n\nfunction deref() {\n  refs --\n}\n\ntest('no leaks', function (t) {\n  // fill up the cache\n  for (var i = 0; i < 100; i++) {\n    l.set(i, new X);\n    // throw some gets in there, too.\n    if (i % 2 === 0)\n      l.get(i / 2)\n  }\n\n  gc()\n\n  var start = process.memoryUsage()\n\n  // capture the memory\n  var startRefs = refs\n\n  // do it again, but more\n  for (var i = 0; i < 10000; i++) {\n    l.set(i, new X);\n    // throw some gets in there, too.\n    if (i % 2 === 0)\n      l.get(i / 2)\n  }\n\n  gc()\n\n  var end = process.memoryUsage()\n  t.equal(refs, startRefs, 'no leaky refs')\n\n  console.error('start: %j\\n' +\n                'end:   %j', start, end);\n  t.pass();\n  t.end();\n})\n"]}