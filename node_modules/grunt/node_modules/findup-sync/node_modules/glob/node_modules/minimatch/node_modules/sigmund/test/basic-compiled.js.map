{"version":3,"sources":["basic.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;AAC9B,IAAI,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;;;;;;AAOtC,IAAI,IAAI,GAAG,sBAAsB,CAAA;AACjC,IAAI,IAAI,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAA;AACnD,IAAI,IAAI,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,OAAO,EAAC,CAAC,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,MAAM,CAAC,EAAC,CAAA;;AAE/C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;AAC3C,IAAI,CAAC,CAAC,GAAG,KAAK,CAAA;AACd,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAA;AACtB,IAAI,SAAS,GAAG,2BAA2B,CAAA;;AAE3C,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;AACvB,KAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAA;AAC5B,KAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAA;AAC5B,KAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAA;AACjC,KAAC,CAAC,GAAG,EAAE,CAAA;CACV,CAAC,CAAA","file":"basic-compiled.js","sourcesContent":["var test = require('tap').test\nvar sigmund = require('../sigmund.js')\n\n\n// occasionally there are duplicates\n// that's an acceptable edge-case.  JSON.stringify and util.inspect\n// have some collision potential as well, though less, and collision\n// detection is expensive.\nvar hash = '{abc/def/g{0h1i2{jkl'\nvar obj1 = {a:'b',c:/def/,g:['h','i',{j:'',k:'l'}]}\nvar obj2 = {a:'b',c:'/def/',g:['h','i','{jkl']}\n\nvar obj3 = JSON.parse(JSON.stringify(obj1))\nobj3.c = /def/\nobj3.g[2].cycle = obj3\nvar cycleHash = '{abc/def/g{0h1i2{jklcycle'\n\ntest('basic', function (t) {\n    t.equal(sigmund(obj1), hash)\n    t.equal(sigmund(obj2), hash)\n    t.equal(sigmund(obj3), cycleHash)\n    t.end()\n})\n\n"]}