{"version":3,"sources":["root.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAEtB,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE,CAAA;AAC3B,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;;AAExB,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACzB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE;AACvB,MAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE;AACpE,KAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AACb,KAAC,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;AACnB,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH,CAAC,CAAA;;AAGF,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE;AACvB,SAAO,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;AAC1C,MAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE;AAClF,KAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AACb,QAAI,MAAM,GAAG,CACT,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAClD,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AACjB,aAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;KAC3D,CAAC,CAAA;;AAEJ,KAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;AACvB,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH,CAAC,CAAA;;AAEF,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE;AACrC,MAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE;AAC9F,KAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;AACb,KAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAE,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AACrF,aAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;KAC3D,CAAC,CAAC,CAAA;AACH,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH,CAAC,CAAA;;AAEF,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;AAC1B,SAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;AACtB,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"root-compiled.js","sourcesContent":["var t = require(\"tap\")\n\nvar origCwd = process.cwd()\nprocess.chdir(__dirname)\n\nvar glob = require('../')\nvar path = require('path')\n\nt.test('.', function (t) {\n  glob('/b*/**', { globDebug: true, root: '.' }, function (er, matches) {\n    t.ifError(er)\n    t.like(matches, [])\n    t.end()\n  })\n})\n\n\nt.test('a', function (t) {\n  console.error(\"root=\" + path.resolve('a'))\n  glob('/b*/**', { globDebug: true, root: path.resolve('a') }, function (er, matches) {\n    t.ifError(er)\n    var wanted = [\n        '/b', '/b/c', '/b/c/d', '/bc', '/bc/e', '/bc/e/f'\n      ].map(function (m) {\n        return path.join(path.resolve('a'), m).replace(/\\\\/g, '/')\n      })\n\n    t.like(matches, wanted)\n    t.end()\n  })\n})\n\nt.test('root=a, cwd=a/b', function (t) {\n  glob('/b*/**', { globDebug: true, root: 'a', cwd: path.resolve('a/b') }, function (er, matches) {\n    t.ifError(er)\n    t.like(matches, [ '/b', '/b/c', '/b/c/d', '/bc', '/bc/e', '/bc/e/f' ].map(function (m) {\n      return path.join(path.resolve('a'), m).replace(/\\\\/g, '/')\n    }))\n    t.end()\n  })\n})\n\nt.test('cd -', function (t) {\n  process.chdir(origCwd)\n  t.end()\n})\n"]}