{"version":3,"sources":["nopt.js"],"names":[],"mappings":";;AACA,IAAI,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC;IAC7B,KAAK,GAAG,EAAE,GAAG,EAAE,MAAM;AACX,MAAI,EAAE,OAAO;AACb,MAAI,EAAE,OAAO;AACb,MAAI,EAAE,KAAK;AACX,YAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;AAC3B,YAAU,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;AAC3B,aAAW,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;AAC7B,KAAG,EAAE,MAAM,EAAE;IACvB,UAAU,GAAG,EAAE,CAAC,EAAE,CAAE,OAAO,EAAE,SAAS,CAAE;AACzB,GAAC,EAAE,CAAE,QAAQ,CAAE;AACf,IAAE,EAAE,CAAE,WAAW,CAAE;AACnB,KAAG,EAAE,CAAE,aAAa,EAAE,gBAAgB,EAAE,aAAa,EAAE,MAAM,CAAE;AAC/D,KAAG,EAAE,CAAC,QAAQ,CAAC;AACf,GAAC,EAAE,CAAC,QAAQ,CAAC;AACb,GAAC,EAAE,CAAC,QAAQ,CAAC;AACb,GAAC,EAAE,CAAE,OAAO,EAAE,KAAK,CAAE,EAAE;IACtC,MAAM,GAAG,IAAI,CAAE,KAAK,EACL,UAAU,EACV,OAAO,CAAC,IAAI,EACZ,CAAC,CAAE,CAAA;;AAEtB,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;;AAE7B,IAAI,MAAM,CAAC,IAAI,EAAE;AACf,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;AACf,SAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AAC9B,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;AACf,SAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;AACpB,SAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAE,CAAC,EAAE;AAChD,QAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACnB,QAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACvB,aAAO,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE;AAAE,eAAO,IAAI,CAAC,IAAI,CAAA;OAAE,CAAC,CAAC,CAAA;KAC3D;AACD,WAAO,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;GAC9B,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;AACxB,KAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AACd,WAAO,CAAC,CAAA;GACT,EAAE,EAAE,CAAC,CAAC,CAAA;AACP,SAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;AACf,SAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;AACzB,SAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;CACxB","file":"nopt-compiled.js","sourcesContent":["#!/usr/bin/env node\nvar nopt = require(\"../lib/nopt\")\n  , types = { num: Number\n            , bool: Boolean\n            , help: Boolean\n            , list: Array\n            , \"num-list\": [Number, Array]\n            , \"str-list\": [String, Array]\n            , \"bool-list\": [Boolean, Array]\n            , str: String }\n  , shorthands = { s: [ \"--str\", \"astring\" ]\n                 , b: [ \"--bool\" ]\n                 , nb: [ \"--no-bool\" ]\n                 , tft: [ \"--bool-list\", \"--no-bool-list\", \"--bool-list\", \"true\" ]\n                 , \"?\": [\"--help\"]\n                 , h: [\"--help\"]\n                 , H: [\"--help\"]\n                 , n: [ \"--num\", \"125\" ] }\n  , parsed = nopt( types\n                 , shorthands\n                 , process.argv\n                 , 2 )\n\nconsole.log(\"parsed\", parsed)\n\nif (parsed.help) {\n  console.log(\"\")\n  console.log(\"nopt cli tester\")\n  console.log(\"\")\n  console.log(\"types\")\n  console.log(Object.keys(types).map(function M (t) {\n    var type = types[t]\n    if (Array.isArray(type)) {\n      return [t, type.map(function (type) { return type.name })]\n    }\n    return [t, type && type.name]\n  }).reduce(function (s, i) {\n    s[i[0]] = i[1]\n    return s\n  }, {}))\n  console.log(\"\")\n  console.log(\"shorthands\")\n  console.log(shorthands)\n}\n"]}