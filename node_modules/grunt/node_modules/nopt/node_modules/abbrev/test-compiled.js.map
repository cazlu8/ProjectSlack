{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACnC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;AAC7B,IAAI,KAAK,GAAG,CAAC,CAAA;;AAEb,SAAS,IAAI,CAAE,IAAI,EAAE,MAAM,EAAE;AAC3B,OAAK,EAAE,CAAA;AACP,MAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA;AACzB,QAAM,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAC7B,SAAS,GAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,GACnE,UAAU,GAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA;AAClC,QAAM,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;AACpC,QAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,MAAM,EAClD,SAAS,GAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,GACnF,UAAU,GAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA;AAClC,SAAO,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;CACtC;;AAED,IAAI,CAAC,CAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAE,EAClD,EAAE,GAAG,EAAE,MAAM;AACX,MAAI,EAAE,MAAM;AACZ,KAAG,EAAE,OAAO;AACZ,MAAI,EAAE,OAAO;AACb,OAAK,EAAE,OAAO;CACf,CAAC,CAAA;AACF,IAAI,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,EACrC,EAAE,IAAI,EAAE,MAAM;AACZ,MAAI,EAAE,MAAM;AACZ,KAAG,EAAE,MAAM;AACX,MAAI,EAAE,MAAM;AACZ,KAAG,EAAE,MAAM;AACX,MAAI,EAAE,MAAM;CACb,CAAC,CAAA;AACF,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,EAChD,EAAE,CAAC,EAAE,GAAG;AACN,IAAE,EAAE,IAAI;AACR,KAAG,EAAE,KAAK;AACV,MAAI,EAAE,MAAM;AACZ,OAAK,EAAE,OAAO;AACd,IAAE,EAAE,MAAM;AACV,KAAG,EAAE,MAAM;AACX,MAAI,EAAE,MAAM;CACb,CAAC,CAAA;;AAEF,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["var abbrev = require('./abbrev.js')\nvar assert = require(\"assert\")\nvar util = require(\"util\")\n\nconsole.log(\"TAP Version 13\")\nvar count = 0\n\nfunction test (list, expect) {\n  count++\n  var actual = abbrev(list)\n  assert.deepEqual(actual, expect,\n    \"abbrev(\"+util.inspect(list)+\") === \" + util.inspect(expect) + \"\\n\"+\n    \"actual: \"+util.inspect(actual))\n  actual = abbrev.apply(exports, list)\n  assert.deepEqual(abbrev.apply(exports, list), expect,\n    \"abbrev(\"+list.map(JSON.stringify).join(\",\")+\") === \" + util.inspect(expect) + \"\\n\"+\n    \"actual: \"+util.inspect(actual))\n  console.log('ok - ' + list.join(' '))\n}\n\ntest([ \"ruby\", \"ruby\", \"rules\", \"rules\", \"rules\" ],\n{ rub: 'ruby'\n, ruby: 'ruby'\n, rul: 'rules'\n, rule: 'rules'\n, rules: 'rules'\n})\ntest([\"fool\", \"foom\", \"pool\", \"pope\"],\n{ fool: 'fool'\n, foom: 'foom'\n, poo: 'pool'\n, pool: 'pool'\n, pop: 'pope'\n, pope: 'pope'\n})\ntest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"acde\"],\n{ a: 'a'\n, ab: 'ab'\n, abc: 'abc'\n, abcd: 'abcd'\n, abcde: 'abcde'\n, ac: 'acde'\n, acd: 'acde'\n, acde: 'acde'\n})\n\nconsole.log(\"0..%d\", count)\n"]}