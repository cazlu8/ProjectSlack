{"version":3,"sources":["abbrev.js"],"names":[],"mappings":"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","file":"abbrev-compiled.js","sourcesContent":["\nmodule.exports = exports = abbrev.abbrev = abbrev\n\nabbrev.monkeyPatch = monkeyPatch\n\nfunction monkeyPatch () {\n  Object.defineProperty(Array.prototype, 'abbrev', {\n    value: function () { return abbrev(this) },\n    enumerable: false, configurable: true, writable: true\n  })\n\n  Object.defineProperty(Object.prototype, 'abbrev', {\n    value: function () { return abbrev(Object.keys(this)) },\n    enumerable: false, configurable: true, writable: true\n  })\n}\n\nfunction abbrev (list) {\n  if (arguments.length !== 1 || !Array.isArray(list)) {\n    list = Array.prototype.slice.call(arguments, 0)\n  }\n  for (var i = 0, l = list.length, args = [] ; i < l ; i ++) {\n    args[i] = typeof list[i] === \"string\" ? list[i] : String(list[i])\n  }\n\n  // sort them lexicographically, so that they're next to their nearest kin\n  args = args.sort(lexSort)\n\n  // walk through each, seeing how much it has in common with the next and previous\n  var abbrevs = {}\n    , prev = \"\"\n  for (var i = 0, l = args.length ; i < l ; i ++) {\n    var current = args[i]\n      , next = args[i + 1] || \"\"\n      , nextMatches = true\n      , prevMatches = true\n    if (current === next) continue\n    for (var j = 0, cl = current.length ; j < cl ; j ++) {\n      var curChar = current.charAt(j)\n      nextMatches = nextMatches && curChar === next.charAt(j)\n      prevMatches = prevMatches && curChar === prev.charAt(j)\n      if (!nextMatches && !prevMatches) {\n        j ++\n        break\n      }\n    }\n    prev = current\n    if (j === cl) {\n      abbrevs[current] = current\n      continue\n    }\n    for (var a = current.substr(0, j) ; j <= cl ; j ++) {\n      abbrevs[a] = current\n      a += current.charAt(j)\n    }\n  }\n  return abbrevs\n}\n\nfunction lexSort (a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n"]}